<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="WAGO" productName="e!COCKPIT" productVersion="e!COCKPIT" creationDateTime="2024-10-16T10:26:46.7868036" />
  <contentHeader name="HomeAutomation.ecp" modificationDateTime="2024-10-16T10:25:57.236364">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="Dimmer">
        <baseType>
          <enum>
            <values>
              <value name="idle" />
              <value name="soft_turn_on_restore" />
              <value name="soft_turn_off" />
              <value name="quick_turn_on" />
              <value name="quick_turn_off" />
              <value name="ramp_up_or_down" />
              <value name="low_or_high_entering" />
              <value name="low_or_high_leaving" />
              <value name="low_or_high_released_by_user" />
              <value name="blink" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="to_string" Value="" />
            </Attributes>
          </data>
        </addData>
      </dataType>
      <dataType name="DIMMER_CURVE">
        <baseType>
          <enum>
            <values>
              <value name="linear" />
              <value name="logarithmic" />
              <value name="cubic" />
            </values>
          </enum>
        </baseType>
        <addData />
      </dataType>
      <dataType name="MQTT_DISCOVERY_AVTY_T">
        <baseType>
          <struct>
            <variable name="topic">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="MQTT_DISCOVERY_BASE">
        <baseType>
          <struct>
            <variable name="name">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
            <variable name="obj_id">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object_id</xhtml>
              </documentation>
            </variable>
            <variable name="uniq_id">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">unique_id</xhtml>
              </documentation>
            </variable>
            <variable name="avty">
              <type>
                <array>
                  <dimension lower="1" upper="2" />
                  <baseType>
                    <derived name="MQTT_DISCOVERY_AVTY_T" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> availability</xhtml>
              </documentation>
            </variable>
            <variable name="avty_mode">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> availability mode</xhtml>
              </documentation>
            </variable>
            <variable name="pl_avail">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload_available</xhtml>
              </documentation>
            </variable>
            <variable name="pl_not_avail">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_not_available</xhtml>
              </documentation>
            </variable>
            <variable name="dev">
              <type>
                <derived name="MQTT_DISCOVERY_DEVICE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> device</xhtml>
              </documentation>
            </variable>
            <variable name="qos">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mqtt qos</xhtml>
              </documentation>
            </variable>
            <variable name="meta">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> extra metadata</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="MQTT_DISCOVERY_BINARY_SENSOR">
        <baseType>
          <struct>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_on">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload_on</xhtml>
              </documentation>
            </variable>
            <variable name="pl_off">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload_off</xhtml>
              </documentation>
            </variable>
            <variable name="dev_cla">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> device class</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_BINARY_SENSOR_ENT_CAT">
        <baseType>
          <struct>
            <variable name="ent_cat">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity category</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BINARY_SENSOR</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_COVER">
        <baseType>
          <struct>
            <variable name="cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">command_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_open">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload open</xhtml>
              </documentation>
            </variable>
            <variable name="pl_cls">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_close</xhtml>
              </documentation>
            </variable>
            <variable name="pl_stop">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_stop</xhtml>
              </documentation>
            </variable>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state topic</xhtml>
              </documentation>
            </variable>
            <variable name="stat_open">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state open</xhtml>
              </documentation>
            </variable>
            <variable name="stat_clsd">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state closed	</xhtml>
              </documentation>
            </variable>
            <variable name="opt">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">  optimistic</xhtml>
              </documentation>
            </variable>
            <variable name="dev_cla">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> device class</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_DEVICE">
        <baseType>
          <struct>
            <variable name="name">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
            <variable name="cu">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration_url</xhtml>
              </documentation>
            </variable>
            <variable name="ids">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">identifiers</xhtml>
              </documentation>
            </variable>
            <variable name="mf">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">manufacturer</xhtml>
              </documentation>
            </variable>
            <variable name="mdl">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">model</xhtml>
              </documentation>
            </variable>
            <variable name="sw">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">sw_version</xhtml>
              </documentation>
            </variable>
            <variable name="hw">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">hw_version</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="MQTT_DISCOVERY_EVENT">
        <baseType>
          <struct>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state topic</xhtml>
              </documentation>
            </variable>
            <variable name="evt_typ">
              <type>
                <array>
                  <dimension lower="1" upper="3" />
                  <baseType>
                    <derived name="JSONVAR" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> event types</xhtml>
              </documentation>
            </variable>
            <variable name="dev_cla">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> device class</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_LIGHT">
        <baseType>
          <struct>
            <variable name="cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">command_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_on">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_on</xhtml>
              </documentation>
            </variable>
            <variable name="pl_off">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_off</xhtml>
              </documentation>
            </variable>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="opt">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">  optimistic</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_LIGHT_DIMMER">
        <baseType>
          <struct>
            <variable name="bri_stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">brightness state topic</xhtml>
              </documentation>
            </variable>
            <variable name="bri_cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> brightness command topic</xhtml>
              </documentation>
            </variable>
            <variable name="bri_scl">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> brightness scale</xhtml>
              </documentation>
            </variable>
            <variable name="on_cmd_type">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> on command type</xhtml>
              </documentation>
            </variable>
            <variable name="dmxChannel">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> DMX</xhtml>
              </documentation>
            </variable>
            <variable name="dmxWidth">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
            <variable name="dmxUniverse">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_LIGHT</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_LOCK">
        <baseType>
          <struct>
            <variable name="cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">command_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_lock">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload lock</xhtml>
              </documentation>
            </variable>
            <variable name="pl_unlk">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload unlock</xhtml>
              </documentation>
            </variable>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="stat_locked">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state locked</xhtml>
              </documentation>
            </variable>
            <variable name="stat_unlocked">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state unlocked</xhtml>
              </documentation>
            </variable>
            <variable name="opt">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">  optimistic</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_SENSOR">
        <baseType>
          <struct>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="exp_aft">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">expire after</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_SENSOR_ENT_CAT">
        <baseType>
          <struct>
            <variable name="ent_cat">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity category</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_SENSOR</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_SIREN">
        <baseType>
          <struct>
            <variable name="cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">command_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_on">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_on</xhtml>
              </documentation>
            </variable>
            <variable name="pl_off">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_off</xhtml>
              </documentation>
            </variable>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="stat_on">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state on</xhtml>
              </documentation>
            </variable>
            <variable name="stat_off">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state off</xhtml>
              </documentation>
            </variable>
            <variable name="opt">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">  optimistic</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_SWITCH">
        <baseType>
          <struct>
            <variable name="cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">command_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_on">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_on</xhtml>
              </documentation>
            </variable>
            <variable name="pl_off">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_off</xhtml>
              </documentation>
            </variable>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="stat_on">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state on</xhtml>
              </documentation>
            </variable>
            <variable name="stat_off">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state off</xhtml>
              </documentation>
            </variable>
            <variable name="opt">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">  optimistic</xhtml>
              </documentation>
            </variable>
            <variable name="dev_cla">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> device class</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_VALVE">
        <baseType>
          <struct>
            <variable name="cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> command topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_open">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload open</xhtml>
              </documentation>
            </variable>
            <variable name="pl_cls">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_close</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_VALVE_STATE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_DISCOVERY_VALVE_STATE">
        <baseType>
          <struct>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="stat_clsd">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state clsoed</xhtml>
              </documentation>
            </variable>
            <variable name="stat_open">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state closing
 stat_closing: JSONVAR;
 state open</xhtml>
              </documentation>
            </variable>
            <variable name="opt">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> state opening
 stat_opening: JSONVAR;
  optimistic</xhtml>
              </documentation>
            </variable>
            <variable name="dev_cla">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> device class</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
            <Inheritance>
              <Extends>MQTT_DISCOVERY_BASE</Extends>
            </Inheritance>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_MESSAGE">
        <baseType>
          <struct>
            <variable name="Payload">
              <type>
                <string length="1500" />
              </type>
            </variable>
            <variable name="Topic">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="Qos">
              <type>
                <derived name="MQTT.QoS" />
              </type>
            </variable>
            <variable name="MqttRetain">
              <type>
                <BOOL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="RS485_EASTRON_SDM_Devices">
        <baseType>
          <enum>
            <values>
              <value name="SDM120" />
              <value name="SDM220" />
              <value name="SDM630" />
            </values>
          </enum>
        </baseType>
        <addData />
      </dataType>
      <dataType name="RS485_RtuQuery">
        <baseType>
          <struct>
            <variable name="DeviceId">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="FunctionCode">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="ReadAddress">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="ReadQuantity">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="WriteAddress">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="WriteQuantity">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="WriteData">
              <type>
                <array>
                  <dimension lower="0" upper="124" />
                  <baseType>
                    <WORD />
                  </baseType>
                </array>
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="VIRTUAL_MODES">
        <baseType>
          <enum>
            <values>
              <value name="Input" />
              <value name="Output" />
            </values>
          </enum>
        </baseType>
        <addData />
      </dataType>
    </dataTypes>
    <pous>
      <pou name="FB_BASE_MQTT_DISCOVERY_DEVICE" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="name">
              <type>
                <string />
              </type>
            </variable>
            <variable name="cu">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration_url</xhtml>
              </documentation>
            </variable>
            <variable name="cns">
              <type>
                <array>
                  <dimension lower="1" upper="2" />
                  <baseType>
                    <array>
                      <dimension lower="1" upper="2" />
                      <baseType>
                        <string />
                      </baseType>
                    </array>
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">connections </xhtml>
              </documentation>
            </variable>
            <variable name="ids">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">identifiers</xhtml>
              </documentation>
            </variable>
            <variable name="mf">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">manufacturer</xhtml>
              </documentation>
            </variable>
            <variable name="mdl">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">model</xhtml>
              </documentation>
            </variable>
            <variable name="sw">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">sw_version</xhtml>
              </documentation>
            </variable>
            <variable name="hw">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">hw_version</xhtml>
              </documentation>
            </variable>
            <variable name="ip">
              <type>
                <string />
              </type>
            </variable>
            <variable name="mac">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sAppName">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'Application'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> must identic to the name in the device tree</xhtml>
              </documentation>
            </variable>
            <variable name="xInit">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="logger">
              <type>
                <derived name="FB_MQTT_LOG" />
              </type>
            </variable>
            <variable name="availabilityTopic1">
              <type>
                <string />
              </type>
            </variable>
            <variable name="availabilityTopic2">
              <type>
                <string />
              </type>
            </variable>
            <variable name="availabilityOnline">
              <type>
                <string />
              </type>
            </variable>
            <variable name="availabilityOffline">
              <type>
                <string />
              </type>
            </variable>
            <variable name="MqttDiscoveryPrefix">
              <type>
                <string />
              </type>
            </variable>
            <variable name="MqttDiagnosticTopic">
              <type>
                <string />
              </type>
            </variable>
            <variable name="MqttDiscMsgBinSens">
              <type>
                <derived name="MQTT_DISCOVERY_BINARY_SENSOR" />
              </type>
            </variable>
            <variable name="MqttDiscMsgBinSensWCat">
              <type>
                <derived name="MQTT_DISCOVERY_BINARY_SENSOR_ENT_CAT" />
              </type>
            </variable>
            <variable name="MqttDiscMsgCover">
              <type>
                <derived name="MQTT_DISCOVERY_COVER" />
              </type>
            </variable>
            <variable name="MqttDiscMsgLightDim">
              <type>
                <derived name="MQTT_DISCOVERY_LIGHT_DIMMER" />
              </type>
            </variable>
            <variable name="MqttDiscMsgLight">
              <type>
                <derived name="MQTT_DISCOVERY_LIGHT" />
              </type>
            </variable>
            <variable name="MqttDiscMsgLock">
              <type>
                <derived name="MQTT_DISCOVERY_LOCK" />
              </type>
            </variable>
            <variable name="MqttDiscMsgSensor">
              <type>
                <derived name="MQTT_DISCOVERY_SENSOR" />
              </type>
            </variable>
            <variable name="MqttDiscMsgSensorWCat">
              <type>
                <derived name="MQTT_DISCOVERY_SENSOR_ENT_CAT" />
              </type>
            </variable>
            <variable name="MqttDiscMsgSiren">
              <type>
                <derived name="MQTT_DISCOVERY_SIREN" />
              </type>
            </variable>
            <variable name="MqttDiscMsgSwitch">
              <type>
                <derived name="MQTT_DISCOVERY_SWITCH" />
              </type>
            </variable>
            <variable name="MqttDiscMsgEvent">
              <type>
                <derived name="MQTT_DISCOVERY_EVENT" />
              </type>
            </variable>
            <variable name="MqttDiscMsgValve">
              <type>
                <derived name="MQTT_DISCOVERY_VALVE" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SendLogMessage">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="str">
                    <type>
                      <string length="128" />
                    </type>
                  </variable>
                  <variable name="instance">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pMqttPublishQueue^.AddMessage(
	Payload:= CONCAT(CONCAT(instance,' | '),str),
	Topic := CONCAT(MqttDiagnosticTopic, '/Log'),
	Qos := 1,
	MqttRetain := TRUE
);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateSwitchEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="CommandTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOn">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadOff">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateOnPayload">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateOffPayload">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'switch'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgSwitch.name.CharString :=  name; // friendly name
MqttDiscMsgSwitch.obj_id.CharString :=  Id; 
MqttDiscMsgSwitch.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgSwitch.cmd_t.CharString := CommandTopic;
MqttDiscMsgSwitch.pl_on.CharString := PayloadOn;
MqttDiscMsgSwitch.pl_off.CharString := PayloadOff;
MqttDiscMsgSwitch.stat_t.CharString := StateTopic;
MqttDiscMsgSwitch.stat_on.CharString := StateOnPayload;
MqttDiscMsgSwitch.stat_off.CharString := StateOffPayload;
MqttDiscMsgSwitch.opt.Boolean := FALSE;
MqttDiscMsgSwitch.dev_cla.CharString := DeviceClass;

// Availabilty related
MqttDiscMsgSwitch.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgSwitch.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgSwitch.avty_mode.CharString := 'all';
MqttDiscMsgSwitch.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgSwitch.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgSwitch.qos.Integer := 2;

// Device related
MqttDiscMsgSwitch.dev.cu.CharString := THIS^.cu;
MqttDiscMsgSwitch.dev.name.CharString := THIS^.name;
MqttDiscMsgSwitch.dev.hw.CharString := THIS^.hw;
MqttDiscMsgSwitch.dev.ids.CharString := THIS^.ids;
MqttDiscMsgSwitch.dev.sw.CharString := THIS^.sw;
MqttDiscMsgSwitch.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgSwitch.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgSwitch.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgSwitch),
	NumberOfVars:= SIZEOF(MqttDiscMsgSwitch) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateLightDimmerEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="CommandTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOn">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadOff">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="BrightnessCommandTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="BrightnessStateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="BrightnessScale">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="OnCommandType">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="'last'" />
                    </initialValue>
                  </variable>
                  <variable name="DmxChannel">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> dmx specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="DmxWidth">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="DmxUniverse">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'light'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgLightDim.name.CharString :=  name; // friendly name
MqttDiscMsgLightDim.obj_id.CharString :=  Id; 
MqttDiscMsgLightDim.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgLightDim.cmd_t.CharString := CommandTopic;
MqttDiscMsgLightDim.pl_on.CharString := PayloadOn;
MqttDiscMsgLightDim.pl_off.CharString := PayloadOff;
MqttDiscMsgLightDim.stat_t.CharString := StateTopic;
MqttDiscMsgLightDim.opt.Boolean := FALSE;

MqttDiscMsgLightDim.bri_cmd_t.CharString := BrightnessCommandTopic;
MqttDiscMsgLightDim.bri_stat_t.CharString := BrightnessStateTopic;
MqttDiscMsgLightDim.bri_scl.Integer := BrightnessScale;
MqttDiscMsgLightDim.on_cmd_type.CharString := OnCommandType;

MqttDiscMsgLightDim.dmxChannel.Integer := DmxChannel;
MqttDiscMsgLightDim.dmxWidth.Integer := DmxWidth;
MqttDiscMsgLightDim.dmxUniverse.Integer := DmxUniverse;

// Availabilty related
MqttDiscMsgLightDim.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgLightDim.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgLightDim.avty_mode.CharString := 'all';
MqttDiscMsgLightDim.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgLightDim.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgLightDim.qos.Integer := 2;

// Device related
MqttDiscMsgLightDim.dev.cu.CharString := THIS^.cu;
MqttDiscMsgLightDim.dev.name.CharString := THIS^.name;
MqttDiscMsgLightDim.dev.hw.CharString := THIS^.hw;
MqttDiscMsgLightDim.dev.ids.CharString := THIS^.ids;
MqttDiscMsgLightDim.dev.sw.CharString := THIS^.sw;
MqttDiscMsgLightDim.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgLightDim.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgLightDim.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgLightDim),
	NumberOfVars:= SIZEOF(MqttDiscMsgLightDim) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateSensorEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ExpiryAfter">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'sensor'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgSensor.name.CharString :=  name; // friendly name
MqttDiscMsgSensor.obj_id.CharString :=  Id; 
MqttDiscMsgSensor.uniq_id.CharString :=  Id; 

// Entity related: Specific
//MqttDiscoverySensorMessage.ic.CharString := Icon;
MqttDiscMsgSensor.stat_t.CharString := StateTopic;
MqttDiscMsgSensor.exp_aft.Integer := ExpiryAfter;

// Availabilty related
MqttDiscMsgSensor.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgSensor.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgSensor.avty_mode.CharString := 'all';
MqttDiscMsgSensor.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgSensor.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgSensor.qos.Integer := 2;

// Device related
MqttDiscMsgSensor.dev.cu.CharString := THIS^.cu;
MqttDiscMsgSensor.dev.name.CharString := THIS^.name;
MqttDiscMsgSensor.dev.hw.CharString := THIS^.hw;
MqttDiscMsgSensor.dev.ids.CharString := THIS^.ids;
MqttDiscMsgSensor.dev.sw.CharString := THIS^.sw;
MqttDiscMsgSensor.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgSensor.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgSensor.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgSensor),
	NumberOfVars:= SIZEOF(MqttDiscMsgSensor) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateSirenEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="CommandTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOn">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadOff">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateOnPayload">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateOffPayload">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'siren'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgSiren.name.CharString :=  name; // friendly name
MqttDiscMsgSiren.obj_id.CharString :=  Id; 
MqttDiscMsgSiren.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgSiren.cmd_t.CharString := CommandTopic;
MqttDiscMsgSiren.pl_on.CharString := PayloadOn;
MqttDiscMsgSiren.pl_off.CharString := PayloadOff;
MqttDiscMsgSiren.stat_t.CharString := StateTopic;
MqttDiscMsgSiren.stat_on.CharString := StateOnPayload;
MqttDiscMsgSiren.stat_off.CharString := StateOffPayload;
MqttDiscMsgSiren.opt.Boolean := FALSE;

// Availabilty related
MqttDiscMsgSiren.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgSiren.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgSiren.avty_mode.CharString := 'all';
MqttDiscMsgSiren.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgSiren.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgSiren.qos.Integer := 2;


// Device related
MqttDiscMsgSiren.dev.cu.CharString := THIS^.cu;
MqttDiscMsgSiren.dev.name.CharString := THIS^.name;
MqttDiscMsgSiren.dev.hw.CharString := THIS^.hw;
MqttDiscMsgSiren.dev.ids.CharString := THIS^.ids;
MqttDiscMsgSiren.dev.sw.CharString := THIS^.sw;
MqttDiscMsgSiren.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgSiren.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgSiren.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgSiren),
	NumberOfVars:= SIZEOF(MqttDiscMsgSiren) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateLockEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="CommandTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadLock">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadUnlock">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateLocked">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateUnlocked">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'lock'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgLock.name.CharString :=  name; // friendly name
MqttDiscMsgLock.obj_id.CharString :=  Id; 
MqttDiscMsgLock.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgLock.cmd_t.CharString := CommandTopic;
MqttDiscMsgLock.pl_lock.CharString := PayloadLock;
MqttDiscMsgLock.pl_unlk.CharString := PayloadUnlock;
MqttDiscMsgLock.stat_t.CharString := StateTopic;
MqttDiscMsgLock.stat_locked.CharString := StateLocked;
MqttDiscMsgLock.stat_unlocked.CharString := StateUnlocked;
MqttDiscMsgLock.opt.Boolean := FALSE;

// Availabilty related
MqttDiscMsgLock.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgLock.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgLock.avty_mode.CharString := 'all';
MqttDiscMsgLock.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgLock.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgLock.qos.Integer := 2;

// Device related
MqttDiscMsgLock.dev.cu.CharString := THIS^.cu;
MqttDiscMsgLock.dev.name.CharString := THIS^.name;
MqttDiscMsgLock.dev.hw.CharString := THIS^.hw;
MqttDiscMsgLock.dev.ids.CharString := THIS^.ids;
MqttDiscMsgLock.dev.sw.CharString := THIS^.sw;
MqttDiscMsgLock.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgLock.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgLock.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgLock),
	NumberOfVars:= SIZEOF(MqttDiscMsgLock) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateLightEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="CommandTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOn">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadOff">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'light'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgLight.name.CharString :=  name; // friendly name
MqttDiscMsgLight.obj_id.CharString :=  Id; 
MqttDiscMsgLight.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgLight.cmd_t.CharString := CommandTopic;
MqttDiscMsgLight.pl_on.CharString := PayloadOn;
MqttDiscMsgLight.pl_off.CharString := PayloadOff;
MqttDiscMsgLight.stat_t.CharString := StateTopic;
MqttDiscMsgLight.opt.Boolean := FALSE;

// Availabilty related
MqttDiscMsgLight.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgLight.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgLight.avty_mode.CharString := 'all';
MqttDiscMsgLight.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgLight.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgLight.qos.Integer := 2;

// Device related
MqttDiscMsgLight.dev.cu.CharString := THIS^.cu;
MqttDiscMsgLight.dev.name.CharString := THIS^.name;
MqttDiscMsgLight.dev.hw.CharString := THIS^.hw;
MqttDiscMsgLight.dev.ids.CharString := THIS^.ids;
MqttDiscMsgLight.dev.sw.CharString := THIS^.sw;
MqttDiscMsgLight.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgLight.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgLight.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgLight),
	NumberOfVars:= SIZEOF(MqttDiscMsgLight) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initBaseDevice">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="ConfigurationUrl">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Identifiers">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Manufacturer">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Model">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="SoftwareVersion">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="HardwareVersion">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="IpAddress">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="MacAddress">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="availabilityTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="availabilityTopic2">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="availabilityOnline">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="availabilityOffline">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="MqttDiscoveryPrefix">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="MqttDiagnosticTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.availabilityTopic1 := availabilityTopic;

IF CommonTypesAndFunctions.StrEquals(str1:= ADR(availabilityTopic2), str2:= ADR('')) THEN
	THIS^.availabilityTopic2 := availabilityTopic;
ELSE
	THIS^.availabilityTopic2 := availabilityTopic2;
END_IF

THIS^.availabilityOnline := availabilityOnline;
THIS^.availabilityOffline := availabilityOffline;
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttDiscoveryPrefix := MqttDiscoveryPrefix;
THIS^.MqttDiagnosticTopic := MqttDiagnosticTopic;

THIS^.name := Name;
THIS^.cu:= ConfigurationUrl;
THIS^.ids:= Identifiers;
THIS^.mf:= Manufacturer;
THIS^.mdl:= Model;
THIS^.hw:= HardwareVersion;
THIS^.sw:= SoftwareVersion;
THIS^.ip := IpAddress;
THIS^.mac := MacAddress;

//Create a diagnostics availability binary sensor
CreateBinarySensorEntityWithCategory(
	Name := 'Availability',
	Id := CONCAT(THIS^.Name,'_diag_availability'),
	Meta := '',
	StateTopic := availabilityTopic,
	PayloadOn := availabilityOnline,
	PayloadOff := availabilityOffline,
	DeviceClass := 'CONNECTIVITY',
	EntityCategory := 'diagnostic');
	
//Logger
CreateSensorEntityWithCategory(
		Name := 'Log',
		Id := CONCAT(THIS^.Name,'_diag_log'),
		Meta := '',
		StateTopic := CONCAT(MqttDiagnosticTopic, '/Log'),
		EntityCategory := 'diagnostic');
	
// MAC address
IF NOT(MacAddress = '') THEN
	CreateSensorEntityWithCategory(
		Name := 'MAC',
		Id := CONCAT(THIS^.Name,'_diag_mac'),
		Meta := '',
		StateTopic := CONCAT(MqttDiagnosticTopic, '/MAC'),
		StateValue := MacAddress,
		EntityCategory := 'diagnostic');	
END_IF


</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateCoverEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="CommandTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOpen">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadClose">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadStop">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateOpen">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateClosed">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Deviceclass">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'cover'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgCover.name.CharString :=  name; // friendly name
MqttDiscMsgCover.obj_id.CharString :=  Id; 
MqttDiscMsgCover.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgCover.cmd_t.CharString := CommandTopic;
MqttDiscMsgCover.pl_open.CharString := PayloadOpen;
MqttDiscMsgCover.pl_cls.CharString := PayloadClose;
MqttDiscMsgCover.pl_stop.CharString := PayloadStop;
MqttDiscMsgCover.stat_t.CharString := StateTopic;
MqttDiscMsgCover.stat_open.CharString := StateOpen;
MqttDiscMsgCover.stat_clsd.CharString := StateClosed;
MqttDiscMsgCover.opt.Boolean := FALSE;
MqttDiscMsgCover.dev_cla.CharString := Deviceclass;

// Availabilty related
MqttDiscMsgCover.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgCover.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgCover.avty_mode.CharString := 'all';
MqttDiscMsgCover.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgCover.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgCover.qos.Integer := 2;

// Device related
MqttDiscMsgCover.dev.cu.CharString := THIS^.cu;
MqttDiscMsgCover.dev.name.CharString := THIS^.name;
MqttDiscMsgCover.dev.hw.CharString := THIS^.hw;
MqttDiscMsgCover.dev.ids.CharString := THIS^.ids;
MqttDiscMsgCover.dev.sw.CharString := THIS^.sw;
MqttDiscMsgCover.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgCover.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgCover.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgCover),
	NumberOfVars:= SIZEOF(MqttDiscMsgCover) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateBinarySensorEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOn">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadOff">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'binary_sensor'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="reflection" Value="" />
                    </Attributes>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );


// 	Entity related: Basis
MqttDiscMsgBinSens.name.CharString :=  name; // friendly name
MqttDiscMsgBinSens.obj_id.CharString :=  Id; 
MqttDiscMsgBinSens.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgBinSens.stat_t.CharString := StateTopic;
MqttDiscMsgBinSens.pl_on.CharString := PayloadOn;
MqttDiscMsgBinSens.pl_off.CharString := PayloadOff;
MqttDiscMsgBinSens.dev_cla.CharString := DeviceClass;

// Availabilty related
MqttDiscMsgBinSens.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgBinSens.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgBinSens.avty_mode.CharString := 'all';
MqttDiscMsgBinSens.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgBinSens.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgBinSens.qos.Integer := 2;

// Device related
MqttDiscMsgBinSens.dev.cu.CharString := THIS^.cu;
MqttDiscMsgBinSens.dev.name.CharString := THIS^.name;
MqttDiscMsgBinSens.dev.hw.CharString := THIS^.hw;
MqttDiscMsgBinSens.dev.ids.CharString := THIS^.ids;
MqttDiscMsgBinSens.dev.sw.CharString := THIS^.sw;
MqttDiscMsgBinSens.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgBinSens.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgBinSens.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgBinSens),
	NumberOfVars:= SIZEOF(MqttDiscMsgBinSens) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateBinarySensorEntityWithCategory">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOn">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadOff">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="EntityCategory">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> config or diagnostic</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'binary_sensor'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="reflection" Value="" />
                    </Attributes>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );


// 	Entity related: Basis
MqttDiscMsgBinSensWCat.name.CharString :=  name; // friendly name
MqttDiscMsgBinSensWCat.obj_id.CharString :=  Id; 
MqttDiscMsgBinSensWCat.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgBinSensWCat.stat_t.CharString := StateTopic;
MqttDiscMsgBinSensWCat.pl_on.CharString := PayloadOn;
MqttDiscMsgBinSensWCat.pl_off.CharString := PayloadOff;
MqttDiscMsgBinSensWCat.dev_cla.CharString := DeviceClass;
MqttDiscMsgBinSensWCat.ent_cat.CharString := EntityCategory;

// Availabilty related
MqttDiscMsgBinSensWCat.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgBinSensWCat.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgBinSensWCat.avty_mode.CharString := 'all';
MqttDiscMsgBinSensWCat.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgBinSensWCat.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgBinSensWCat.qos.Integer := 2;

// Device related
MqttDiscMsgBinSensWCat.dev.cu.CharString := THIS^.cu;
MqttDiscMsgBinSensWCat.dev.name.CharString := THIS^.name;
MqttDiscMsgBinSensWCat.dev.hw.CharString := THIS^.hw;
MqttDiscMsgBinSensWCat.dev.ids.CharString := THIS^.ids;
MqttDiscMsgBinSensWCat.dev.sw.CharString := THIS^.sw;
MqttDiscMsgBinSensWCat.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgBinSensWCat.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgBinSensWCat.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgBinSensWCat),
	NumberOfVars:= SIZEOF(MqttDiscMsgBinSensWCat) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateSensorEntityWithCategory">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="StateValue">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="EntityCategory">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> config or diagnostic</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ExpiryAfter">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'sensor'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgSensorWCat.name.CharString :=  name; // friendly name
MqttDiscMsgSensorWCat.obj_id.CharString :=  Id; 
MqttDiscMsgSensorWCat.uniq_id.CharString :=  Id; 

// Entity related: Specific
//MqttDiscoverySensorMessage.ic.CharString := Icon;
MqttDiscMsgSensorWCat.stat_t.CharString := StateTopic;
MqttDiscMsgSensorWCat.exp_aft.Integer := ExpiryAfter;
MqttDiscMsgSensorWCat.ent_cat.CharString := EntityCategory;

// Availabilty related
MqttDiscMsgSensorWCat.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgSensorWCat.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgSensorWCat.avty_mode.CharString := 'all';
MqttDiscMsgSensorWCat.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgSensorWCat.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgSensorWCat.qos.Integer := 2;

// Device related
MqttDiscMsgSensorWCat.dev.cu.CharString := THIS^.cu;
MqttDiscMsgSensorWCat.dev.name.CharString := THIS^.name;
MqttDiscMsgSensorWCat.dev.hw.CharString := THIS^.hw;
MqttDiscMsgSensorWCat.dev.ids.CharString := THIS^.ids;
MqttDiscMsgSensorWCat.dev.sw.CharString := THIS^.sw;
MqttDiscMsgSensorWCat.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgSensorWCat.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgSensorWCat.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgSensorWCat),
	NumberOfVars:= SIZEOF(MqttDiscMsgSensorWCat) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	IF NOT (StateValue = '') THEN		
		pMqttPublishQueue^.AddMessage(
			Payload:= StateValue,
			Topic := StateTopic,
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := TRUE,
		);
	END_IF
	
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateEventEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="EventTypes">
                    <type>
                      <array>
                        <dimension lower="1" upper="3" />
                        <baseType>
                          <string />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="Deviceclass">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'event'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgEvent.name.CharString :=  name; // friendly name
MqttDiscMsgEvent.obj_id.CharString :=  Id; 
MqttDiscMsgEvent.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgEvent.stat_t.CharString := StateTopic;
MqttDiscMsgEvent.evt_typ[1].CharString := EventTypes[1];
MqttDiscMsgEvent.evt_typ[2].CharString := EventTypes[2];
MqttDiscMsgEvent.evt_typ[3].CharString := EventTypes[3];
MqttDiscMsgEvent.dev_cla.CharString := Deviceclass;

// Availabilty related
MqttDiscMsgEvent.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgEvent.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgEvent.avty_mode.CharString := 'all';
MqttDiscMsgEvent.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgEvent.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgEvent.qos.Integer := 2;

// Device related
MqttDiscMsgEvent.dev.cu.CharString := THIS^.cu;
MqttDiscMsgEvent.dev.name.CharString := THIS^.name;
MqttDiscMsgEvent.dev.hw.CharString := THIS^.hw;
MqttDiscMsgEvent.dev.ids.CharString := THIS^.ids;
MqttDiscMsgEvent.dev.sw.CharString := THIS^.sw;
MqttDiscMsgEvent.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgEvent.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgEvent.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgEvent),
	NumberOfVars:= SIZEOF(MqttDiscMsgEvent) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CreateValveEntity">
              <interface>
                <inputVars>
                  <variable name="Name">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> default</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Id">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Meta">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="CommandTopic">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> entity specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="PayloadOpen">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="PayloadClosed">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateOpen">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="StateClosed">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="Deviceclass">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="EntityId">
                    <type>
                      <string length="25" />
                    </type>
                    <initialValue>
                      <simpleValue value="'valve'" />
                    </initialValue>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(THIS^.MqttDiscoveryPrefix, EntityId),'/'), Id),'/config' );

// 	Entity related: Basis
MqttDiscMsgValve.name.CharString :=  name; // friendly name
MqttDiscMsgValve.obj_id.CharString :=  Id; 
MqttDiscMsgValve.uniq_id.CharString :=  Id; 

// Entity related: Specific
MqttDiscMsgValve.cmd_t.CharString := CommandTopic;
MqttDiscMsgValve.pl_open.CharString := PayloadOpen;
MqttDiscMsgValve.pl_cls.CharString := PayLoadClosed;
MqttDiscMsgValve.stat_t.CharString := StateTopic;
MqttDiscMsgValve.stat_open.CharString := StateOpen;
MqttDiscMsgValve.stat_clsd.CharString := StateClosed;
MqttDiscMsgValve.opt.Boolean := FALSE;
MqttDiscMsgValve.dev_cla.CharString := Deviceclass;

// Availabilty related
MqttDiscMsgValve.avty[1].topic.CharString := THIS^.availabilityTopic1;
MqttDiscMsgValve.avty[2].topic.CharString := THIS^.availabilityTopic2;
MqttDiscMsgValve.avty_mode.CharString := 'all';
MqttDiscMsgValve.pl_avail.CharString :=   THIS^.availabilityOnline;
MqttDiscMsgValve.pl_not_avail.CharString :=  THIS^.availabilityOffline;
MqttDiscMsgValve.qos.Integer := 2;

// Device related
MqttDiscMsgValve.dev.cu.CharString := THIS^.cu;
MqttDiscMsgValve.dev.name.CharString := THIS^.name;
MqttDiscMsgValve.dev.hw.CharString := THIS^.hw;
MqttDiscMsgValve.dev.ids.CharString := THIS^.ids;
MqttDiscMsgValve.dev.sw.CharString := THIS^.sw;
MqttDiscMsgValve.dev.mdl.CharString := THIS^.mdl;
MqttDiscMsgValve.dev.mf.CharString := THIS^.mf;
	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	MqttDiscMsgValve.meta.CharString := meta;
END_IF

ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(MqttDiscMsgValve),
	NumberOfVars:= SIZEOF(MqttDiscMsgValve) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
ComposeJSON.Execute := TRUE;
ComposeJSON();

IF MqttJSON = '' THEN
	SendLogMessage(str:=CONCAT(CONCAT('ERROR ',Id), ' had empty MqttJSON'), instance := InstanceName);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
	SendLogMessage(str:=CONCAT(CONCAT('Added ',Id), ' as MQTT dicovery'), instance := InstanceName);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_INPUT_BINARYSENSOR_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="BS">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Follows the input but debounced </xhtml>
              </documentation>
            </variable>
            <variable name="EVENT">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Event outputs only high for on clock cycle </xhtml>
              </documentation>
            </variable>
            <variable name="EVENT_R">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="EVENT_F">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FB_DEBOUNCE">
              <type>
                <derived name="OSCAT_BUILDING.DEBOUNCE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> to debounce the physical input </xhtml>
              </documentation>
            </variable>
            <variable name="FB_R_TRIG">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> to detect a rising edge on the debounced signal </xhtml>
              </documentation>
            </variable>
            <variable name="FB_F_TRIG">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> to detect a falling edge on the debounced signal </xhtml>
              </documentation>
            </variable>
            <variable name="T_TurnOffDelay">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#0ms" />
              </initialValue>
            </variable>
            <variable name="FB_TurnOffDelayTimer">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DEBOUNCE(IN := BS,	
	TD := T#50MS, (* 2x cyle + 10ms *)
	PM := FALSE
	);
	
FB_TurnOffDelayTimer(IN:=FB_DEBOUNCE.Q,
	PT := T_TurnOffDelay,
	Q=&gt;Q
	);

FB_R_TRIG(CLK := FB_TurnOffDelayTimer.Q);
FB_F_TRIG(CLK := FB_TurnOffDelayTimer.Q);

EVENT := FB_R_TRIG.Q OR FB_F_TRIG.Q;
EVENT_R := FB_R_TRIG.Q;
EVENT_F := FB_F_TRIG.Q;

IF (FB_R_TRIG.Q OR (Startup AND FB_DEBOUNCE.Q)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'ON',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
	Startup:=FALSE;	
END_IF

IF (FB_F_TRIG.Q OR (Startup AND NOT(FB_DEBOUNCE.Q))) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'OFF',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
	Startup:=FALSE;	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_TurnOffDelay">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_TurnOffDelay:=T_TurnOffDelay;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string length="100" />
                    </type>
                    <initialValue>
                      <simpleValue value="'smoke'" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateBinarySensorEntity(
		Id := id,
		Name := name,
		Meta := meta,
		StateTopic := THIS^.MQTTPublishTopic,
		PayloadOn := 'ON',
		PayloadOff := 'OFF',
		DeviceClass := DeviceClass);
		
	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
SUPER^.InitBaseMqtt();
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_INPUT_PUSHBUTTON_DIMMER_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PB">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DIM">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="DBL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SINGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DOUBLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_LONG">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="FB_DIMMER">
              <type>
                <derived name="OSCAT_BUILDING.DIMM_I" />
              </type>
            </variable>
            <variable name="OutputDimmer">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Qos_Dimm">
              <type>
                <derived name="MQTT.QoS" />
              </type>
            </variable>
            <variable name="Delta_Dimm">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="FB_DETECTPUSH">
              <type>
                <derived name="OSCAT_BUILDING.CLICK_MODE" />
              </type>
            </variable>
            <variable name="P_LONG_R_TRIG">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
            </variable>
            <variable name="P_LONG_F_TRIG">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
            </variable>
            <variable name="PreviousDim">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Vars to detect statechanges on outputs </xhtml>
              </documentation>
            </variable>
            <variable name="PreviousQ">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousDBL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T_Debounce">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
            <variable name="T_Reconfig">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10s0ms" />
              </initialValue>
            </variable>
            <variable name="T_On_Max">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#0ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm_Start">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#3s0ms" />
              </initialValue>
            </variable>
            <variable name="Min_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="50" />
              </initialValue>
            </variable>
            <variable name="Max_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
            </variable>
            <variable name="Soft_Dimm">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="Dbl_Toggle">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Rst_Out">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="T_Long">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DIMMER(
	IN:= PB,
	SET:= SET,
	VAL:= VAL,
	RST:= RST,
	OUT:= DIM,
	T_DEBOUNCE:= T_Debounce,
	T_RECONFIG:= T_Reconfig,
	T_ON_MAX:= T_On_Max,
	T_DIMM_START:= T_Dimm_Start,
	T_DIMM:= T_Dimm,
	MIN_ON:= Min_On,
	MAX_ON:= Max_On,
	SOFT_DIMM:= Soft_Dimm,
	DBL_TOGGLE:= Dbl_Toggle,
	RST_OUT:= Rst_Out,
	Q=&gt; Q,
	DBL=&gt; DBL);
	
FB_DETECTPUSH(
	IN:= PB, 	
	SINGLE=&gt; SINGLE, 
	DOUBLE=&gt; DOUBLE, 
	TP_LONG=&gt; LONG, 
	T_LONG:= T_long);
	
P_LONG_R_TRIG(CLK:=FB_DETECTPUSH.LONG);
P_LONG_F_TRIG(CLK:=FB_DETECTPUSH.LONG);
	
IF (ABS(BYTE_TO_INT(PreviousDim) - BYTE_TO_INT(DIM)) &gt;= Delta_Dimm OR PB = FALSE) AND DIM &lt;&gt; PreviousDim AND OutputDimmer AND InitMqttDone  THEN
	PreviousDim:=DIM;
	pMqttPublishQueue^.AddMessage(		
		Payload := BYTE_TO_STRING(DIM),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/DIM'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DIMMER.Q &lt;&gt; PreviousQ AND InitMqttDone THEN
	PreviousQ:=FB_DIMMER.Q;
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FB_DIMMER.Q),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/Q'),
		Qos := Qos_Dimm,
		MqttRetain := TRUE
	);
END_IF

IF FB_DIMMER.DBL &lt;&gt; PreviousDBL AND InitMqttDone THEN
	PreviousDBL:=FB_DIMMER.DBL;
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FB_DIMMER.DBL),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/DBL'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF

IF FB_DETECTPUSH.SINGLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'SINGLE',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.DOUBLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'DOUBLE',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.TP_LONG AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'LONG',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF (P_LONG_R_TRIG.Q OR P_LONG_F_TRIG.Q) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FB_DETECTPUSH.LONG),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),'/P_LONG'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_Debounce">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                  <variable name="T_Reconfig">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_On_Max">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_Dimm_Start">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_Dimm">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Min_On">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="Max_On">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="Soft_Dimm">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Dbl_Toggle">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Rst_Out">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="T_Long">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_Debounce:=T_Debounce;
THIS^.T_Reconfig:=T_Reconfig;
THIS^.T_On_Max:=T_On_Max;
THIS^.T_Dimm_Start:=T_Dimm_Start;
THIS^.T_Dimm:=T_Dimm;
THIS^.Min_On:=Min_On;
THIS^.Max_On:=Max_On;

THIS^.T_Long:=T_Long;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="OutputDimmer">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Qos_Dimm">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="Delta_Dimm">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

THIS^.OutputDimmer:=OutputDimmer;
THIS^.Qos_Dimm:=Qos_Dimm;
THIS^.Delta_Dimm:=Delta_Dimm;

InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_INPUT_PUSHBUTTON_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PB">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="SINGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DOUBLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_LONG">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="FB_DETECTPUSH">
              <type>
                <derived name="OSCAT_BUILDING.CLICK_MODE" />
              </type>
            </variable>
            <variable name="P_LONG_R_TRIG">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
            </variable>
            <variable name="P_LONG_F_TRIG">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
            </variable>
            <variable name="T_Long">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DETECTPUSH(
	IN:= PB, 	
	SINGLE=&gt; SINGLE, 
	DOUBLE=&gt; DOUBLE, 
	TP_LONG=&gt; LONG, 
	LONG=&gt; P_LONG,
	T_LONG:= T_Long);
	
P_LONG_R_TRIG(CLK:=FB_DETECTPUSH.LONG);
P_LONG_F_TRIG(CLK:=FB_DETECTPUSH.LONG);
	
IF FB_DETECTPUSH.SINGLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := '{"event_type": "SINGLE"}',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.DOUBLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := '{"event_type": "DOUBLE"}',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.TP_LONG AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := '{"event_type": "LONG"}',
		Topic := MQTTPublishTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_Long">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_Long:=T_Long;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
SUPER^.InitBaseMqtt();
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="eventTypes">
                    <type>
                      <array>
                        <dimension lower="1" upper="3" />
                        <baseType>
                          <string />
                        </baseType>
                      </array>
                    </type>
                    <initialValue>
                      <arrayValue>
                        <value>
                          <simpleValue value="'SINGLE'" />
                        </value>
                        <value>
                          <simpleValue value="'DOUBLE'" />
                        </value>
                        <value>
                          <simpleValue value="'LONG'" />
                        </value>
                      </arrayValue>
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateEventEntity(
		Name := name,
		Id := id,
		Meta := meta,
		StateTopic := THIS^.MQTTPublishTopic,
		EventTypes := eventTypes,
		Deviceclass := 'button');

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MQTT_BASE" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="_InstancePath">
              <type>
                <string />
              </type>
            </variable>
            <variable name="InstanceNamePt">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="DeviceName">
              <type>
                <string />
              </type>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Publish (Out);</xhtml>
              </documentation>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="MQTTPublishTopic">
              <type>
                <string length="100" />
              </type>
            </variable>
            <variable name="MqttSubscribeTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Subscribe (In)</xhtml>
              </documentation>
            </variable>
            <variable name="MqttSubscribeTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="MQTTSubscribeTopic">
              <type>
                <string length="100" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttHighRequest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttLowRequest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttQos">
              <type>
                <derived name="MQTT.QoS" />
              </type>
              <initialValue>
                <simpleValue value="MQTT.QoS.ExactlyOnce" />
              </initialValue>
            </variable>
            <variable name="MqttRetain">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="ComposeJSON">
              <type>
                <derived name="STRUCT_TO_JSON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> HA Discovery specific </xhtml>
              </documentation>
            </variable>
            <variable name="initMqttDiscoveryDone">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitBaseMqtt">
              <interface>
                <localVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
(*Define instance names*)
InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(_InstancePath)) + 1;

DeviceName := LEFT(_InstancePath,find(_InstancePath, '.' )-1  ) ;

// Publish (Out);
IF	NOT CommonTypesAndFunctions.StrEquals(ADR(MqttPublishTopicPrefix),ADR('')) THEN
	THIS^.MqttPublishTopicSuffix := InstanceNamePt^;
	THIS^.MQTTPublishTopic := CONCAT(MqttPublishTopicPrefix^, THIS^.MqttPublishTopicSuffix);
END_IF

// Subscribe (In)
IF	NOT CommonTypesAndFunctions.StrEquals(ADR(MqttSubscribeTopicPrefix),ADR('')) THEN
	THIS^.MQTTSubscribeTopicSuffix := InstanceNamePt^;
	THIS^.MQTTSubscribeTopic := CONCAT(MqttSubscribeTopicPrefix^ ,THIS^.MQTTSubscribeTopicSuffix);
END_IF

InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MQTT_LOG" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'.plc_log'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> should have a dot in the name</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
              </Inheritance>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                    <initialValue>
                      <simpleValue value="MQTT.QoS.ExactlyOnce" />
                    </initialValue>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

THIS^.MqttQos := MqttQos;
THIS^.MqttRetain := MqttRetain;

SUPER^.InitBaseMqtt();</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="send">
              <interface>
                <inputVars>
                  <variable name="str">
                    <type>
                      <string length="128" />
                    </type>
                  </variable>
                  <variable name="instance">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= CONCAT(CONCAT(instance,' | '),str),
		Topic := THIS^.MQTTPublishTopic,
		Qos := 1,
		MqttRetain := TRUE
	);
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'plc_log'" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF	
	
	Device^.CreateSensorEntity(
		Name := name,
		Id := id,
		Meta := meta,
		StateTopic := THIS^.MQTTPublishTopic);

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MqttPublishQueue" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="EMPTY">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FULL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="localMessage">
              <type>
                <derived name="MQTT_MESSAGE" />
              </type>
            </variable>
            <variable name="fifo">
              <type>
                <array>
                  <dimension lower="0" upper="n" />
                  <baseType>
                    <derived name="MQTT_MESSAGE" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="pr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pw">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="n">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1024" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> changing this value will chage the number of stored elements in the fifo </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetMessage">
              <interface>
                <returnType>
                  <derived name="MQTT_MESSAGE" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT EMPTY THEN
	GetMessage := fifo[pr];
	pr := OSCAT_BASIC.INC1(pr,n);
	EMPTY := pr = pw;
	FULL := FALSE;
END_IF;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="AddMessage">
              <interface>
                <inputVars>
                  <variable name="Payload">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="Topic">
                    <type>
                      <string length="128" />
                    </type>
                  </variable>
                  <variable name="Qos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT FULL THEN
	localMessage.Payload := Payload;
	localMessage.Topic := Topic;
	localMessage.Qos := Qos;
	localMessage.MqttRetain := MqttRetain;
	fifo[pw] := localMessage;
	pw := OSCAT_BASIC.INC1(pw,n);
	FULL := pw = pr;
	EMPTY := FALSE;
END_IF;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Reset">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pw := pr;
FULL := FALSE;
EMPTY := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MqttPublishWorker" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="SendDone">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="LocalMqttMessage">
              <type>
                <derived name="MQTT_MESSAGE" />
              </type>
            </variable>
            <variable name="InitDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RequestToSend">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Send">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="publish">
              <type>
                <derived name="MQTT.MQTTPublish" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//need to call publish here because of FB nums
publish(
	Topic:= ADR(LocalMqttMessage.Topic), 
	PayloadString:= ADR(LocalMqttMessage.Payload), 
	PublishAsString:= TRUE, 
	QoSIn:= LocalMqttMessage.Qos, 
	MRetain:= LocalMqttMessage.MqttRetain, 
	send:= Send);
	
IF NOT InitDone THEN RETURN; END_IF

IF RequestToSend THEN
	Send := TRUE;
	SendDone := FALSE;
END_IF

IF publish.done THEN
	 SendDone := TRUE;
	 RequestToSend:=FALSE;
	 Send:=FALSE;
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init">
              <interface>
                <inputVars>
                  <variable name="inputMQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Pointer MQTTT exchange strucure</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">publish.SetMqttInOut(MQTT_IN_OUT := inputMQTT_IN_OUT^);

InitDone := TRUE;
SendDone := TRUE;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishMessage">
              <interface>
                <inputVars>
                  <variable name="MqttMessage">
                    <type>
                      <derived name="MQTT_MESSAGE" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">LocalMqttMessage := MqttMessage;

RequestToSend:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_BINARY_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PRIO_HIGH">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="PRIO_LOW">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="TOGGLE">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Startup THEN
	OUT := PreviousState;
END_IF

IF PRIO_HIGH THEN
	OUT:=TRUE;
ELSIF(PRIO_LOW AND NOT (PRIO_HIGH)) THEN
	OUT:= FALSE;
ELSIF MqttHighRequest THEN
	OUT:= TRUE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF MqttLowRequest THEN
	OUT:= FALSE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF(TOGGLE) THEN
	OUT:=NOT(OUT);
END_IF;

IF ((PreviousState &lt;&gt; OUT) OR Startup) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(OUT),
		Topic := MQTTPublishTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);	
	Startup:=FALSE;
END_IF	

PreviousState := OUT;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsSiren">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateSirenEntity(
			Name := name,
			Id := id,
			Meta := meta,
			CommandTopic := THIS^.MQTTSubscribeTopic,
			PayloadOn := BOOL_TO_STRING(NOT(Invert)),
			PayloadOff := BOOL_TO_STRING(Invert),
			StateTopic := THIS^.MQTTPublishTopic,
			StateOnPayload := BOOL_TO_STRING(NOT(Invert)),
			StateOffPayload := BOOL_TO_STRING(Invert)
		);


	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsLock">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateLockEntity(
		Name := name,
		Id := id,
		Meta := meta,
		CommandTopic := THIS^.MQTTSubscribeTopic,
		PayloadLock := BOOL_TO_STRING(NOT(Invert)),
		PayloadUnlock := BOOL_TO_STRING(Invert),
		StateTopic := THIS^.MQTTPublishTopic,
		StateUnlocked := BOOL_TO_STRING(Invert),
		StateLocked := BOOL_TO_STRING(NOT(Invert)));

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsLight">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateLightEntity(
			Name := name,
			Id := id,
			Meta := meta,
			CommandTopic := THIS^.MQTTSubscribeTopic,
			PayloadOn := BOOL_TO_STRING(NOT(Invert)),
			PayloadOff := BOOL_TO_STRING(Invert),
			StateTopic := THIS^.MQTTPublishTopic);

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsSwitch">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string length="100" />
                    </type>
                    <initialValue>
                      <simpleValue value="'outlet'" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateSwitchEntity(
			Name := name,
			Id := id,
			Meta := meta,
			CommandTopic := THIS^.MQTTSubscribeTopic,
			PayloadOn := BOOL_TO_STRING(NOT(Invert)),
			PayloadOff := BOOL_TO_STRING(Invert),
			StateTopic := THIS^.MQTTPublishTopic,
			StateOnPayload := BOOL_TO_STRING(NOT(Invert)),
			StateOffPayload := BOOL_TO_STRING(Invert),
			DeviceClass := DeviceClass);
	
	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	// Siren sends out a JSON
	ELSIF FIND(Data.PayloadString^, 'TRUE') &gt; 0 THEN
		MqttHighRequest := TRUE;
	ELSIF FIND(Data.PayloadString^, 'FALSE') &gt; 0 THEN
		MqttLowRequest := TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsValve">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string length="100" />
                    </type>
                    <initialValue>
                      <simpleValue value="'water'" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">water or gas</xhtml>
                    </documentation>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateValveEntity(
			Name := name,
			Id := id,
			Meta := meta,
			CommandTopic := THIS^.MQTTSubscribeTopic,
			PayloadOpen := BOOL_TO_STRING(NOT(Invert)),
			PayloadClosed := BOOL_TO_STRING(Invert),
			StateTopic := THIS^.MQTTPublishTopic,
			StateOpen := BOOL_TO_STRING(Invert),
			StateClosed := BOOL_TO_STRING(NOT(Invert)),
			Deviceclass := DeviceClass);

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_BISTABLE_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PRIO_HIGH">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="PRIO_LOW">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="TOGGLE">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="FEEDBACK">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="PreviousFeedback">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="HoldTimer">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
            <variable name="T_hold">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
            </variable>
            <variable name="PulseTrigger">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">HoldTimer(PT:= T_hold);

IF PRIO_HIGH THEN
	IF NOT FEEDBACK THEN
		PulseTrigger:=TRUE;
	END_IF
ELSIF(PRIO_LOW AND NOT (PRIO_HIGH)) THEN
	IF FEEDBACK THEN		
		PulseTrigger:=TRUE;
	END_IF
	OUT:= FALSE;
ELSIF MqttHighRequest THEN
	IF NOT FEEDBACK THEN		
		PulseTrigger:=TRUE;
	END_IF
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF MqttLowRequest THEN
	IF FEEDBACK THEN		
		PulseTrigger:=TRUE;
	END_IF
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF(TOGGLE) THEN	
	PulseTrigger:=TRUE;
END_IF;

IF ((PreviousFeedback &lt;&gt; FEEDBACK) OR Startup) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FEEDBACK),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);	
	Startup:=FALSE;
END_IF	

PreviousFeedback := FEEDBACK;
HoldTimer.IN	 := PulseTrigger;
OUT := HoldTimer.Q;

PulseTrigger:=FALSE;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsLight">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateLightEntity(
			Name := name,
			Id := id,
			Meta := meta,
			CommandTopic := THIS^.MQTTSubscribeTopic,
			PayloadOn := BOOL_TO_STRING(NOT(Invert)),
			PayloadOff := BOOL_TO_STRING(Invert),
			StateTopic := THIS^.MQTTPublishTopic);

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsLock">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateLockEntity(
		Name := name,
		Id := id,
		Meta := meta,
		CommandTopic := THIS^.MQTTSubscribeTopic,
		PayloadLock := BOOL_TO_STRING(NOT(Invert)),
		PayloadUnlock := BOOL_TO_STRING(Invert),
		StateTopic := THIS^.MQTTPublishTopic,
		StateUnlocked := BOOL_TO_STRING(Invert),
		StateLocked := BOOL_TO_STRING(NOT(Invert)));

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsSiren">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateSirenEntity(
			Name := name,
			Id := id,
			Meta := meta,
			CommandTopic := THIS^.MQTTSubscribeTopic,
			PayloadOn := BOOL_TO_STRING(NOT(Invert)),
			PayloadOff := BOOL_TO_STRING(Invert),
			StateTopic := THIS^.MQTTPublishTopic,
			StateOnPayload := BOOL_TO_STRING(NOT(Invert)),
			StateOffPayload := BOOL_TO_STRING(Invert)
		);

	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;



SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	// Siren sends out a JSON
	ELSIF FIND(Data.PayloadString^, 'TRUE') &gt; 0 THEN
		MqttHighRequest := TRUE;
	ELSIF FIND(Data.PayloadString^, 'FALSE') &gt; 0 THEN
		MqttLowRequest := TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_hold">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_hold:=T_hold;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscoveryAsSwitch">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string length="100" />
                    </type>
                    <initialValue>
                      <simpleValue value="'outlet'" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="Invert">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateSwitchEntity(
			Name := name,
			Id := id,
			Meta := meta,
			CommandTopic := THIS^.MQTTSubscribeTopic,
			PayloadOn := BOOL_TO_STRING(NOT(Invert)),
			PayloadOff := BOOL_TO_STRING(Invert),
			StateTopic := THIS^.MQTTPublishTopic,
			StateOnPayload := BOOL_TO_STRING(NOT(Invert)),
			StateOffPayload := BOOL_TO_STRING(Invert),
			DeviceClass := DeviceClass);
	
	initMqttDiscoveryDone := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_COVER_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="TOGGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_LOCK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T_LOCKOUT">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T_UD">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="MU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MD">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="lock">
              <type>
                <derived name="OSCAT_BASIC.INTERLOCK" />
              </type>
            </variable>
            <variable name="Cover_State_Timer">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
            <variable name="internalUp">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="internalDown">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttRequestStop">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttRequestOpen">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttRequestClose">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="internalDir">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">down = false, up = true</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Run the timer to not power the motors for to long *)
Cover_State_Timer(PT:=T_UD);
Cover_State_Timer.IN:=FALSE;

IF NOT(Cover_State_Timer.Q) AND internalUp THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'OPEN',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF

IF NOT(Cover_State_Timer.Q) AND internalDown THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'CLOSED',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF


(* Check what to do *)
IF NOT(Cover_State_Timer.Q) AND internalUp THEN // don't run the motors for to long, assume we've reached end and toggle dir
	internalUp := FALSE;
	internalDown := FALSE;
	internalDir := FALSE;
ELSIF NOT(Cover_State_Timer.Q) AND internalDown THEN // don't run the motors for to long, assume we've reached end and toggle dir
	internalUp := FALSE;
	internalDown := FALSE;
	internalDir := TRUE;
ELSIF PRIO_LOCK THEN	
	internalUp := FALSE;
	internalDown := FALSE;
ELSIF PRIO_UP THEN	
	internalUp := TRUE;
	internalDown := FALSE;
	Cover_State_Timer.IN:=TRUE;
ELSIF PRIO_DN THEN	
	internalUp := FALSE;
	internalDown := TRUE;
	Cover_State_Timer.IN:=TRUE;
ELSIF TOGGLE AND (internalUp OR internalDown) THEN	// stop and toggle dir
	internalUp := FALSE;
	internalDown := FALSE;
	internalDir := NOT(internalDir);
ELSIF TOGGLE AND NOT(internalDir) THEN //move down
	internalUp := FALSE;
	internalDown := TRUE;
	Cover_State_Timer.IN:=TRUE;
ELSIF TOGGLE AND internalDir THEN //move upwards
	internalUp := TRUE;
	internalDown := FALSE;	
	Cover_State_Timer.IN:=TRUE;
ELSIF MqttRequestStop THEN
	internalUp := FALSE;
	internalDown := FALSE;
	MqttRequestStop := FALSE;
ELSIF MqttRequestOpen THEN
	internalUp := TRUE;
	internalDown := FALSE;
	MqttRequestOpen := FALSE;
	Cover_State_Timer.IN:=TRUE;;
ELSIF MqttRequestClose THEN
	internalUp := FALSE;
	internalDown := TRUE;
	MqttRequestClose := FALSE;
	Cover_State_Timer.IN:=TRUE;
END_IF

(* make sure only one motor is active at a given time *)
lock(i1 := internalUp, I2 := InternalDown, TL := T_lockout);
MU := lock.Q1;
MD := lock.Q2;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="DeviceClass">
                    <type>
                      <string length="50" />
                    </type>
                    <initialValue>
                      <simpleValue value="'shutter'" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateCoverEntity(
		Name := name,
		Id := id,
		Meta := meta,
		CommandTopic := THIS^.MQTTSubscribeTopic,
		PayloadOpen := 'OPEN',
		PayloadClose := 'CLOSE',
		PayloadStop := 'STOP',
		StateTopic := THIS^.MQTTPublishTopic,
		StateOpen := 'OPEN',
		StateClosed := 'CLOSED',
		DeviceClass := DeviceClass
	);

	initMqttDiscoveryDone := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="T_LOCKOUT">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_UD">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_LOCKOUT:=T_LOCKOUT;
THIS^.T_UD:=T_UD;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('STOP')) THEN			
		THIS^.MqttRequestStop:=TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('OPEN')) THEN
		THIS^.MqttRequestOpen:=TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('CLOSE')) THEN
		THIS^.MqttRequestClose:=TRUE;
	END_IF

END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_DIMMER_DALI_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="BALLAST">
              <type>
                <derived name="typBallast" />
              </type>
            </variable>
            <variable name="TOGGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_HIGH">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="PRIO_LOW">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="STATUS_LED">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="DaliSendDimValue">
              <type>
                <derived name="FbDaliSendDimValue" />
              </type>
            </variable>
            <variable name="DaliSendFadeTime">
              <type>
                <derived name="FbDaliSendFadeTime" />
              </type>
            </variable>
            <variable name="DaliSendFadeRate">
              <type>
                <derived name="FbDaliSendFadeRate" />
              </type>
            </variable>
            <variable name="MqttSendBrightnessUpdate">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttSendOnUpdate">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttSendOffUpdate">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Toggle_RTrigger">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
            </variable>
            <variable name="DaliSyncSignalGenerator">
              <type>
                <derived name="Util.BLINK" />
              </type>
            </variable>
            <variable name="DimDirection">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="DimValue">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">DaliSendFadeTime(
	typBallast := BALLAST,
	bFadeTime := 2); // 1 sec
	
DaliSendFadeRate(
	typBallast := BALLAST,
	bFadeRate := 2); // 1 sec

DaliSendDimValue(
	typBallast := BALLAST,
	rDimValue := DimValue);

DaliSyncSignalGenerator(
	ENABLE := TRUE,
	TIMEHIGH := T#1S,
	TIMELOW := T#1M,
	OUT =&gt; DaliSendDimValue.xUpdate);

Toggle_RTrigger(CLK:=TOGGLE);

// Regular push
IF(Toggle_RTrigger.Q AND DimValue = 0) THEN
	SetDimValue(100);
ELSIF(Toggle_RTrigger.Q AND DimValue &gt; 0) THEN
	SetDimValue(0);
END_IF

// Long push
IF P_LONG THEN
	SetDimValue(DimValue + DimDirection);
END_IF

IF MqttSendBrightnessUpdate OR Startup AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(		
		Payload := REAL_TO_STRING(DimValue),
		Topic := CONCAT(THIS^.MQTTPublishTopic, '/BRIGHTNESS'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
	MqttSendBrightnessUpdate := FALSE;
END_IF

IF MqttSendOnUpdate OR (Startup AND DimValue &gt; 0) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(		
		Payload := 'ON',
		Topic := THIS^.MQTTPublishTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
	MqttSendOnUpdate := FALSE;
END_IF

IF MqttSendOffUpdate OR (Startup AND DimValue = 0) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'OFF',
		Topic := THIS^.MQTTPublishTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
	MqttSendOffUpdate := FALSE;
END_IF

Startup:=FALSE;
STATUS_LED := REAL_TO_BOOL(DimValue);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateLightDimmerEntity(
		Name := name,
		Id := Id,
		Meta := meta,
		CommandTopic := THIS^.MQTTSubscribeTopic,
		PayloadOn := 'ON',
		PayloadOff := 'OFF',
		StateTopic := THIS^.MQTTPublishTopic,
		BrightnessCommandTopic := CONCAT(THIS^.MQTTSubscribeTopic, '/BRIGHTNESS'),
		BrightnessStateTopic := CONCAT(THIS^.MQTTPublishTopic, '/BRIGHTNESS'),
		BrightnessScale := 100,
		OnCommandType := 'brightness');

	initMqttDiscoveryDone := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	
ELSIF MQTTSubscribeTopic =  Data.TopicOut^ THEN
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('ON')) THEN
		SetDimValue(100);
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('OFF')) THEN
		SetDimValue(0);
	END_IF
	
ELSIF CONCAT(MQTTSubscribeTopic, '/BRIGHTNESS') =  Data.TopicOut^ THEN
	IF OSCAT_BASIC.IS_CC(str:= Data.PayloadString^,cmp:='0123456789.') AND THIS^.PRIO_HIGH = FALSE THEN
		SetDimValue(STRING_TO_REAL(Data.PayloadString^));
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetDimValue">
              <interface>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                </inputVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Private="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.MqttSendBrightnessUpdate := TRUE;

IF THIS^.DimValue = 0 AND Value &gt; 0 THEN
	THIS^.MqttSendOnUpdate := TRUE;
END_IF

IF THIS^.DimValue &gt; 0 AND Value = 0 THEN
	THIS^.MqttSendOffUpdate := TRUE;
END_IF

IF Value = 0 THEN
	DimDirection := 1;
ELSIF Value = 100 THEN
	DimDirection := -1;
END_IF

THIS^.DimValue := Value;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="FadeTime">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="FadeRate">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">DaliSendFadeTime.bFadeTime := FadeTime;
DaliSendFadeRate.bFadeRate := FadeRate;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_DIMMER_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SINGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_HIGH">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="PRIO_LOW">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q_OUT">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="OUT">
              <type>
                <WORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="t3">
              <type>
                <derived name="OSCAT_BASIC.TON" />
              </type>
            </variable>
            <variable name="dim">
              <type>
                <derived name="OSCAT_BASIC._RMP_B" />
              </type>
            </variable>
            <variable name="dir">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OUT_Internal">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="LIN_TRAFO">
              <type>
                <derived name="Util.LIN_TRAFO" />
              </type>
            </variable>
            <variable name="enabled">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="OutputDimmer">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Qos_Dimm">
              <type>
                <derived name="MQTT.QoS" />
              </type>
            </variable>
            <variable name="Delta_Dimm">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="T_Debounce">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
            <variable name="T_Reconfig">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10s0ms" />
              </initialValue>
            </variable>
            <variable name="T_On_Max">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#0ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm_Start">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
            </variable>
            <variable name="Min_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
            </variable>
            <variable name="Max_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="200" />
              </initialValue>
            </variable>
            <variable name="Soft_Dimm">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="Rst_Out">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="OUT_LinearScaleMin">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="10000" />
              </initialValue>
            </variable>
            <variable name="OUT_LinearScaleMax">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="32767" />
              </initialValue>
            </variable>
            <variable name="DmxChannel">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> DMX specific </xhtml>
              </documentation>
            </variable>
            <variable name="DmxWidth">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="DmxUniverse">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pDmxValues">
              <type>
                <pointer>
                  <baseType>
                    <derived name="oscat_network.NETWORK_BUFFER_SHORT" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitDmxDone">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="OUT_Target">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="SoftDimToValue">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SoftDimToQFalse">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UpdateValueStep">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="OUT_Internal_tmp">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="curve">
              <type>
                <DINT />
              </type>
              <initialValue>
                <simpleValue value="DIMMER_CURVE.linear" />
              </initialValue>
            </variable>
            <variable name="wait">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Step">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="dimmedValue">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="waitTimeAtTop">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#200ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> one time before and after blink</xhtml>
              </documentation>
            </variable>
            <variable name="blinkValue">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
            </variable>
            <variable name="blinkEnabled">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousOUT">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
            <variable name="PreviousQ">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Startup THEN
	OUT := PreviousOUT;
	Q := PreviousQ;
END_IF

IF RST THEN
	IF rst_out THEN OUT_Internal := 0; END_IF;
	Q := FALSE;
	dir := OUT_Internal &gt; 127;
ELSIF PRIO_HIGH THEN
	Q := TRUE;
	OUT_Internal := 255;
ELSIF PRIO_LOW THEN
	Q := FALSE;
ELSIF MqttHighRequest THEN
	Q:= TRUE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF MqttLowRequest THEN
	Q:= FALSE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF set THEN
	OUT_Internal := val;
	Q := TRUE;
	(* set direction to up when value &lt; 127 otherwise set dir down dir is reversed because next action will reverse again *)
	dir := OUT_Internal &gt; 127;
ELSIF SINGLE THEN
	(* a single click reverses output Q *)
	Q := NOT Q;
	(* when dimmer is turned on we need to limit out to min and max limits *)
	IF Q THEN OUT_Internal := LIMIT(MAX(OUT_Internal,1), OUT_Internal, MAX_ON);	END_IF;
	(* set the appropriate direction of dimmer dir is reversed because next action will reverse again *)
	dir := OUT_Internal &gt; 127;
ELSIF LONG THEN
	IF NOT Q THEN
		IF SOFT_DIMM THEN
			OUT_Internal := 1;
			dir := TRUE;
		ELSE
			OUT_Internal := LIMIT(MAX(MIN_ON,1), OUT_Internal, MAX_ON);
			DIR := OUT_Internal &lt; 127;
		END_IF;
		Q := TRUE;
	ELSE
		(* reverse direction with every long click *)
		dir := NOT dir;
	END_IF;
END_IF;


(* while dimming is active ramp the output out up or down *)
dim(DIR := dir, e := P_LONG AND Q, TR := T_DIMM, rmp := OUT_Internal);

(* reverse direction when limits are reached *)
IF OUT_Internal = 0 THEN
	dir := TRUE;
ELSIF OUT_Internal = 255 THEN
	dir := FALSE;
END_IF;

(* limit the maximum runtime *)
IF t_ON_MAX &gt; t#0s THEN
	t3(in := q, pt := T_ON_MAX);
	Q := Q XOR t3.Q;
END_IF;

(* Scale the internal OUT to the actual OUT *)
LIN_TRAFO(
		IN:= OUT_Internal,
		IN_MIN:= 0,
		IN_MAX:= 255,
		OUT_MIN:=OUT_LinearScaleMin,
		OUT_MAX:=OUT_LinearScaleMax
	);
OUT:= REAL_TO_WORD(LIN_TRAFO.OUT);
IF Q THEN
	Q_OUT:= OUT;
ELSE
	Q_OUT:= 0;
END_IF

IF ((ABS(BYTE_TO_INT(PreviousOUT) - BYTE_TO_INT(OUT_Internal)) &gt;= Delta_Dimm) OR Startup AND OUT_Internal &lt;&gt; PreviousOUT OR Startup AND OutputDimmer) AND InitMqttDone THEN
	PreviousOUT:=OUT_Internal;
	pMqttPublishQueue^.AddMessage(		
		Payload := BYTE_TO_STRING(OUT_Internal),
		Topic := CONCAT(THIS^.MQTTPublishTopic,'/OUT'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF

IF (Q &lt;&gt; PreviousQ OR Startup) AND InitMqttDone THEN
	PreviousQ:=Q;
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(Q),
		Topic := CONCAT(THIS^.MQTTPublishTopic,'/Q'),
		Qos := Qos_Dimm,
		MqttRetain := TRUE
	);
END_IF

Startup:=FALSE;

(* DMX specific *)
IF InitDmxDone THEN 
	IF Q THEN
		IF pDmxValues^.BUFFER[DmxChannel-1] &lt;&gt; OUT_Internal THEN
			pDmxValues^.BUFFER[DmxChannel-1] := OUT_Internal;
		END_IF
	ELSE 
		IF pDmxValues^.BUFFER[DmxChannel-1] &lt;&gt; 0 THEN
			pDmxValues^.BUFFER[DmxChannel-1] := 0;
		END_IF
	END_IF
END_IF
IF SoftDimToValue AND OUT_Internal = OUT_Target THEN // If the same, softdim to value is done
	SoftDimToValue := FALSE;
	IF SoftDimToQFalse THEN
		SoftDimToQFalse := FALSE;
		OUT_Internal := OUT_Internal_tmp;
		PreviousOUT:=OUT_Internal;
	END_IF
END_IF
Startup:=FALSE;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="Device">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Name">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="id">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT initMqttDiscoveryDone THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		id := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		id := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF
	
	Device^.CreateLightDimmerEntity(
		Name := name,
		Id := Id,
		Meta := meta,
		CommandTopic := CONCAT(THIS^.MQTTSubscribeTopic,'/Q'),
		PayloadOn := 'TRUE',
		PayloadOff := 'FALSE',
		StateTopic := CONCAT(THIS^.MQTTPublishTopic,'/Q'),
		BrightnessCommandTopic := CONCAT(THIS^.MQTTSubscribeTopic,'/OUT'),
		BrightnessStateTopic := CONCAT(THIS^.MQTTPublishTopic,'/OUT'),
		BrightnessScale := 255,
		DmxChannel := THIS^.DmxChannel,
		DmxWidth := THIS^.DmxWidth,
		DmxUniverse := THIS^.DmxUniverse);

	initMqttDiscoveryDone := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initDMX">
              <interface>
                <inputVars>
                  <variable name="DmxChannel">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="DmxWidth">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="DmxUniverse">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="pDmxValues">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="oscat_network.NETWORK_BUFFER_SHORT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF NOT THIS^.InitDmxDone THEN
	THIS^.DmxChannel := DmxChannel;
	THIS^.pDmxValues := pDmxValues;
	THIS^.DmxWidth := DmxWidth;
	THIS^.InitDmxDone := TRUE;
	
	THIS^.InitDmxDone := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="OutputDimmer">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Dimmer specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Qos_Dimm">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="Delta_Dimm">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

// Dimmer specific
THIS^.OutputDimmer:=OutputDimmer;
THIS^.Qos_Dimm:=Qos_Dimm;
THIS^.Delta_Dimm:=Delta_Dimm;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_Debounce">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#10ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                  <variable name="T_Reconfig">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#10s0ms" />
                    </initialValue>
                  </variable>
                  <variable name="T_On_Max">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#0ms" />
                    </initialValue>
                  </variable>
                  <variable name="T_Dimm_Start">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#400ms" />
                    </initialValue>
                  </variable>
                  <variable name="T_Dimm">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#3s0ms" />
                    </initialValue>
                  </variable>
                  <variable name="Min_On">
                    <type>
                      <BYTE />
                    </type>
                    <initialValue>
                      <simpleValue value="50" />
                    </initialValue>
                  </variable>
                  <variable name="Max_On">
                    <type>
                      <BYTE />
                    </type>
                    <initialValue>
                      <simpleValue value="255" />
                    </initialValue>
                  </variable>
                  <variable name="Soft_Dimm">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="Rst_Out">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="OUT_LinearScaleMin">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="OUT_LinearScaleMax">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="32767" />
                    </initialValue>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_Debounce:=T_Debounce;
THIS^.T_Reconfig:=T_Reconfig;
THIS^.T_On_Max:=T_On_Max;
THIS^.T_Dimm_Start:=T_Dimm_Start;
THIS^.T_Dimm:=T_Dimm;
THIS^.Min_On:=Min_On;
THIS^.Max_On:=Max_On;
THIS^.Soft_Dimm:=Soft_Dimm;
THIS^.Rst_Out:=Rst_Out;
THIS^.OUT_LinearScaleMin:=OUT_LinearScaleMin;
THIS^.OUT_LinearScaleMax:=OUT_LinearScaleMax;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CONCAT(MQTTSubscribeTopic,'/Q') =  Data.TopicOut^ THEN
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	END_IF;
	
ELSIF CONCAT(MQTTSubscribeTopic,'/OUT') =  Data.TopicOut^ THEN
	IF OSCAT_BASIC.IS_CC(str:= Data.PayloadString^,cmp:='0123456789.') AND THIS^.PRIO_HIGH = FALSE THEN
		THIS^.OUT_Target:=STRING_TO_BYTE(Data.PayloadString^);
		THIS^.SoftDimToValue:=TRUE;
	END_IF
	
	
// Legacy! backwards compatiably with /+ topics instead of /#
ELSIF CommonTypesAndFunctions.StrEqualsAtStart(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	ELSIF OSCAT_BASIC.IS_CC(str:= Data.PayloadString^,cmp:='0123456789.') AND THIS^.PRIO_HIGH = FALSE THEN
		THIS^.OUT_Target:=STRING_TO_BYTE(Data.PayloadString^);
		THIS^.SoftDimToValue:=TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_PLC_MQTT_DISCOVERY_DEVICE" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MqttDiagnosticTopicIP">
              <type>
                <string />
              </type>
            </variable>
            <variable name="MqttRefreshIP">
              <type>
                <derived name="OSCAT_BASIC.GEN_PULSE" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_BASE_MQTT_DISCOVERY_DEVICE</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* allow the pulse generator to generate a pulse, used for refreshing IP address *)
MqttRefreshIP();

(* Refresh the IP address on every pulse *)
IF NOT(xInit) AND MqttRefreshIP.Q THEN		
	pMqttPublishQueue^.AddMessage(
		Payload:= GetIpAddress(),
		Topic := MqttDiagnosticTopicIP,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE,
	);
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initPlcDevice">
              <interface>
                <inputVars>
                  <variable name="url">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="availabilityTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="availabilityOnline">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="availabilityOffline">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="MqttDiscoveryPrefix">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="MqttDiagnosticTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="LocalUrl">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="iSplitLocation">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iecResult">
                    <type>
                      <derived name="SysTypes.RTS_IEC_RESULT" />
                    </type>
                  </variable>
                  <variable name="sAppName">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> must identic to the name in the device tree</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pApp">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="CmpApp.APPLICATION" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="stAppInfo">
                    <type>
                      <derived name="CmpApp.APPLICATION_INFO" />
                    </type>
                  </variable>
                  <variable name="pstAppInfo">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="CmpApp.APPLICATION_INFO" />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="ADR(stAppInfo)" />
                    </initialValue>
                  </variable>
                  <variable name="sIpAddr">
                    <type>
                      <string length="15" />
                    </type>
                  </variable>
                  <variable name="sMacAddr">
                    <type>
                      <string length="17" />
                    </type>
                  </variable>
                  <variable name="manufacturer">
                    <type>
                      <wstring />
                    </type>
                  </variable>
                  <variable name="manufacturerSize">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(manufacturer)" />
                    </initialValue>
                  </variable>
                  <variable name="model">
                    <type>
                      <wstring />
                    </type>
                  </variable>
                  <variable name="modelSize">
                    <type>
                      <DINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(model)" />
                    </initialValue>
                  </variable>
                  <variable name="sSerialNumber">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="psSerialNumber">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="ADR(sSerialNumber)" />
                    </initialValue>
                  </variable>
                  <variable name="diSerialNumber">
                    <type>
                      <DINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(sSerialNumber)" />
                    </initialValue>
                  </variable>
                  <variable name="CompilerVersion">
                    <type>
                      <derived name="Version" />
                    </type>
                  </variable>
                  <variable name="SCompilerVersion">
                    <type>
                      <string />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF xInit THEN
    xInit := FALSE;
	
	(* get the appname first *)
	sAppName := PRO_JSON.GPL_JSON.ApplicationName;
	
	(* IP address and MAC *)
	sIpAddr := GetIpAddress();
	sMacAddr := GetMac();

	(* manufacturer *)
	iecResult := SysTarget.SysTargetGetVendorName(pwszName := ADR(manufacturer), pnMaxLength := ADR(manufacturerSize));
	(* model *)
    iecResult := SysTarget.SysTargetGetDeviceName(pwszName := ADR(model), pnMaxLength := ADR(modelSize));
    (* serial number *)
    iecResult := SysTarget.SysTargetGetSerialNumber(ppsSerialNumber := ADR(psSerialNumber), pnMaxLen := ADR(diSerialNumber));

	(* device name *)	
    pApp := AppFindApplicationByName(pszString := sAppName, pResult := ADR(iecResult));   
    pstAppInfo := AppGetApplicationInfo(pApp := pApp, pResult := ADR(iecResult)); 		
	iSplitLocation := COL.Stu.StrFindA(
		pst1:= ADR(THIS^.InstanceName), 
		pst2:= ADR('.'), 
		uiSearchStart:= 1
	) - 1;	
	
	(* sw version *)
	CompilerVersion := __SYSTEM.Constants.CompilerVersion;
	SCompilerVersion := CONCAT(UINT_TO_STRING(CompilerVersion.uiMajor), '.');
	SCompilerVersion := CONCAT(SCompilerVersion, UINT_TO_STRING(CompilerVersion.uiMinor));
	SCompilerVersion := CONCAT(SCompilerVersion, '.');
	SCompilerVersion := CONCAT(SCompilerVersion, UINT_TO_STRING(CompilerVersion.uiServicePack));
	SCompilerVersion := CONCAT(SCompilerVersion, '.');
	SCompilerVersion := CONCAT(SCompilerVersion, UINT_TO_STRING(CompilerVersion.uiPatch));	
	
	(* url *)
	IF CommonTypesAndFunctions.StrEquals(ADR(url), ADR('')) THEN
		LocalUrl := CONCAT('https://', sIpAddr);
	ELSE
		LocalUrl := url;
	END_IF
	
	SUPER^.initBaseDevice(
		Name := LEFT(THIS^.InstanceName,iSplitLocation),
		ConfigurationUrl := LocalUrl,
		Identifiers := psSerialNumber^,
		Manufacturer := WSTRING_TO_STRING(manufacturer),
		Model := WSTRING_TO_STRING(model),
		SoftwareVersion := SCompilerVersion,
		HardwareVersion := DT_TO_STRING(pstAppInfo^.dtLastChanges),
		IpAddress := sIpAddr,
		MacAddress := sMacAddr,
		availabilityTopic := availabilityTopic,			
		availabilityOnline := availabilityOnline,
		availabilityOffline := availabilityOffline,
		MqttDiscoveryPrefix := MqttDiscoveryPrefix,
		MqttDiagnosticTopic := MqttDiagnosticTopic,
		pMqttPublishQueue := pMqttPublishQueue);
		
	// Serial number diagnostic
	CreateSensorEntityWithCategory(
		Name := 'Serial number',
		Id := CONCAT(THIS^.Name,'_diag_sn'),
		Meta := '',
		StateTopic := CONCAT(MqttDiagnosticTopic, '/SN'),
		StateValue := psSerialNumber^,
		EntityCategory := 'diagnostic');
		
	// Serial number diagnostic
	CreateSensorEntityWithCategory(
		Name := 'Serial number',
		Id := CONCAT(THIS^.Name,'_diag_sn'),
		Meta := '',
		StateTopic := CONCAT(MqttDiagnosticTopic, '/SN'),
		StateValue := psSerialNumber^,
		EntityCategory := 'diagnostic');
		
	// IP address diagnostic, initial publish. done cyclic as well
	THIS^.MqttDiagnosticTopicIP := CONCAT(MqttDiagnosticTopic, '/IP');	
	MqttRefreshIP(ENQ:=TRUE, PTH:=T#0S, PTL:=T#1M);
	CreateSensorEntityWithCategory(
		Name := 'IP',
		Id := CONCAT(THIS^.Name,'_diag_ip'),
		Meta := '',
		StateTopic := THIS^.MqttDiagnosticTopicIP,
		StateValue := sIpAddr,
		EntityCategory := 'diagnostic');
		
END_IF



</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetIpAddress">
              <interface>
                <returnType>
                  <string length="15" />
                </returnType>
                <localVars>
                  <variable name="AdapterInfo">
                    <type>
                      <derived name="SOCK_ADAPTER_INFORMATION" />
                    </type>
                  </variable>
                  <variable name="hAdapter">
                    <type>
                      <derived name="RTS_IEC_HANDLE" />
                    </type>
                  </variable>
                  <variable name="udiStructSize">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(AdapterInfo)" />
                    </initialValue>
                  </variable>
                  <variable name="rResult">
                    <type>
                      <derived name="RTS_IEC_RESULT" />
                    </type>
                  </variable>
                  <variable name="xFirstAdapter">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Private="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">xFirstAdapter := TRUE;
rResult := 0;
WHILE rResult = 0 DO   
	IF xFirstAdapter THEN
		hAdapter := SysSockGetFirstAdapterInfo(ADR(AdapterInfo), ADR(udiStructSize), ADR(rResult));
	ELSE   
		hAdapter := SysSockGetNextAdapterInfo(hAdapter, ADR(AdapterInfo), ADR(udiStructSize), ADR(rResult));
	END_IF
	IF rResult = 0 THEN
		GetIpAddress := Standard.CONCAT(BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b1),'.');
		GetIpAddress := Standard.CONCAT(GetIpAddress,BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b2));
		GetIpAddress := Standard.CONCAT(GetIpAddress,'.');
		GetIpAddress := Standard.CONCAT(GetIpAddress,BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b3));
		GetIpAddress := Standard.CONCAT(GetIpAddress,'.');
		GetIpAddress := Standard.CONCAT(GetIpAddress,BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b4));
	END_IF
	xFirstAdapter := FALSE;   
END_WHILE</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetMac">
              <interface>
                <returnType>
                  <string length="17" />
                </returnType>
                <localVars>
                  <variable name="AdapterInfo">
                    <type>
                      <derived name="SOCK_ADAPTER_INFORMATION" />
                    </type>
                  </variable>
                  <variable name="hAdapter">
                    <type>
                      <derived name="RTS_IEC_HANDLE" />
                    </type>
                  </variable>
                  <variable name="udiStructSize">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(AdapterInfo)" />
                    </initialValue>
                  </variable>
                  <variable name="rResult">
                    <type>
                      <derived name="RTS_IEC_RESULT" />
                    </type>
                  </variable>
                  <variable name="xFirstAdapter">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Private="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">xFirstAdapter := TRUE;
rResult := 0;
WHILE rResult = 0 DO   
	IF xFirstAdapter THEN
		hAdapter := SysSockGetFirstAdapterInfo(ADR(AdapterInfo), ADR(udiStructSize), ADR(rResult));
	ELSE   
		hAdapter := SysSockGetNextAdapterInfo(hAdapter, ADR(AdapterInfo), ADR(udiStructSize), ADR(rResult));
	END_IF
	IF rResult = 0 THEN
		GetMac := Standard.CONCAT(SM0.Byte_To_HexString(AdapterInfo.abyMac[0]),'-');
		GetMac := Standard.CONCAT(GetMac,SM0.Byte_To_HexString(AdapterInfo.abyMac[1]));
		GetMac := Standard.CONCAT(GetMac,'-');
		GetMac := Standard.CONCAT(GetMac,SM0.Byte_To_HexString(AdapterInfo.abyMac[2]));
		GetMac := Standard.CONCAT(GetMac,'-');
		GetMac := Standard.CONCAT(GetMac,SM0.Byte_To_HexString(AdapterInfo.abyMac[3]));
		GetMac := Standard.CONCAT(GetMac,'-');
		GetMac := Standard.CONCAT(GetMac,SM0.Byte_To_HexString(AdapterInfo.abyMac[4]));
		GetMac := Standard.CONCAT(GetMac,'-');
		GetMac := Standard.CONCAT(GetMac,SM0.Byte_To_HexString(AdapterInfo.abyMac[5]));
	END_IF
	xFirstAdapter := FALSE;   
END_WHILE</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_BUSCONTROLLER" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="BusOcupied">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Set this to True by default at startup to allow for some RS485 devices to boot up at power interuptions	</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="StartupDelay">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#5s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amount of time that should be waited on PLC startup to start using the RS485 bus</xhtml>
              </documentation>
            </variable>
            <variable name="SilenceTime">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#20ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> This is the silence time between two requests</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Used to detect startup</xhtml>
              </documentation>
            </variable>
            <variable name="tonDelay">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To manage silence time and startup delay</xhtml>
              </documentation>
            </variable>
            <variable name="devices">
              <type>
                <array>
                  <dimension lower="0" upper="31" />
                  <baseType>
                    <derived name="RS485Device" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">collection of devices on the bus</xhtml>
              </documentation>
            </variable>
            <variable name="devicesCount">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">total number of devices registred on the bus</xhtml>
              </documentation>
            </variable>
            <variable name="selectedDevice">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">index of the active device on the bus</xhtml>
              </documentation>
            </variable>
            <variable name="deviceActive">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="loopCounter">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ActiveRtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
            </variable>
            <variable name="BusTrigger">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="QueryReady">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
            </variable>
            <variable name="BusData">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="124" />
                      <baseType>
                        <WORD />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="BusError">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="exc">
              <type>
                <derived name="__SYSTEM.ExceptionCode" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Startup THEN
	tonDelay.PT := StartupDelay;
	tonDelay.IN := TRUE;
	Startup := FALSE;
END_IF

QueryReady(CLK := BusTrigger^);
BusOcupied := NOT(tonDelay.Q);
tonDelay();

// check if there's a device that requires bus time and if so, launch the query
IF busOcupied = FALSE AND deviceActive = FALSE AND devicesCount &lt;&gt; 0 AND NOT QueryReady.Q THEN
	FOR loopCounter := 0 TO devicesCount - 1 DO
		IF deviceActive = FALSE AND devices[loopCounter].RequestBusTime() THEN
			selectedDevice := loopCounter;
			THIS^.SetBusOccupied();
			ActiveRtuQuery := devices[selectedDevice].GetRtuQuery();
			BusTrigger^ := TRUE;
			EXIT;
		END_IF
	END_FOR;
END_IF

//watch the trigger, when completed call the FB with the data, release the bus
IF QueryReady.Q THEN
	devices[selectedDevice].ProcessDataArray(BusError, BusData);
	THIS^.ReleaseBus();
END_IF


//let the busdevices to their work
//FOR loopCounter := 0 TO devicesCount - 1 DO
//	devices[loopCounter]();
// END_FOR;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init">
              <interface>
                <inputVars>
                  <variable name="StartupDelay">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amount of time that should be waited on PLC startup to start using the RS485 bus, can prevent errors due to devices not booted up yet</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SilenceTime">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> This is the silence time between two requests</xhtml>
                    </documentation>
                  </variable>
                  <variable name="BusTrigger">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to the bool that controls triggering busrequests</xhtml>
                    </documentation>
                  </variable>
                  <variable name="BusData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="BusError">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.StartupDelay := StartupDelay;
THIS^.SilenceTime := SilenceTime;
THIS^.BusTrigger := BusTrigger;
THIS^.BusData := BusData;
THIS^.BusError := BusError;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetBusOccupied">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Private="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.tonDelay.IN := FALSE;
THIS^.deviceActive := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ReleaseBus">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Private="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// Start a timer to release the bus
THIS^.tonDelay.PT := THIS^.SilenceTime;
THIS^.tonDelay.IN := TRUE;
THIS^.deviceActive := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RegisterDevice">
              <interface>
                <inputVars>
                  <variable name="device">
                    <type>
                      <derived name="RS485Device" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF devicesCount &lt;&gt; 32 THEN
	devices[devicesCount] := device;
	devicesCount := devicesCount + 1;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_DUCO_DUCOBOX_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="ACTIVEPOWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="MQTTSubscribeTopic">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="isDataUpdated">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Nodes">
              <type>
                <array>
                  <dimension lower="2" upper="30" />
                  <baseType>
                    <derived name="FB_RS485_DUCO_DUCOBOX_NODE_MQTT" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="NodePointer">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="ActiveNode">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="loopCounter">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ReadMasterUnitQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="10" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="6" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="WriteQueryReady">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="WriteQueryBeingExecuted">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="WriteQuerySuffix">
              <type>
                <string />
              </type>
            </variable>
            <variable name="WriteQueryPayload">
              <type>
                <string />
              </type>
            </variable>
            <variable name="WriteQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="6" />
                  </value>
                  <value member="WriteQuantity">
                    <simpleValue value="1" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

FOR loopCounter := 2 TO 30 DO
	Nodes[loopCounter]();
END_FOR</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.Error := Error^;

IF Error^ AND NOT WriteQueryBeingExecuted THEN
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

IF WriteQueryBeingExecuted THEN
	WriteQueryReady := FALSE;
	WriteQueryBeingExecuted := FALSE;
	IF NOT Error^ THEN
		PubMqttMessage(Suffix := CONCAT('/', WriteQuerySuffix), Data := WriteQueryPayload);
	END_IF
// data for master unit (= main node)
ELSIF THIS^.ActiveNode = 1 THEN
	THIS^.timerData.IN := TRUE;
	THIS^.ActiveNode := 0;
	
	IF NOT Error^ THEN
 		PubMqttMessage(Suffix := '/1/read/0', Data := WORD_TO_STRING(Data^[0]));
 		PubMqttMessage(Suffix := '/1/read/1', Data := WORD_TO_STRING(Data^[1]));
 		PubMqttMessage(Suffix := '/1/read/2', Data := WORD_TO_STRING(Data^[2]));
 		PubMqttMessage(Suffix := '/1/read/3', Data := WORD_TO_STRING(Data^[3]));
 		PubMqttMessage(Suffix := '/1/read/4', Data := WORD_TO_STRING(Data^[4]));
 		PubMqttMessage(Suffix := '/1/read/5', Data := WORD_TO_STRING(Data^[5]));
	END_IF
// data for nodes
ELSIF THIS^.ActiveNode &gt; 1 THEN	
	THIS^.Nodes[ActiveNode].ProcessDataArray(
		Data := Data,
		Error := Error
	);
	THIS^.ActiveNode := 0;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData.PT := DataPollingInterval;
THIS^.ReadMasterUnitQuery.DeviceId := DeviceAddress;
THIS^.WriteQuery.DeviceId := DeviceAddress;
THIS^.timerData.IN := TRUE;

THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;
THIS^.MQTTSubscribeTopic := CONCAT(MQTTSubscribePrefix^ ,THIS^.MqttPublishTopicSuffix);

// register the FB agains the collector so mqtt events can be received
pMqttCallbackCollector^.put(instance:= THIS^);


FOR loopCounter := 2 TO 30 DO
		Nodes[loopCounter].InitMqtt(
			MQTTPublishPrefix := MQTTPublishPrefix,
			MqttPublishTopicSuffix := InstanceNamePt^,
			pMqttPublishQueue := pMqttPublishQueue
		);
END_FOR

InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done THEN	
	RequestBusTime := FALSE;
ELSIF WriteQueryReady THEN
	RequestBusTime := TRUE;	
ELSIF timerData.Q THEN // Master node
	RequestBusTime := TRUE;
	THIS^.ActiveNode := 1;
ELSIF NodePointer &gt; 2 THEN// other nodes, if configured
	FOR loopCounter := 2 TO 30 DO
		IF Nodes[loopCounter].RequestBusTime() AND RequestBusTime = FALSE THEN
			THIS^.ActiveNode := loopCounter;
			RequestBusTime := TRUE;	
		END_IF
	END_FOR
ELSE
	RequestBusTime := FALSE;
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF WriteQueryReady THEN
	GetRtuQuery := THIS^.WriteQuery;
	WriteQueryBeingExecuted := TRUE;
// master
ELSIF ActiveNode = 1 THEN
	THIS^.timerData.IN := FALSE;
	GetRtuQuery := THIS^.ReadMasterUnitQuery;
// other nodes
ELSIF ActiveNode &gt; 1 THEN
	GetRtuQuery := THIS^.Nodes[ActiveNode].GetRtuQuery();	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SubTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="NodeNumber">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="NodeRegister">
                    <type>
                      <string />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF MQTTSubscribeTopic = LEFT(Data.TopicOut^, LEN(MQTTSubscribeTopic)) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	// process the data
	SubTopic := RIGHT(Data.TopicOut^, 9); // 2/write/9 -&gt; 10 chars
	NodeNumber := LEFT(SubTopic, 1);
	NodeRegister := RIGHT(SubTopic, 1);
	
	IF FIND(SubTopic, 'write') &gt; 0 AND
		OSCAT_BASIC.IS_NUM(NodeNumber) AND
		OSCAT_BASIC.IS_NUM(NodeRegister) AND
		OSCAT_BASIC.IS_NUM(Data.PayloadString^) THEN
			WriteQuery.WriteAddress := (STRING_TO_UINT(NodeNumber) * 10) + STRING_TO_UINT(NodeRegister);
			WriteQuery.WriteData[0] := STRING_TO_WORD(Data.PayloadString^);
			WriteQuerySuffix := SubTopic;
			WriteQueryPayload := Data.PayloadString^;
			WriteQueryReady := TRUE;
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="AddNode">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.Nodes[NodePointer].InitNode(
	DeviceAddress := THIS^.ReadMasterUnitQuery.DeviceId,
	NodeNumber := NodePointer -1,
	DataPollingInterval := DataPollingInterval
);

NodePointer := NodePointer + 1;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_DUCO_DUCOBOX_NODE_MQTT" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="NodeNumber">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="51" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="NodeInitialized">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="RtuQueryRead">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="20" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="6" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData.Q THEN
	THIS^.timerData.IN := FALSE;
	GetRtuQuery := THIS^.RtuQueryRead;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData.IN := TRUE;

IF NOT Error^ THEN
	PubMqttMessage(Suffix := '/read/0', Data := WORD_TO_STRING(Data^[0]));
	PubMqttMessage(Suffix := '/read/1', Data := WORD_TO_STRING(Data^[1]));
	PubMqttMessage(Suffix := '/read/2', Data := WORD_TO_STRING(Data^[2]));
	PubMqttMessage(Suffix := '/read/3', Data := WORD_TO_STRING(Data^[3]));
	PubMqttMessage(Suffix := '/read/4', Data := WORD_TO_STRING(Data^[4]));
	PubMqttMessage(Suffix := '/read/5', Data := WORD_TO_STRING(Data^[5]));
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT NodeInitialized THEN	
	RequestBusTime := FALSE;
ELSIF timerData.Q THEN
	RequestBusTime := TRUE;
ELSE
	RequestBusTime := FALSE;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitNode">
              <interface>
                <inputVars>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="NodeNumber">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.RtuQueryRead.DeviceId := DeviceAddress;
THIS^.RtuQueryRead.ReadAddress := (NodeNumber * 10) + 10;

THIS^.timerData.PT := DataPollingInterval;
THIS^.NodeNumber := NodeNumber + 1;

THIS^.timerData.IN := TRUE;

THIS^.NodeInitialized := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttPublishTopicSuffix">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;
THIS^.MqttPublishTopicSuffix := MqttPublishTopicSuffix;
THIS^.pMqttPublishQueue := pMqttPublishQueue;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/'), UINT_TO_STRING(NodeNumber)), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_EASTRON_SDM_POWER_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="ACTIVEPOWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveDevice">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="isDataUpdated">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="DeviceType">
              <type>
                <derived name="RS485_EASTRON_SDM_Devices" />
              </type>
            </variable>
            <variable name="SDM120AndSDM220RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="12" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="2" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="SDM630RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="52" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="2" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

IF isDataUpdated THEN
	isDataUpdated := FALSE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(ACTIVEPOWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/ACTP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.Error := Error^;
THIS^.timerData.IN := TRUE;

IF Error^ THEN
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

IF NOT Error^ THEN
	THIS^.ACTIVEPOWER := SwapWordsToReal(Data^[0], Data^[1]);
	THIS^.isDataUpdated := TRUE;
END_IF

ActiveDevice := FALSE;



</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="DeviceType">
                    <type>
                      <derived name="RS485_EASTRON_SDM_Devices" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData.PT := DataPollingInterval;
THIS^.SDM120AndSDM220RtuQuery.DeviceId := DeviceAddress;
THIS^.SDM630RtuQuery.DeviceId := DeviceAddress;
THIS^.timerData.IN := TRUE;
THIS^.DeviceType := DeviceType;

THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done THEN	
	RequestBusTime := FALSE;	
ELSIF timerData.Q THEN
	RequestBusTime := TRUE;
ELSE
	RequestBusTime := FALSE;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData.Q THEN
	THIS^.timerData.IN := FALSE;
	IF DeviceType = RS485_EASTRON_SDM_Devices.SDM120 OR  DeviceType = RS485_EASTRON_SDM_Devices.SDM220 THEN
		GetRtuQuery := THIS^.SDM120AndSDM220RtuQuery;		
	END_IF
	IF DeviceType = RS485_EASTRON_SDM_Devices.SDM630 THEN
		GetRtuQuery := THIS^.SDM630RtuQuery;		
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_EASTRON_SDM220_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="VOLTAGE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="CURRENT">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="ACTIVEPOWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="APPARENT_POWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="REACTIVE_POWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="POWER_FACTOR">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="PHASE_ANGLE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="FREQUENCY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="IMPORT_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="EXPORT_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="IMPORT_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="EXPORT_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="TOTAL_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="TOTAL_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveDevice">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveRtuQuery">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="Data1RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="0" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="40" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData1">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Data2RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="70" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="10" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData2">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Data3RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="342" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="4" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData3">
              <type>
                <derived name="TON" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData1();
timerData2();
timerData3();

IF Update1 THEN
	Update1 := FALSE;
	DataAvailable1 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(VOLTAGE),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/VOLT' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(CURRENT),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/CURR' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);	
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(ACTIVEPOWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/ACTP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(APPARENT_POWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/APPP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(REACTIVE_POWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/REAP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(POWER_FACTOR),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/POWF' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(PHASE_ANGLE),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/PHAA' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF

IF Update2 THEN
	Update2 := FALSE;
	DataAvailable2 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(FREQUENCY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/FREQ' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(IMPORT_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/IMAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(EXPORT_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/EXAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(IMPORT_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/IMRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(EXPORT_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/EXRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF

IF Update3 THEN
	Update3 := FALSE;	
	DataAvailable3 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(TOTAL_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/TOTAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(TOTAL_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/TOTRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Error^ THEN
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

IF ActiveRtuQuery = 1 THEN
	THIS^.Error1 := Error^;
	THIS^.timerData1.IN := TRUE;
	IF NOT Error^ THEN
		THIS^.VOLTAGE := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.CURRENT := SwapWordsToReal(Data^[6], Data^[7]);
		THIS^.ACTIVEPOWER := SwapWordsToReal(Data^[12], Data^[13]);
		THIS^.APPARENT_POWER := SwapWordsToReal(Data^[18], Data^[19]);
		THIS^.REACTIVE_POWER := SwapWordsToReal(Data^[24], Data^[25]);
		THIS^.POWER_FACTOR := SwapWordsToReal(Data^[30], Data^[31]);
		THIS^.PHASE_ANGLE := SwapWordsToReal(Data^[36], Data^[37]);
		THIS^.Update1 := TRUE;
	END_IF
ELSIF ActiveRtuQuery = 2 THEN
	THIS^.Error2:= Error^;
	THIS^.timerData2.IN := TRUE;
	IF NOT Error^ THEN		
		THIS^.FREQUENCY := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.IMPORT_ACTIVE_ENERGY := SwapWordsToReal(Data^[2], Data^[3]);
		THIS^.EXPORT_ACTIVE_ENERGY := SwapWordsToReal(Data^[4], Data^[5]);
		THIS^.IMPORT_REACTIVE_ENERGY := SwapWordsToReal(Data^[6], Data^[7]);
		THIS^.EXPORT_REACTIVE_ENERGY := SwapWordsToReal(Data^[8], Data^[9]);
		THIS^.Update2 := TRUE;
	END_IF
ELSIF ActiveRtuQuery = 3 THEN
	THIS^.Error3 := Error^;
	THIS^.timerData3.IN := TRUE;
	IF NOT Error^ THEN
		THIS^.TOTAL_ACTIVE_ENERGY := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.TOTAL_REACTIVE_ENERGY := SwapWordsToReal(Data^[2], Data^[3]);
		THIS^.Update3 := TRUE;
	END_IF	
END_IF

ActiveRtuQuery := 0;
ActiveDevice := FALSE;



</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="Data1PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Data2PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Data3PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData1.PT := Data1PollingInterval;
THIS^.timerData2.PT := Data2PollingInterval;
THIS^.timerData3.PT := Data3PollingInterval;

THIS^.Data1RtuQuery.DeviceId := DeviceAddress;
THIS^.Data2RtuQuery.DeviceId := DeviceAddress;
THIS^.Data3RtuQuery.DeviceId := DeviceAddress;

THIS^.timerData1.IN := TRUE;
THIS^.timerData2.IN := TRUE;
THIS^.timerData3.IN := TRUE;

THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done THEN	
	RequestBusTime := FALSE;	
ELSIF timerData1.Q OR timerData2.Q OR timerData3.Q THEN
	RequestBusTime := TRUE;	
ELSE
	RequestBusTime := FALSE;		
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData1.Q THEN
	THIS^.timerData1.IN := FALSE;
	THIS^.ActiveRtuQuery := 1;
	GetRtuQuery := THIS^.Data1RtuQuery;
ELSIF timerData2.Q THEN
	THIS^.timerData2.IN := FALSE;
	THIS^.ActiveRtuQuery := 2;
	GetRtuQuery := THIS^.Data2RtuQuery;
ELSIF timerData3.Q THEN
	THIS^.timerData3.IN := FALSE;
	THIS^.ActiveRtuQuery := 3;
	GetRtuQuery := THIS^.Data3RtuQuery;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_ESERA_1WIRE_GATEWAY_MQTT" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="DeviceAddress">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="OwdDevices">
              <type>
                <array>
                  <dimension lower="1" upper="30" />
                  <baseType>
                    <derived name="FB_RS485_ESERA_OWD_MQTT" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ActiveDevice">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveOwd">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="loopCounter">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

FOR loopCounter := 1 TO 30 DO
	OwdDevices[loopCounter]();
END_FOR</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData.Q THEN
	THIS^.timerData.IN := FALSE;
	GetRtuQuery := THIS^.OwdDevices[ActiveOwd].GetRtuQuery();	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OwdDevices[ActiveOwd].ProcessDataArray(
	Data := Data,
	Error := Error
);
THIS^.ActiveOwd := 0;
THIS^.timerData.IN := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done OR NOT timerData.Q THEN	
	RequestBusTime := FALSE;
ELSE
	FOR loopCounter := 1 TO 30 DO
		IF OwdDevices[loopCounter].RequestBusTime() AND RequestBusTime = FALSE THEN
			THIS^.ActiveOwd := loopCounter;
			RequestBusTime := TRUE;			
		END_IF
	END_FOR
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DeviceAddress := DeviceAddress;
THIS^.timerData.PT := T#250MS;
THIS^.timerData.IN := TRUE;
THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;

FOR loopCounter := 1 TO 30 DO
		OwdDevices[loopCounter].InitMqtt(
			MQTTPublishPrefix := MQTTPublishPrefix,
			MqttPublishTopicSuffix := InstanceNamePt^,
			pMqttPublishQueue := pMqttPublishQueue
		);
END_FOR</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="EnableOwd">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="OwdNumber">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OwdDevices[OwdNumber].InitOwd(
	DeviceAddress := THIS^.DeviceAddress,
	OwdNumber := OwdNumber,
	DataPollingInterval := DataPollingInterval
);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_ESERA_OWD_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="OWD_VOLTAGE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="TEMPERATURE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="HUMIDITY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DEW_POINT">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="AIR_QUALITY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="BRIGHTNESS">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="OwdNumber">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitOwdDone">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="3" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="100" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="17" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitOwd">
              <interface>
                <inputVars>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="OwdNumber">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.RtuQuery.DeviceId := DeviceAddress;
THIS^.RtuQuery.ReadAddress := OwdNumber * 100;
THIS^.timerData.PT := DataPollingInterval;
THIS^.OwdNumber := OwdNumber;

THIS^.timerData.IN := TRUE;

THIS^.InitOwdDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttPublishTopicSuffix">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;
THIS^.MqttPublishTopicSuffix := MqttPublishTopicSuffix;
THIS^.pMqttPublishQueue := pMqttPublishQueue;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/OWD/'), UINT_TO_STRING(OwdNumber)), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessTemperature">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.TEMPERATURE := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/TEMP', Data := REAL_TO_STRING(TEMPERATURE));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessOwdVoltage">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OWD_VOLTAGE := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/OWDV', Data := REAL_TO_STRING(OWD_VOLTAGE));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessHumidity">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.HUMIDITY := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/HUM', Data := REAL_TO_STRING(HUMIDITY));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDewPoint">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DEW_POINT := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/DEWP', Data := REAL_TO_STRING(DEW_POINT));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessAirQuality">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.AIR_QUALITY := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/AIRQ', Data := REAL_TO_STRING(AIR_QUALITY));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData.Q THEN
	THIS^.timerData.IN := FALSE;
	GetRtuQuery := THIS^.RtuQuery;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData.IN := TRUE;

IF WORD_TO_INT(Data^[12]) &lt;&gt; 0 OR Error^ THEN
	THIS^.Error := TRUE;
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE 	
	THIS^.Error := FALSE;
	THIS^.DataAvailable := TRUE;
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

// Data handling
IF NOT Error^ AND WORD_TO_INT(Data^[12]) = 0 THEN
	IF Data^[16] = 11151 OR Data^[16] = 11152 THEN // Temperature, humidity &amp; air quality
		ProcessTemperature(Data^[0]);		
		ProcessOwdVoltage(Data^[2]);
		ProcessHumidity(Data^[4]);
		ProcessDewPoint(Data^[6]);
		ProcessAirQuality(Data^[8]);
	ELSIF Data^[16] = 11102 OR Data^[16] = 11113 OR Data^[16] = 11120 OR Data^[16] = 11148 OR Data^[16] = 11150 OR Data^[16] = 11160 THEN // Temperature, humidity
		ProcessTemperature(Data^[0]);		
		ProcessOwdVoltage(Data^[2]);
		ProcessHumidity(Data^[4]);
		ProcessDewPoint(Data^[6]);
	ELSIF Data^[16] = 11121 OR Data^[16] = 11132 OR Data^[16] = 11134 OR Data^[16] = 11135 THEN // Temperature, humidity, brightness
		ProcessTemperature(Data^[0]);		
		ProcessOwdVoltage(Data^[2]);
		ProcessHumidity(Data^[4]);
		ProcessDewPoint(Data^[6]);
		ProcessBrigthness(Data^[8]);
	ELSIF Data^[16] = 1820  THEN // Temperature DS18B20
        ProcessTemperature(Data^[0]);
	END_IF		
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitOwdDone THEN	
	RequestBusTime := FALSE;	
ELSIF timerData.Q THEN
	RequestBusTime := TRUE;
ELSE
	RequestBusTime := FALSE;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessBrigthness">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.BRIGHTNESS := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/BNESS', Data := REAL_TO_STRING(BRIGHTNESS));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_BOOL_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(IN),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(OUT),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		THIS^.OUT := TRUE;
		MqttMessageReceived := TRUE;
	END_IF
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		THIS^.OUT := FALSE;
		MqttMessageReceived := TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_INT_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := INT_TO_STRING(IN),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := INT_TO_STRING(OUT),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	IF OSCAT_BASIC.IS_NUM(str:= Data.PayloadString^) THEN
		THIS^.OUT := STRING_TO_INT(Data.PayloadString^);	
		MqttMessageReceived := TRUE;	
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_REAL_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := REAL_TO_STRING(IN),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := REAL_TO_STRING(OUT),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	THIS^.OUT := STRING_TO_REAL(Data.PayloadString^);	
	MqttMessageReceived := TRUE;	
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_STRING_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <string />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <string />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <string />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := IN,
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := OUT,
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	THIS^.OUT := Data.PayloadString^;	
	MqttMessageReceived := TRUE;
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="SwapWordsToReal" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="wHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wLo">
              <type>
                <WORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="dwVar">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="pt_REAL">
              <type>
                <pointer>
                  <baseType>
                    <REAL />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">dwVar := SHL(WORD_TO_DWORD(wHi),16) OR WORD_TO_DWORD(wLo);
pt_REAL := ADR(dwVar);
SwapWordsToReal := pt_REAL^;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
      <Interface name="RS485Device">
        <Methods>
          <Method name="ProcessDataArray">
            <interface>
              <inputVars>
                <variable name="Error">
                  <type>
                    <pointer>
                      <baseType>
                        <BOOL />
                      </baseType>
                    </pointer>
                  </type>
                </variable>
                <variable name="Data">
                  <type>
                    <pointer>
                      <baseType>
                        <array>
                          <dimension lower="0" upper="124" />
                          <baseType>
                            <WORD />
                          </baseType>
                        </array>
                      </baseType>
                    </pointer>
                  </type>
                </variable>
              </inputVars>
            </interface>
            <addData />
          </Method>
          <Method name="GetRtuQuery">
            <interface>
              <returnType>
                <derived name="RS485_RtuQuery" />
              </returnType>
            </interface>
            <addData />
          </Method>
          <Method name="RequestBusTime">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
            </interface>
            <addData />
          </Method>
        </Methods>
        <addData />
      </Interface>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/application" handleUnknown="implementation">
      <resource name="HomeAutomation">
        <task name="MainTask" interval="PT0.05S" priority="4">
          <pouInstance name="PLC_PRG_MAIN" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Cyclic" Interval="50" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <task name="MqttCommunication" priority="5">
          <pouInstance name="PLC_PRG_MQTT" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <pouInstance name="DMX_SEND" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Freewheeling" Interval="t#20ms" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <task name="RS485" interval="PT0.2S" priority="15">
          <pouInstance name="PLC_PRG_RS485" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Cyclic" Interval="200" IntervalUnit="ms" ExternalEvent="LocalBusCycleEvent" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <task name="Ping" interval="PT10S" priority="4">
          <pouInstance name="PRG_PING_DMX" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Cyclic" Interval="10000" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <globalVars name="MqttVariables">
          <variable name="clientID">
            <type>
              <string />
            </type>
            <initialValue>
              <simpleValue value="'PLC-House'" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Broker setup </xhtml>
            </documentation>
          </variable>
          <variable name="broker">
            <type>
              <string />
            </type>
            <initialValue>
              <simpleValue value="'192.168.1.52:1883'" />
            </initialValue>
          </variable>
          <variable name="fbMqttPublishQueue">
            <type>
              <derived name="FB_MqttPublishQueue" />
            </type>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> use the below for username password authentication to broker 
 broker					:STRING:='user:password@192.168.1.36:1883'; 
 Shared Variables for MQTT publish communication </xhtml>
            </documentation>
          </variable>
          <variable name="collector_FB_OUTPUT_SWITCH_MQTT">
            <type>
              <derived name="MQTT.CallbackCollector" />
            </type>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shared Variables for MQTT subscribe communication </xhtml>
            </documentation>
          </variable>
          <variable name="collector_FB_OUTPUT_COVER_MQTT">
            <type>
              <derived name="MQTT.CallbackCollector" />
            </type>
          </variable>
          <variable name="collector_FB_VIRTUAL_MQTT">
            <type>
              <derived name="MQTT.CallbackCollector" />
            </type>
          </variable>
          <variable name="collector_FB_DIMMER_MQTT">
            <type>
              <derived name="MQTT.CallbackCollector" />
            </type>
          </variable>
          <variable name="collector_FB_MQTT_LOG">
            <type>
              <derived name="MQTT.CallbackCollector" />
            </type>
          </variable>
          <variable name="collector_FB_RS485_MQTT">
            <type>
              <derived name="MQTT.CallbackCollector" />
            </type>
          </variable>
          <variable name="MQTT_QOS_EXACTLY_ONCE">
            <type>
              <derived name="MQTT.QoS" />
            </type>
            <initialValue>
              <simpleValue value="MQTT.QoS.ExactlyOnce" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> QOS Constants </xhtml>
            </documentation>
          </variable>
          <variable name="PLC_Device">
            <type>
              <derived name="FB_PLC_MQTT_DISCOVERY_DEVICE" />
            </type>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> HOME ASSISTANT DISCOVERY VIA MQTT</xhtml>
            </documentation>
          </variable>
          <variable name="MqttMain">
            <type>
              <string length="16" />
            </type>
            <initialValue>
              <simpleValue value="'Devices/'" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Topics </xhtml>
            </documentation>
          </variable>
          <variable name="MqttType">
            <type>
              <string length="16" />
            </type>
            <initialValue>
              <simpleValue value="'PLC/'" />
            </initialValue>
          </variable>
          <variable name="MqttDevice">
            <type>
              <string length="16" />
            </type>
            <initialValue>
              <simpleValue value="'House/'" />
            </initialValue>
          </variable>
          <variable name="MqttBaseTopic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(CONCAT(MqttMain, MqttType), MqttDevice)" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> e.g. Devices/PLC/House</xhtml>
            </documentation>
          </variable>
          <variable name="MqttDiagnosticTopic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'diagnostic')" />
            </initialValue>
          </variable>
          <variable name="MqttAvailabilityTopic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'availability')" />
            </initialValue>
          </variable>
          <variable name="MqttAvailabilityOnlinePayload">
            <type>
              <string length="20" />
            </type>
            <initialValue>
              <simpleValue value="'online'" />
            </initialValue>
          </variable>
          <variable name="MqttAvailabilityOfflinePayload">
            <type>
              <string length="20" />
            </type>
            <initialValue>
              <simpleValue value="'offline'" />
            </initialValue>
          </variable>
          <variable name="MQTTAvailabilityHartbeatTime">
            <type>
              <TIME />
            </type>
            <initialValue>
              <simpleValue value="TIME#5s0ms" />
            </initialValue>
          </variable>
          <variable name="MqttHADiscoveryPrefix">
            <type>
              <string length="16" />
            </type>
            <initialValue>
              <simpleValue value="'homeassistant/'" />
            </initialValue>
          </variable>
          <variable name="MqttPushbuttonPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'Out/DigitalInputs/Pushbuttons/')" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> FB Topics </xhtml>
            </documentation>
          </variable>
          <variable name="MqttPubSwitchPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'Out/DigitalOutputs/')" />
            </initialValue>
          </variable>
          <variable name="MqttSubSwitchPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'In/DigitalOutputs/')" />
            </initialValue>
          </variable>
          <variable name="MqttPubCoverPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'Out/Covers/')" />
            </initialValue>
          </variable>
          <variable name="MqttSubCoverPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'In/Covers/')" />
            </initialValue>
          </variable>
          <variable name="MqttPubDimmerPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'Out/Dimmers/')" />
            </initialValue>
          </variable>
          <variable name="MqttSubDimmerPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'In/Dimmers/')" />
            </initialValue>
          </variable>
          <variable name="MqttPubVirtualPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'Out/Virtuals/')" />
            </initialValue>
          </variable>
          <variable name="MqttSubVirtualPrefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'In/Virtuals/')" />
            </initialValue>
          </variable>
          <variable name="MqttPubRS485Prefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'Out/RS485/')" />
            </initialValue>
          </variable>
          <variable name="MqttSubRS485Prefix">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttBaseTopic, 'In/RS485/')" />
            </initialValue>
          </variable>
          <variable name="MqttSubSwitchTopic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttSubSwitchPrefix, '+')" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wildcard subscriptions </xhtml>
            </documentation>
          </variable>
          <variable name="MqttSubCoverTopic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttSubCoverPrefix, '+')" />
            </initialValue>
          </variable>
          <variable name="MqttSubVirtualTopic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttSubVirtualPrefix, '+')" />
            </initialValue>
          </variable>
          <variable name="MqttSubDimmerTopic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttSubDimmerPrefix, '#')" />
            </initialValue>
          </variable>
          <variable name="MqttSubRS485Topic">
            <type>
              <string length="100" />
            </type>
            <initialValue>
              <simpleValue value="CONCAT(MqttSubRS485Prefix, '#')" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="qualified_only" Value="" />
              </Attributes>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PersistentVars">
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="qualified_only" Value="" />
                <Attribute Name="checksumnoinit_override" Value="909082025" />
                <Attribute Name="init_related_code" Value="e2545669-e23e-45fa-90bb-dcdbc35c83a4" />
              </Attributes>
            </data>
          </addData>
        </globalVars>
        <globalVars name="DMXVariables">
          <variable name="IP">
            <type>
              <string />
            </type>
            <initialValue>
              <simpleValue value="'10.1.1.4'" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> unicast: 10.1.1.4
 multicast: 10.1.1.255  
 broadcast: 255.255.255.255  </xhtml>
            </documentation>
          </variable>
          <variable name="DMX">
            <type>
              <derived name="oscat_network.NETWORK_BUFFER_SHORT" />
            </type>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="qualified_only" Value="" />
              </Attributes>
            </data>
          </addData>
        </globalVars>
        <globalVars name="DALIVariables">
          <variable name="M1_Light1">
            <type>
              <derived name="typBallast" />
            </type>
            <initialValue>
              <structValue>
                <value member="bAddress">
                  <simpleValue value="0" />
                </value>
                <value member="xIsGroup">
                  <simpleValue value="FALSE" />
                </value>
                <value member="bPortDALI">
                  <simpleValue value="1" />
                </value>
              </structValue>
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="qualified_only" Value="" />
              </Attributes>
            </data>
          </addData>
        </globalVars>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="PLC_PRG_MAIN" pouType="program">
              <interface>
                <localVars>
                  <variable name="FB_DI_PB_001">
                    <type>
                      <derived name="FB_INPUT_PUSHBUTTON_MQTT" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> INPUT FUNCTION BLOCKS </xhtml>
                    </documentation>
                  </variable>
                  <variable name="FB_DI_PB_002">
                    <type>
                      <derived name="FB_INPUT_PUSHBUTTON_DIMMER_MQTT" />
                    </type>
                  </variable>
                  <variable name="FB_DO_BIN_001">
                    <type>
                      <derived name="FB_OUTPUT_BINARY_MQTT" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> OUTPUT FUNCTION BLOCKS </xhtml>
                    </documentation>
                  </variable>
                  <variable name="FB_DO_BISTABLE_001">
                    <type>
                      <derived name="FB_OUTPUT_BISTABLE_MQTT" />
                    </type>
                  </variable>
                  <variable name="FB_DO_COVER_001">
                    <type>
                      <derived name="FB_OUTPUT_COVER_MQTT" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> COVER FUNCTION BLOCKS </xhtml>
                    </documentation>
                  </variable>
                  <variable name="FB_AO_DIMMER_001">
                    <type>
                      <derived name="FB_OUTPUT_DIMMER_MQTT" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> DIMMER FUNCTION BLOCKS </xhtml>
                    </documentation>
                  </variable>
                  <variable name="TestOUT">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                  <variable name="FB_VIRTUAL_INT_001">
                    <type>
                      <derived name="FB_VIRTUAL_INT_MQTT" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> VIRTUAL FUNCTION BLOCKS </xhtml>
                    </documentation>
                  </variable>
                  <variable name="FB_VIRTUAL_BOOL_001">
                    <type>
                      <derived name="FB_VIRTUAL_BOOL_MQTT" />
                    </type>
                  </variable>
                  <variable name="FB_VIRTUAL_STRING_001">
                    <type>
                      <derived name="FB_VIRTUAL_STRING_MQTT" />
                    </type>
                  </variable>
                  <variable name="FB_VIRTUAL_REAL_001">
                    <type>
                      <derived name="FB_VIRTUAL_REAL_MQTT" />
                    </type>
                  </variable>
                  <variable name="M1_DALIMASTER">
                    <type>
                      <derived name="FbDaliMaster" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> DALI FUNCTION BLOCKS </xhtml>
                    </documentation>
                  </variable>
                  <variable name="FB_DALI_1_ADR0">
                    <type>
                      <derived name="FB_OUTPUT_DIMMER_DALI_MQTT" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <actions>
                <action name="READ_PUSHBUTTONS">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DI_PB_001(PB:= DI_001); (* Provide the input FB the correct phyical input to validate each cyclus *)
FB_DI_PB_002(PB:= DI_002);</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="WRITE_SWITCHES">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DO_BIN_001(OUT	=&gt;		DO_001,										(* couple the function block to the physical output *)
	PRIO_HIGH				:=FALSE,  									(* brings the output high regardless of other input values *)
	PRIO_LOW				:=FALSE, 									(* brings the output low regardless of other input values. NOTE: PRIO_HIGH overrules PRIO_LOW input *)
	TOGGLE					:=FB_DI_PB_001.SINGLE 						(* for toggling the output *)	
);

FB_AO_DIMMER_001(
	SINGLE:=FB_DI_PB_001.SINGLE,
	LONG:=FB_DI_PB_001.LONG, 
	P_LONG:=FB_DI_PB_001.P_LONG, 
	Q_OUT =&gt; TestOUT,
	SET:=  FB_DI_PB_001.DOUBLE,
	VAL:=125
);

FB_DO_BISTABLE_001();</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="MAIN_INIT">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">(* MQTT Discovery device*)
MqttVariables.PLC_Device.initPlcDevice(
	MqttDiscoveryPrefix := MqttVariables.MqttHADiscoveryPrefix,
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),
	availabilityTopic := MqttVariables.MqttAvailabilityTopic,
	availabilityOnline := MqttVariables.MqttAvailabilityOnlinePayload,
	availabilityOffline := MqttVariables.MqttAvailabilityOfflinePayload,
	MqttDiagnosticTopic := MqttVariables.MqttDiagnosticTopic
);


(* INIT DIGITAL INPUT STUFF *)
FB_DI_PB_001.InitMqtt(
	MQTTPublishPrefix:= ADR(MqttVariables.MqttPushbuttonPrefix),	(* pointer to string prefix for the mqtt publish topic *)
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue)		(* pointer to MqttPublishQueue to send a new Mqtt event *)
);

FB_DI_PB_001.InitMqttDiscovery(
	name := 'Button number 001',						(* The name show in Home Assistant frond-end*)
	Device := ADR(MqttVariables.PLC_Device),							(* The device show in Home Assistant *)
);

FB_DI_PB_002.InitMqtt(
	MQTTPublishPrefix:= ADR(MqttVariables.MqttPushbuttonPrefix),	
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),
    TRUE,                                                               (* specify whether dimmer value should be outputted on MQTT topic *)
    MQTT.QoS.ExactlyOnce,                                            (* specify the QoS for the dimmer mqtt events (values 0-255) *)    
    5                                                                   (* specify the resolution for the dimmer mqtt events *)    
);


(* ALTER THE DIMMER OUTPUT DEFAULT BEHAVIOR *)
FB_AO_DIMMER_001.ConfigureFunctionBlock(
	T_Debounce:=T#10MS,
	T_Reconfig:=T#10S,
	T_On_Max:=T#0S,
	T_Dimm_Start:=T#400MS,
	T_Dimm:=T#3S,
	Min_On:=50,
	Max_On:=255,
	Soft_Dimm:=TRUE,
	Rst_Out:=FALSE,
	OUT_LinearScaleMin:=11000,
	OUT_LinearScaleMax:=32767
);

(* INIT DMX / ART-NET OUTPUT, OPTIONAL*)
FB_AO_DIMMER_001.InitDmx(
	DmxChannel := 1,							(* The channel *)
	DmxWidth:=1, 								(* Width of DMX channel, 1 or 2, aka 8 or 16 bit *)
	pDmxValues := ADR(DMXVariables.DMX.BUFFER), (* pointer to network buffer *)
	DmxUniverse:=1								(* Universe, but the buffer desides, this is only meta data that ends up in MQTT*)
);

(* INIT HOME ASSISTANT DISCOVERTY*)
FB_AO_DIMMER_001.InitMqttDiscovery(
	name := '001. Office strip cold',					(* The name show in Home Assistant frond-end*)
	Device := ADR(MqttVariables.PLC_Device),							(* The device show in Home Assistant *)
);


(* INIT DIGITAL OUTPUT STUFF *)
FB_DO_BISTABLE_001.InitMqtt(
	MQTTPublishPrefix:= ADR(MqttVariables.MqttPubSwitchPrefix),					(* pointer to string prefix for the mqtt publish topic *)
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubSwitchPrefix),				(* pointer to string prefix for the mqtt subscribe topic *)
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),					(* pointer to MqttPublishQueue to send a new Mqtt event *)
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_OUTPUT_SWITCH_MQTT)(* pointer to CallbackCollector to receive Mqtt subscription events *)
);

FB_DO_BISTABLE_001.InitMqttDiscoveryAsLight(
	name := 'light number 1',						(* The name show in Home Assistant frond-end*)
	Device := ADR(MqttVariables.PLC_Device),							(* The device show in Home Assistant *)
);

FB_DO_BIN_001.InitMqtt(
	MQTTPublishPrefix:= ADR(MqttVariables.MqttPubSwitchPrefix),					(* pointer to string prefix for the mqtt publish topic *)
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubSwitchPrefix),				(* pointer to string prefix for the mqtt subscribe topic *)
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),					(* pointer to MqttPublishQueue to send a new Mqtt event *)
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_OUTPUT_SWITCH_MQTT)(* pointer to CallbackCollector to receive Mqtt subscription events *)
);

FB_DO_BIN_001.InitMqttDiscoveryAsLight(
	name := 'light number 2',						(* The name show in Home Assistant frond-end*)
	Device := ADR(MqttVariables.PLC_Device),							(* The device show in Home Assistant *)
);

(* INIT COVERS STUFF *)
FB_DO_COVER_001.InitMqtt(MQTTPublishPrefix:= ADR(MqttVariables.MqttPubCoverPrefix),	(* pointer to string prefix for the mqtt publish topic *)
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubCoverPrefix),					(* pointer to string prefix for the mqtt subscribe topic *)
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),						(* pointer to MqttPublishQueue to send a new Mqtt event *)
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_OUTPUT_COVER_MQTT)  	(* pointer to CallbackCollector to receive Mqtt subscription events *)
);

FB_DO_COVER_001.initmqttdiscovery(								(*see dimmer for full example *)
	name := 'cover number 001',									(* the name show in home assistant frond-end*)
	device := ADR(MqttVariables.PLC_Device),										(* the device show in home assistant *)
);

FB_DO_COVER_001.ConfigureFunctionBlock(
	T_LOCKOUT:=T#1S,											(* delay between change of direction *)
	T_UD:=T#20S													(* run time to move the cover completely up/down *)
);


(* INIT VIRTUAL STUFF *)
FB_VIRTUAL_STRING_001.InitMqtt(MQTTPublishPrefix:= ADR(MqttVariables.MqttPubVirtualPrefix),				
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubVirtualPrefix),									
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),						
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_VIRTUAL_MQTT),
	MqttQos:=MQTT.QoS.ExactlyOnce, 
	MqttRetain:=FALSE									
);
FB_VIRTUAL_STRING_001.ConfigureFunctionBlockAsVirtualInput(DefaultValue:='HelloWorld',SetDefaultValueStartup:=TRUE,PublishAtStartup:=TRUE,UsePersistentAtStartup:=FALSE,ConfirmReceival:=TRUE);


FB_VIRTUAL_INT_001.InitMqtt(MQTTPublishPrefix:= ADR(MqttVariables.MqttPubVirtualPrefix),				
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubVirtualPrefix),									
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),						
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_VIRTUAL_MQTT),
	MqttQos:=MQTT.QoS.ExactlyOnce, 
	MqttRetain:=FALSE												
);
FB_VIRTUAL_INT_001.ConfigureFunctionBlockAsVirtualInput(DefaultValue:=0,SetDefaultValueStartup:=TRUE,PublishAtStartup:=TRUE,UsePersistentAtStartup:=FALSE,ConfirmReceival:=TRUE);
(* FB_VIRTUAL_INT_001.ConfigureFunctionBlockAsVirtualOutput(PublishAtStartup:=TRUE); *)


FB_VIRTUAL_BOOL_001.InitMqtt(MQTTPublishPrefix:= ADR(MqttVariables.MqttPubVirtualPrefix),				
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubVirtualPrefix),									
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),						
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_VIRTUAL_MQTT),
	MqttQos:=MQTT.QoS.ExactlyOnce, 
	MqttRetain:=FALSE											
);
(* FB_VIRTUAL_BOOL_001.ConfigureFunctionBlockAsVirtualInput(DefaultValue:=FALSE,SetDefaultValueStartup:=TRUE,PublishAtStartup:=TRUE,UsePersistentAtStartup:=FALSE); *)
FB_VIRTUAL_BOOL_001.ConfigureFunctionBlockAsVirtualOutput(PublishAtStartup:=TRUE);

FB_VIRTUAL_REAL_001.InitMqtt(MQTTPublishPrefix:= ADR(MqttVariables.MqttPubVirtualPrefix),				
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubVirtualPrefix),									
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),						
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_VIRTUAL_MQTT),
	MqttQos:=MQTT.QoS.ExactlyOnce, 
	MqttRetain:=FALSE												
);
FB_VIRTUAL_REAL_001.ConfigureFunctionBlockAsVirtualInput(DefaultValue:=0.1,SetDefaultValueStartup:=TRUE,PublishAtStartup:=TRUE,UsePersistentAtStartup:=FALSE,ConfirmReceival:=TRUE);
(* FB_VIRTUAL_REAL_001.ConfigureFunctionBlockAsVirtualOutput(PublishAtStartup:=TRUE); *)


(* DALI *)
FB_DALI_1_ADR0.InitMqtt(MQTTPublishPrefix:= ADR(MqttVariables.MqttPubDimmerPrefix),				
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubDimmerPrefix),									
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),						
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_DIMMER_MQTT)						
);

FB_DALI_1_ADR0.InitMqttDiscovery(ADR(MqttVariables.PLC_Device), 'Keuken');


MqttVariables.PLC_Device.SendLogMessage('Init finished', 'MAIN_INIT');

</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="MOVE_COVERS">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DO_COVER_001(
	TOGGLE:=FB_DI_PB_001.P_LONG,
	MU=&gt;DO_031,
	MD=&gt;DO_032	
);</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="PROCESS_VIRTUAL">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">
FB_VIRTUAL_BOOL_001();
FB_VIRTUAL_INT_001();
FB_VIRTUAL_STRING_001();
FB_VIRTUAL_REAL_001();</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="DALI">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">// Run the master before anything else
M1_DALIMASTER(
	bPortDALI:=1,
	I_Port:=IoConfig_Globals.DALI_MULTI_MASTER_MODULE);
	
// Run individual DALI FB
FB_DALI_1_ADR0(
	BALLAST := DALIVariables.M1_Light1,
	TOGGLE := FB_DI_PB_002.SINGLE,
	P_LONG := FB_DI_PB_002.P_LONG,
	STATUS_LED =&gt; DO_002);</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
              </actions>
              <body>
                <SFC>
                  <step localId="0" initialStep="true" name="Init">
                    <position x="0" y="0" />
                    <connectionPointIn />
                    <connectionPointOut formalParameter="sfc" />
                    <connectionPointOutAction formalParameter="x" />
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">Init</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="6844a48e-46c2-4cc8-a185-a478f3b99cc0">TRUE</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </step>
                  <actionBlock localId="2">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="0" />
                    </connectionPointIn>
                    <action localId="1" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="MAIN_INIT" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">MAIN_INIT</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                  </actionBlock>
                  <inVariable localId="3">
                    <position x="0" y="0" />
                    <connectionPointOut />
                    <expression>True</expression>
                  </inVariable>
                  <transition localId="4">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="0" formalParameter="sfc" />
                    </connectionPointIn>
                    <condition>
                      <connectionPointIn>
                        <connection refLocalId="3" />
                      </connectionPointIn>
                    </condition>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">True</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                          <attribute guid="8294df19-5962-4dee-a874-1051dabb0e3e">0</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </transition>
                  <step localId="5" name="Main">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="4" />
                    </connectionPointIn>
                    <connectionPointOut formalParameter="sfc" />
                    <connectionPointOutAction formalParameter="x" />
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">Main</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="6844a48e-46c2-4cc8-a185-a478f3b99cc0">FALSE</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </step>
                  <actionBlock localId="11">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="5" />
                    </connectionPointIn>
                    <action localId="6" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="DALI" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">DALI</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                    <action localId="7" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="READ_PUSHBUTTONS" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">READ_PUSHBUTTONS</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                    <action localId="8" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="WRITE_SWITCHES" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">WRITE_SWITCHES</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                    <action localId="9" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="MOVE_COVERS" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">MOVE_COVERS</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                    <action localId="10" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="PROCESS_VIRTUAL" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">PROCESS_VIRTUAL</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                  </actionBlock>
                  <inVariable localId="12">
                    <position x="0" y="0" />
                    <connectionPointOut />
                    <expression>TRUE</expression>
                  </inVariable>
                  <transition localId="13">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="5" formalParameter="sfc" />
                    </connectionPointIn>
                    <condition>
                      <connectionPointIn>
                        <connection refLocalId="12" />
                      </connectionPointIn>
                    </condition>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">TRUE</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                          <attribute guid="8294df19-5962-4dee-a874-1051dabb0e3e">0</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </transition>
                  <jumpStep localId="14" targetName="Main">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="13" />
                    </connectionPointIn>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">Main</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </jumpStep>
                </SFC>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/sfcsettings" handleUnknown="implementation">
                  <SFCSettings>
                    <LibTitle>IecSfc</LibTitle>
                    <LibCompany>System</LibCompany>
                    <LibVersion>4.1.0.0</LibVersion>
                    <LibNamespace>IecSfc</LibNamespace>
                    <CalcActiveTransOnly>false</CalcActiveTransOnly>
                    <UseDefaults>false</UseDefaults>
                    <Flags>
                      <EnableLimit Declare="true" Use="false" />
                      <Init Declare="true" Use="false" />
                      <Reset Declare="true" Use="false" />
                      <QuitError Declare="true" Use="false" />
                      <Pause Declare="true" Use="false" />
                      <Error Declare="true" Use="false" />
                      <Trans Declare="true" Use="false" />
                      <ErrorStep Declare="true" Use="false" />
                      <ErrorPOU Declare="true" Use="false" />
                      <CurrentStep Declare="true" Use="false" />
                      <Tip Declare="true" Use="false" />
                      <TipMode Declare="true" Use="false" />
                      <MaxFlags Declare="true" Use="false" />
                      <SFCErrorAnalyzation Declare="true" Use="false" />
                      <SFCErrorAnalyzationTable Declare="true" Use="false" />
                      <CurrentSteps Declare="true" Use="false" />
                    </Flags>
                  </SFCSettings>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="PLC_PRG_MQTT" pouType="program">
              <interface>
                <localVars>
                  <variable name="MQTTClient">
                    <type>
                      <derived name="MQTT.MQTTClient" />
                    </type>
                  </variable>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <derived name="MQTT.MQTT_IN_OUT" />
                    </type>
                  </variable>
                  <variable name="MQTTInfo">
                    <type>
                      <derived name="MQTT.MQTT_INFO" />
                    </type>
                  </variable>
                  <variable name="MQTTBirthMessage">
                    <type>
                      <derived name="MQTT_MESSAGE" />
                    </type>
                  </variable>
                  <variable name="MQTTBirthHartbeat">
                    <type>
                      <derived name="OSCAT_BASIC.GEN_PULSE" />
                    </type>
                  </variable>
                  <variable name="MQTTConnectTrigger">
                    <type>
                      <derived name="Standard.R_TRIG" />
                    </type>
                  </variable>
                  <variable name="MQTTPublishBirth">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="MQTTBirthPublisher">
                    <type>
                      <derived name="FB_MqttPublishWorker" />
                    </type>
                  </variable>
                  <variable name="initMqtt">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> variables for MQTT setup </xhtml>
                    </documentation>
                  </variable>
                  <variable name="icounter">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="ipublishers">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="40" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> variables for MQTT publishing </xhtml>
                    </documentation>
                  </variable>
                  <variable name="publishers">
                    <type>
                      <array>
                        <dimension lower="0" upper="39" />
                        <baseType>
                          <derived name="FB_MqttPublishWorker" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="i">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> variables to work with Mqttbuffer </xhtml>
                    </documentation>
                  </variable>
                  <variable name="subscriber_FB_OUTPUT_SWITCH_MQTT">
                    <type>
                      <derived name="MQTT.MQTTSubscribe" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> variables for MQTT subscribing </xhtml>
                    </documentation>
                  </variable>
                  <variable name="subscriber_FB_OUTPUT_COVER_MQTT">
                    <type>
                      <derived name="MQTT.MQTTSubscribe" />
                    </type>
                  </variable>
                  <variable name="subscriber_FB_VIRTUAL_MQTT">
                    <type>
                      <derived name="MQTT.MQTTSubscribe" />
                    </type>
                  </variable>
                  <variable name="subscriber_FB_DIMMER_MQTT">
                    <type>
                      <derived name="MQTT.MQTTSubscribe" />
                    </type>
                  </variable>
                  <variable name="subscriber_FB_RS485_MQTT">
                    <type>
                      <derived name="MQTT.MQTTSubscribe" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <actions>
                <action name="MQTT_INIT">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF NOT initMqtt THEN
	initMqtt := TRUE;
	(* Basic MQTT config *)
	MQTT_IN_OUT.ClientID := MqttVariables.clientID;
	
	(* Set the LWT topic / payload *)
	MQTT_IN_OUT.BuildWillTopicAndMessage := FALSE;
	MQTT_IN_OUT.WillTopicBase := '';
	MQTT_IN_OUT.ClientWillTopic := MqttVariables.MqttAvailabilityTopic;
	MQTT_IN_OUT.ClientWillMessage := MqttVariables.MqttAvailabilityOfflinePayload;
	
	(* Set the birth message *)
	MQTTBirthMessage.Payload := MqttVariables.MqttAvailabilityOnlinePayload;
	MQTTBirthMessage.Topic := MqttVariables.MqttAvailabilityTopic;
	MQTTBirthMessage.Qos := MqttVariables.MQTT_QOS_EXACTLY_ONCE;
	MQTTBirthMessage.MqttRetain := FALSE;
	
	(* Configure the rising edge detector to detect a connect/reconnect to the broker, used for  birth message *)
	MQTTConnectTrigger(CLK := MQTTInfo.MQTT_CONNECTED);
	
	(* Configure the dedicated MQTTBirth publisher *)
	MQTTBirthPublisher.Init(inputMQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	
	(* Configure the pulse generator for the birth message hartbeat *)
	 MQTTBirthHartbeat(ENQ:=TRUE, PTH:=T#0S, PTL:=MqttVariables.MQTTAvailabilityHartbeatTime);
	
	(* INIT MQTT PUBLISH STUFF *)
	FOR icounter := 0 TO (ipublishers-1) DO		
		publishers[icounter].Init(inputMQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	END_FOR 
	
	(* INIT MQTT SUBSCRIBE STUFF *)
	subscriber_FB_OUTPUT_SWITCH_MQTT.SetMqttInOut(MQTT_IN_OUT:= MQTT_IN_OUT);	
	subscriber_FB_OUTPUT_COVER_MQTT.SetMqttInOut(MQTT_IN_OUT:= MQTT_IN_OUT);
	subscriber_FB_VIRTUAL_MQTT.SetMqttInOut(MQTT_IN_OUT:= MQTT_IN_OUT);	
	subscriber_FB_DIMMER_MQTT.SetMqttInOut(MQTT_IN_OUT:= MQTT_IN_OUT);
	subscriber_FB_RS485_MQTT.SetMqttInOut(MQTT_IN_OUT:= MQTT_IN_OUT);
END_IF

</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="MQTT_PUBLISH">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">(* set user led green if connected to MQTT broker, flashing red if not *)
(* é!COCKPIT version *)
(* LED_1_BrokerStatus(eID:=eLedID.AppLED_1, xOpen:=TRUE );
IF(MQTTClient.connected) THEN
	LED_1_BrokerStatus.SetStatic(eLedColor.Green);
ELSE
	LED_1_BrokerStatus.SetFlash(T#1S,eLedColor.Red, eLedColor.Off);  
END_IF *)
(* Codesys 3S version *)
(*
IF MQTTClient.connected THEN
     PFC.SetLed(which:=PFC.LED.U1, how:=PFC.LedState.STATIC_GRN);
ELSE
     PFC.SetLed(which:=PFC.LED.U1, how:=PFC.LedState.BLINK_RED);
END_IF 
*)

(* allow the rising edge detector to detect a connect/reconnect to the broker, used for  birth message *)
MQTTConnectTrigger(CLK := MQTTInfo.MQTT_CONNECTED);

(* allow the pulse generator to generate a pulse, used for birth message hartbeat *)
MQTTBirthHartbeat(ENQ:=TRUE, PTH:=T#0S, PTL:=MqttVariables.MQTTAvailabilityHartbeatTime);

(* Check if this is a new connection due to startup or connection issues *)
IF initMqtt AND (MQTTConnectTrigger.Q OR MQTTBirthHartbeat.Q) THEN
	MQTTPublishBirth := TRUE;
END_IF

(* On connect or reconnect publish a birth message using the dedicated birth publisher *)
IF MQTTPublishBirth THEN
	MQTTBirthPublisher.PublishMessage(MqttMessage := MQTTBirthMessage);
	MQTTPublishBirth:=FALSE;
END_IF


(* Check if Mqtt is initialized AND if there are elements on the queue to process AND if a MQTTbirthmessage has been published successfully *)
IF initMqtt AND NOT(MqttVariables.fbMqttPublishQueue.EMPTY) AND MQTTPublishBirth = FALSE AND MQTTBirthPublisher.SendDone THEN	
	(* Loop through all free publishers untill there are no more elements in the queue or no more free publishers *)
	FOR i:=0 TO (ipublishers-1) DO			
		(* use the publishers that are free  *)
		IF publishers[i].SendDone AND NOT(MqttVariables.fbMqttPublishQueue.EMPTY) THEN	
			(* Pass message from the queue to a publisher *)
			publishers[i].PublishMessage(MqttMessage:= MqttVariables.fbMqttPublishQueue.GetMessage());
		ELSIF MqttVariables.fbMqttPublishQueue.EMPTY THEN
			(* Queue is empty, jump out of the for loop	*)
			EXIT;	
		END_IF
	END_FOR
END_IF


(* If MQTT is initialized, let the MqttPublishWorkers do their work *)
IF initMqtt THEN	
	MQTT_IN_OUT.clientFB(
		MQTT_IN_OUT:= MQTT_IN_OUT, 
		ENABLE:= TRUE, 
		URL:= MQttVariables.broker, 
		TIMEOUT:= T#1S, 
		TLS:= FALSE);		
		
	MQTTBirthPublisher();
	
	FOR i := 0 TO (ipublishers-1) DO
  		publishers[i]();
	END_FOR

END_IF
</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="MQTT_SUBSCRIBE">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">(* If MQTT is initialized, let the subscriber(s) do its work *)
IF initMqtt THEN
	
	MQTT_IN_OUT.clientFB(
		MQTT_IN_OUT:= MQTT_IN_OUT, 
		ENABLE:= TRUE, 
		URL:= MqttVariables.broker, 
		TIMEOUT:= T#1S, 
		TLS:= FALSE);

	subscriber_FB_OUTPUT_SWITCH_MQTT(
		Subscribe:= TRUE, 
		Topic:= ADR(MqttVariables.MqttSubSwitchTopic), 
		QoSSubscribe:= MqttVariables.MQTT_QOS_EXACTLY_ONCE, 
		ExpectingString:= TRUE, 
		Callback:= MqttVariables.collector_FB_OUTPUT_SWITCH_MQTT,
	);	
	subscriber_FB_OUTPUT_COVER_MQTT(
		Subscribe:= TRUE, 
		Topic:= ADR(MqttVariables.MqttSubCoverTopic), 
		QoSSubscribe:= MqttVariables.MQTT_QOS_EXACTLY_ONCE, 
		ExpectingString:= TRUE, 
		Callback:= MqttVariables.collector_FB_OUTPUT_COVER_MQTT,
	);	
	subscriber_FB_VIRTUAL_MQTT(
		Subscribe:= TRUE, 
		Topic:= ADR(MqttVariables.MqttSubVirtualTopic), 
		QoSSubscribe:= MqttVariables.MQTT_QOS_EXACTLY_ONCE, 
		ExpectingString:= TRUE, 
		Callback:= MqttVariables.collector_FB_VIRTUAL_MQTT,
	);
	subscriber_FB_DIMMER_MQTT(
		Subscribe:= TRUE, 
		Topic:= ADR(MqttVariables.MqttSubDimmerTopic), 
		QoSSubscribe:= MqttVariables.MQTT_QOS_EXACTLY_ONCE, 
		ExpectingString:= TRUE, 
		Callback:= MqttVariables.collector_FB_DIMMER_MQTT,
	);
	subscriber_FB_RS485_MQTT(
		Subscribe:= TRUE, 
		Topic:= ADR(MqttVariables.MqttSubRS485Topic), 
		QoSSubscribe:= MqttVariables.MQTT_QOS_EXACTLY_ONCE,
		ExpectingString:= TRUE, 
		Callback:= MqttVariables.collector_FB_RS485_MQTT,
	);
END_IF</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
              </actions>
              <body>
                <SFC>
                  <step localId="0" initialStep="true" name="Init">
                    <position x="0" y="0" />
                    <connectionPointIn />
                    <connectionPointOut formalParameter="sfc" />
                    <connectionPointOutAction formalParameter="x" />
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">Init</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="6844a48e-46c2-4cc8-a185-a478f3b99cc0">TRUE</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </step>
                  <actionBlock localId="2">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="0" />
                    </connectionPointIn>
                    <action localId="1" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="MQTT_INIT" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">MQTT_INIT</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                  </actionBlock>
                  <inVariable localId="3">
                    <position x="0" y="0" />
                    <connectionPointOut />
                    <expression>True</expression>
                  </inVariable>
                  <transition localId="4">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="0" formalParameter="sfc" />
                    </connectionPointIn>
                    <condition>
                      <connectionPointIn>
                        <connection refLocalId="3" />
                      </connectionPointIn>
                    </condition>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">True</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                          <attribute guid="8294df19-5962-4dee-a874-1051dabb0e3e">0</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </transition>
                  <step localId="5" name="MQTT">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="4" />
                    </connectionPointIn>
                    <connectionPointOut formalParameter="sfc" />
                    <connectionPointOutAction formalParameter="x" />
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">MQTT</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="6844a48e-46c2-4cc8-a185-a478f3b99cc0">FALSE</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </step>
                  <actionBlock localId="8">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="5" />
                    </connectionPointIn>
                    <action localId="6" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="MQTT_PUBLISH" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">MQTT_PUBLISH</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                    <action localId="7" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="MQTT_SUBSCRIBE" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">MQTT_SUBSCRIBE</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                  </actionBlock>
                  <inVariable localId="9">
                    <position x="0" y="0" />
                    <connectionPointOut />
                    <expression>TRUE</expression>
                  </inVariable>
                  <transition localId="10">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="5" formalParameter="sfc" />
                    </connectionPointIn>
                    <condition>
                      <connectionPointIn>
                        <connection refLocalId="9" />
                      </connectionPointIn>
                    </condition>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">TRUE</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                          <attribute guid="8294df19-5962-4dee-a874-1051dabb0e3e">0</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </transition>
                  <jumpStep localId="11" targetName="MQTT">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="10" />
                    </connectionPointIn>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">MQTT</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </jumpStep>
                </SFC>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/sfcsettings" handleUnknown="implementation">
                  <SFCSettings>
                    <LibTitle>IecSfc</LibTitle>
                    <LibCompany>System</LibCompany>
                    <LibVersion>4.1.0.0</LibVersion>
                    <LibNamespace>IecSfc</LibNamespace>
                    <CalcActiveTransOnly>false</CalcActiveTransOnly>
                    <UseDefaults>false</UseDefaults>
                    <Flags>
                      <EnableLimit Declare="true" Use="false" />
                      <Init Declare="true" Use="false" />
                      <Reset Declare="true" Use="false" />
                      <QuitError Declare="true" Use="false" />
                      <Pause Declare="true" Use="false" />
                      <Error Declare="true" Use="false" />
                      <Trans Declare="true" Use="false" />
                      <ErrorStep Declare="true" Use="false" />
                      <ErrorPOU Declare="true" Use="false" />
                      <CurrentStep Declare="true" Use="false" />
                      <Tip Declare="true" Use="false" />
                      <TipMode Declare="true" Use="false" />
                      <MaxFlags Declare="true" Use="false" />
                      <SFCErrorAnalyzation Declare="true" Use="false" />
                      <SFCErrorAnalyzationTable Declare="true" Use="false" />
                      <CurrentSteps Declare="true" Use="false" />
                    </Flags>
                  </SFCSettings>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="PLC_PRG_RS485" pouType="program">
              <interface>
                <localVars>
                  <variable name="ModbusMaster">
                    <type>
                      <derived name="WagoAppPlcModbus.FbMbMasterSerial" />
                    </type>
                    <initialValue>
                      <structValue>
                        <value member="xConnect">
                          <simpleValue value="TRUE" />
                        </value>
                        <value member="udiBaudrate">
                          <simpleValue value="9600" />
                        </value>
                        <value member="usiDataBits">
                          <simpleValue value="8" />
                        </value>
                        <value member="eParity">
                          <simpleValue value="WagoTypesCom.eTTYParity.None" />
                        </value>
                        <value member="eStopBits">
                          <simpleValue value="WagoTypesCom.eTTYStopBits.One" />
                        </value>
                        <value member="eHandshake">
                          <simpleValue value="WagoTypesCom.eTTYHandshake.None" />
                        </value>
                        <value member="ePhysical">
                          <simpleValue value="WagoTypesCom.eTTYPhysicalLayer.RS485_HalfDuplex" />
                        </value>
                        <value member="eFrameType">
                          <simpleValue value="eMbFrameType.RTU" />
                        </value>
                        <value member="tTimeOut">
                          <simpleValue value="TIME#500ms" />
                        </value>
                      </structValue>
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> CODESYS 3S Version version

	xComPortOpen         : BOOL;
    xComPortError        : BOOL;
    rtsResult            : RTS_IEC_RESULT;	
    stComPortSettings    : SysCom.SysComSettings :=(
											ulBaudrate :=9600,
											byParity := 0,
											byStopBits:=1,
											ulTimeout :=500,
											ulBufferSize :=256,
											
											sPort:=SYS_COM_PORTS.SYS_COMPORT1											
										);
    hComPort             : RTS_IEC_HANDLE; 
    awReadBuffer         : ARRAY[0..124] OF WORD;        
    awWriteBuffer        : ARRAY[0..124] OF WORD;     
    fbModbusRequest      : IoDrvModbus.ModbusRequest2;
    eComError            : IoDrvModbus.MB_ErrorCodes;	
	
 é!COCKPIT version</xhtml>
                    </documentation>
                  </variable>
                  <variable name="RtuQuery">
                    <type>
                      <derived name="WagoAppPlcModbus.typMbQuery" />
                    </type>
                  </variable>
                  <variable name="RtuResponse">
                    <type>
                      <derived name="WagoAppPlcModbus.typMbResponse" />
                    </type>
                  </variable>
                  <variable name="Trigger">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shared variables for é!COCKPIT and CODESYS 3S Version </xhtml>
                    </documentation>
                  </variable>
                  <variable name="InitRS485">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="ActiveRtuQuery">
                    <type>
                      <derived name="RS485_RtuQuery" />
                    </type>
                  </variable>
                  <variable name="RS485BusController">
                    <type>
                      <derived name="FB_RS485_BUSCONTROLLER" />
                    </type>
                  </variable>
                  <variable name="FB_RS485_EASTRON_SDM220_1">
                    <type>
                      <derived name="FB_RS485_EASTRON_SDM220_MQTT" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> RS485 </xhtml>
                    </documentation>
                  </variable>
                  <variable name="FB_RS485_ESERA_1WIRE_GATEWAY_MQTT_HOME">
                    <type>
                      <derived name="FB_RS485_ESERA_1WIRE_GATEWAY_MQTT" />
                    </type>
                  </variable>
                  <variable name="FB_RS485_DUCO_DUCOBOX_HOME">
                    <type>
                      <derived name="FB_RS485_DUCO_DUCOBOX_MQTT" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <actions>
                <action name="RS485_RUN">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">(* CODESYS 3S Version version*)
(*
IF(NOT xComPortOpen AND NOT xComPortError) THEN
    hComPort := SysCom.SysComOpen2( pSettings := ADR(stComPortSettings), pSettingsEx := 0, pResult := ADR(rtsResult));     
    xComPortError := (hComPort = RTS_INVALID_HANDLE OR rtsResult &lt;&gt; 0);
    xComPortOpen := NOT xComPortError;
END_IF


IF xComPortOpen THEN
	fbModbusRequest.modbusCommand.uiFunctionCode := RS485BusController.ActiveRtuQuery.FunctionCode;
    fbModbusRequest.modbusCommand.uiReadOffset := RS485BusController.ActiveRtuQuery.ReadAddress;	
    fbModbusRequest.modbusCommand.uiReadLen :=RS485BusController.ActiveRtuQuery.ReadQuantity;	   
    fbModbusRequest.pRecvData := ADR(awReadBuffer);
    fbModbusRequest.pSendData := ADR(awWriteBuffer);        
    fbModbusRequest.tResponseTimeout := T#1S;
	fbModbusRequest.transmission := MB_Transmission.RTU;
    fbModbusRequest(
        hComPort := hComPort,
        xExecute := Trigger,
        usiSlaveAddr := RS485BusController.ActiveRtuQuery.DeviceId,		
        byModbusError =&gt; eComError);
		
END_IF
*)
	
(* é!COCKPIT version*)
RtuQuery.bUnitId := RS485BusController.ActiveRtuQuery.DeviceId;	
RtuQuery.bFunctionCode := RS485BusController.ActiveRtuQuery.FunctionCode;	
RtuQuery.uiReadAddress := RS485BusController.ActiveRtuQuery.ReadAddress;	
RtuQuery.uiReadQuantity := RS485BusController.ActiveRtuQuery.ReadQuantity;
ModbusMaster(
	I_Port := IoConfig_Globals.COM1,
	utQuery:= RtuQuery,
	xTrigger := Trigger,
	utResponse:= RtuResponse);


(* Shared variables for é!COCKPIT and CODESYS 3S Version *)
RS485BusController();

(* RS485 devices *)
FB_RS485_EASTRON_SDM220_1();
FB_RS485_ESERA_1WIRE_GATEWAY_MQTT_HOME();
FB_RS485_DUCO_DUCOBOX_HOME();</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
                <action name="RS485_INIT">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485 THEN
	InitRS485 := TRUE;

(* INIT RS485 BUS CONTROLLER; CODESYS 3S Version version *)
(*
RS485BusController.Init(
	StartupDelay := T#5S,				(* Time to wait after startup to start using the bus, prevents boot delay issues when RS485 are not ready yet on startup *)		
	SilenceTime := T#50MS,				(* Silence time between two requests, important to not get faulty data on bus *)
	BusTrigger := ADR(Trigger),			(* Pointer to the bool used to initiate bus requests *)
	BusData := ADR(awReadBuffer),		(* Pointer to the array containing the bus response data *)
	BusError := ADR(xComPortError)		(* Pointer to the bus error bool *)
);
*)

(* INIT RS485 BUS CONTROLLER; é!COCKPIT version *)
RS485BusController.Init(
	StartupDelay := T#5S,				(* Time to wait after startup to start using the bus, prevents boot delay issues when RS485 are not ready yet on startup *)		
	SilenceTime := T#50MS,				(* Silence time between two requests, important to not get faulty data on bus *)
	BusTrigger := ADR(Trigger),			(* Pointer to the bool used to initiate bus requests *)
	BusData := ADR(RtuResponse.awData),	(* Pointer to the array containing the bus response data *)
	BusError := ADR(ModbusMaster.xError)(* Pointer to the bus error bool *)
);

RS485BusController.RegisterDevice(device := FB_RS485_EASTRON_SDM220_1);
RS485BusController.RegisterDevice(device := FB_RS485_ESERA_1WIRE_GATEWAY_MQTT_HOME);
RS485BusController.RegisterDevice(device := FB_RS485_DUCO_DUCOBOX_HOME);

(* INIT RS485 DEVICE STUFF *)
FB_RS485_EASTRON_SDM220_1.InitRS485(
	Data1PollingInterval := T#10S,		(* Polling interval for data array 1 *)				
	Data2PollingInterval := T#20S,		(* Polling interval for data array 2 *)			
	Data3PollingInterval := T#30S,		(* Polling interval for data array 3 *)			
	DeviceAddress := 1					(* Device address of the modbus device *)			
);

FB_RS485_EASTRON_SDM220_1.InitMqtt(
	MQTTPublishPrefix:= ADR(MqttVariables.MqttPubRS485Prefix),						(* pointer to string prefix for the mqtt publish topic *)
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue)		(* pointer to MqttPublishQueue to send a new Mqtt event *)
);

FB_RS485_ESERA_1WIRE_GATEWAY_MQTT_HOME.InitRS485(
	DeviceAddress := 2
);

FB_RS485_ESERA_1WIRE_GATEWAY_MQTT_HOME.InitMqtt(
	MQTTPublishPrefix:= ADR(MqttVariables.MqttPubRS485Prefix),	
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue)
);

(* ENABLE OWD DEVICES ON ESARE GATEWAY *)
FB_RS485_ESERA_1WIRE_GATEWAY_MQTT_HOME.EnableOwd(
	OwdNumber := 1,
	DataPollingInterval := T#2M
);

FB_RS485_ESERA_1WIRE_GATEWAY_MQTT_HOME.EnableOwd(
	OwdNumber := 2,
	DataPollingInterval := T#2M
);

FB_RS485_DUCO_DUCOBOX_HOME.InitRS485(
	DataPollingInterval := T#3S,		(* Polling interval for data array *)				
	DeviceAddress := 3,					(* Device address of the modbus device *)
);

// Nodes: valves for example
FB_RS485_DUCO_DUCOBOX_HOME.AddNode(
	DataPollingInterval := T#15S
);
FB_RS485_DUCO_DUCOBOX_HOME.AddNode(
	DataPollingInterval := T#15S
);

FB_RS485_DUCO_DUCOBOX_HOME.InitMqtt(
	MQTTPublishPrefix:= ADR(MqttVariables.MqttPubRS485Prefix),
	MQTTSubscribePrefix:= ADR(MqttVariables.MqttSubRS485Prefix),
	pMqttPublishQueue := ADR(MqttVariables.fbMqttPublishQueue),	
	pMqttCallbackCollector := ADR(MqttVariables.collector_FB_RS485_MQTT)
);


END_IF</xhtml>
                    </ST>
                  </body>
                  <addData />
                </action>
              </actions>
              <body>
                <SFC>
                  <step localId="0" initialStep="true" name="Init">
                    <position x="0" y="0" />
                    <connectionPointIn />
                    <connectionPointOut formalParameter="sfc" />
                    <connectionPointOutAction formalParameter="x" />
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">Init</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="6844a48e-46c2-4cc8-a185-a478f3b99cc0">TRUE</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </step>
                  <actionBlock localId="2">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="0" />
                    </connectionPointIn>
                    <action localId="1" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="RS485_INIT" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">RS485_INIT</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                  </actionBlock>
                  <inVariable localId="3">
                    <position x="0" y="0" />
                    <connectionPointOut />
                    <expression>TRUE</expression>
                  </inVariable>
                  <transition localId="4">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="0" formalParameter="sfc" />
                    </connectionPointIn>
                    <condition>
                      <connectionPointIn>
                        <connection refLocalId="3" />
                      </connectionPointIn>
                    </condition>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">TRUE</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                          <attribute guid="8294df19-5962-4dee-a874-1051dabb0e3e">0</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </transition>
                  <step localId="5" name="RS485">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="4" />
                    </connectionPointIn>
                    <connectionPointOut formalParameter="sfc" />
                    <connectionPointOutAction formalParameter="x" />
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">RS485</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="6844a48e-46c2-4cc8-a185-a478f3b99cc0">FALSE</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </step>
                  <actionBlock localId="7">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="5" />
                    </connectionPointIn>
                    <action localId="6" qualifier="N" duration="" indicator="">
                      <relPosition x="0" y="0" />
                      <reference name="RS485_RUN" />
                      <connectionPointOut />
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                          <attributes xmlns="">
                            <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">RS485_RUN</attribute>
                            <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                            <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                            <attribute guid="e174fc0d-80b0-4a9e-a530-ca239c249a50">N</attribute>
                          </attributes>
                        </data>
                      </addData>
                    </action>
                  </actionBlock>
                  <inVariable localId="8">
                    <position x="0" y="0" />
                    <connectionPointOut />
                    <expression>TRUE</expression>
                  </inVariable>
                  <transition localId="9">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="5" formalParameter="sfc" />
                    </connectionPointIn>
                    <condition>
                      <connectionPointIn>
                        <connection refLocalId="8" />
                      </connectionPointIn>
                    </condition>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">TRUE</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                          <attribute guid="bc882c11-1e91-4dd8-a6b8-2075724ed18b">0</attribute>
                          <attribute guid="62e1754b-7629-4e63-9cec-10ae0c536f1f">FALSE</attribute>
                          <attribute guid="8294df19-5962-4dee-a874-1051dabb0e3e">0</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </transition>
                  <jumpStep localId="10" targetName="RS485">
                    <position x="0" y="0" />
                    <connectionPointIn>
                      <connection refLocalId="9" />
                    </connectionPointIn>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/sfc/element" handleUnknown="implementation">
                        <attributes xmlns="">
                          <attribute guid="38391c6d-6d4a-42f8-8ee7-9f45e5adafa8">RS485</attribute>
                          <attribute guid="01580b27-6378-448b-8ecb-0e4b795b58d6">FALSE</attribute>
                        </attributes>
                      </data>
                    </addData>
                  </jumpStep>
                </SFC>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/sfcsettings" handleUnknown="implementation">
                  <SFCSettings>
                    <LibTitle>IecSfc</LibTitle>
                    <LibCompany>System</LibCompany>
                    <LibVersion>4.1.0.0</LibVersion>
                    <LibNamespace>IecSfc</LibNamespace>
                    <CalcActiveTransOnly>false</CalcActiveTransOnly>
                    <UseDefaults>false</UseDefaults>
                    <Flags>
                      <EnableLimit Declare="true" Use="false" />
                      <Init Declare="true" Use="false" />
                      <Reset Declare="true" Use="false" />
                      <QuitError Declare="true" Use="false" />
                      <Pause Declare="true" Use="false" />
                      <Error Declare="true" Use="false" />
                      <Trans Declare="true" Use="false" />
                      <ErrorStep Declare="true" Use="false" />
                      <ErrorPOU Declare="true" Use="false" />
                      <CurrentStep Declare="true" Use="false" />
                      <Tip Declare="true" Use="false" />
                      <TipMode Declare="true" Use="false" />
                      <MaxFlags Declare="true" Use="false" />
                      <SFCErrorAnalyzation Declare="true" Use="false" />
                      <SFCErrorAnalyzationTable Declare="true" Use="false" />
                      <CurrentSteps Declare="true" Use="false" />
                    </Flags>
                  </SFCSettings>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="DMX_SEND" pouType="program">
              <interface>
                <localVars>
                  <variable name="Universe">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="IP_CONTROL2">
                    <type>
                      <derived name="oscat_network.IP_CONTROL2" />
                    </type>
                  </variable>
                  <variable name="IP_C">
                    <type>
                      <derived name="oscat_network.IP_C" />
                    </type>
                  </variable>
                  <variable name="S_BUF1">
                    <type>
                      <derived name="oscat_network.NETWORK_BUFFER_SHORT" />
                    </type>
                  </variable>
                  <variable name="R_BUF1">
                    <type>
                      <derived name="oscat_network.NETWORK_BUFFER_SHORT" />
                    </type>
                  </variable>
                  <variable name="error_send">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="i">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="start">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="size">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="LED_1_BrokerStatus">
                    <type>
                      <derived name="FbAppLED" />
                    </type>
                  </variable>
                  <variable name="Step">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF init = FALSE THEN
	init := TRUE;
	//https://art-net.org.uk/how-it-works/streaming-packets/artdmx-packet-definition/
	(* Write DMX header character in the buffer *) 
	S_BUF1.BUFFER [0]:= BYTE#16#41; // A
	S_BUF1.BUFFER [1]:= BYTE#16#72; // R	
	S_BUF1.BUFFER [2]:= BYTE#16#74; // T
	S_BUF1.BUFFER [3]:= BYTE#16#2D; // -
	S_BUF1.BUFFER [4]:= BYTE#16#4E; // N
	S_BUF1.BUFFER [5]:= BYTE#16#65; // E
	S_BUF1.BUFFER [6]:= BYTE#16#74; // T
	S_BUF1.BUFFER [7]:= BYTE#16#00; // 0 zero
	
	S_BUF1.BUFFER [8]:= BYTE#16#00;	// Opcode ArtDMX (0x5000) little endian
	S_BUF1.BUFFER [9]:= BYTE#16#50; // Opcode ArtDMX (0x5000) little endian
	
	S_BUF1.BUFFER [10]:= BYTE#16#00; // Protocol Version Hi (0)
	S_BUF1.BUFFER [11]:= BYTE#16#0E; // Protocol Version Lo (14)
	
	S_BUF1.BUFFER [12]:= BYTE#16#00; // Sequence
	S_BUF1.BUFFER [13]:= BYTE#16#00; // Physical
	
	S_BUF1.BUFFER [16]:= BYTE#16#02; // Length Hi
	S_BUF1.BUFFER [17]:= BYTE#16#00; // Length Lo (2 to 512, even)
	(* the DMX channels that are next have already been written to the buffer *) 
	
	IF Universe = 1 THEN
		S_BUF1.BUFFER [14]:= BYTE#16#01; // Universe little endian
		S_BUF1.BUFFER [15]:= BYTE#16#00; // Universe little endian
	END_IF
	IF Universe = 2 THEN
		S_BUF1.BUFFER [14]:= BYTE#16#02; // Universe little endian
		S_BUF1.BUFFER [15]:= BYTE#16#00; // Universe little endian
	END_IF
END_IF;


size := 512+18;
FOR i:= 0 TO size DO (* check whether the DMX values ​​in the global variable have changed *)
	// i+2 is strange, buffers are not the same, its often offset with 2 sometimes by 1, todo
	IF S_BUF1.BUFFER[i+18] &lt;&gt; DMXVariables.DMX.BUFFER[i+2] THEN
   		S_BUF1.BUFFER[i+18]:= DMXVariables.DMX.BUFFER[i+2];
		Step := 1;
	END_IF
END_FOR

S_BUF1.BUFFER [17]:= S_BUF1.BUFFER [17]; // low...
DMXVariables.DMX.BUFFER[0] := DMXVariables.DMX.BUFFER[0];
S_BUF1.BUFFER [18]:= S_BUF1.BUFFER [18];
DMXVariables.DMX.BUFFER[1] := DMXVariables.DMX.BUFFER[1];
S_BUF1.BUFFER [19]:= S_BUF1.BUFFER [19];
DMXVariables.DMX.BUFFER[2] := DMXVariables.DMX.BUFFER[2];
S_BUF1.BUFFER [20]:= S_BUF1.BUFFER [20];
DMXVariables.DMX.BUFFER[3] := DMXVariables.DMX.BUFFER[3];


CASE Step OF
	0:
		//passive
	
	1:
		IP_C.C_MODE := 1; (* Mode: UDP+ACTIVE+Port+IP *)
		IP_C.C_ENABLE := TRUE; (* Release connection *)
		IP_C.TIME_RESET := TRUE; (*Reset TIME monitoring * *)
		IP_C.R_OBSERVE := TRUE; (* Monitor data receive *)
		R_BUF1.SIZE:= 0; (* Reset Home length *)
		IP_C.C_IP:= oscat_network.IP4_DECODE (DMXVariables.IP);
		IP_C.C_PORT:= WORD#6454;
		
		S_BUF1.SIZE := size;
		Step:=2;
		
	2:
		IP_CONTROL2 (TIME_OUT:= T#1S, IP_C:= IP_C, S_BUF:= S_BUF1, R_BUF:= R_BUF1);
		
		IF IP_C.ERROR &lt;&gt; 0  THEN
			Step:=666;
		END_IF
	666:
		LED_1_BrokerStatus(eID:=eLedID.AppLED_1, xOpen:=TRUE );
		LED_1_BrokerStatus.SetFlash(T#2S,eLedColor.Red, eLedColor.Off);
		IF IP_C.ERROR = 33554432  THEN
		MqttVariables.PLC_Device.SendLogMessage(CONCAT('ERROR|DMX has a connection error ', DWORD_TO_STRING(IP_C.ERROR)));
		
		END_IF;
		
		error_send := TRUE;
		R_BUF1.SIZE := 0;
		IP_C.C_ENABLE:= FALSE; (* Enable connection establishment *) 
		IP_C.TIME_RESET:= FALSE;
		init:=FALSE;
	ELSE
	  Step := 0;
END_CASE



// Check IP_C1.error
// 33554432 = 0x02000000
// Initialization of the socket interface failed (only WinNT).
// code = 0x 02 00 00 00 (hexadecimal)
//           !   !    ! 
//           !   !    Receive error 
//           !   Send error
//           Connect error
</xhtml>
                </ST>
              </body>
              <addData />
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="PRG_PING_DMX" pouType="program">
              <interface>
                <localVars>
                  <variable name="PingTime">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="DMXnodeReachable">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="LED_1_BrokerStatus">
                    <type>
                      <derived name="FbAppLED" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Ping the DMX artNet node *)
DMXnodeReachable := SysSockPing(szIPAddress:=DMXVariables.IP, ulTimeout:=500, pulReplyTime:= ADR(PingTime));

IF DMXnodeReachable = 0 THEN
	LED_1_BrokerStatus.SetStatic(eLedColor.Green);
// 	MqttVariables.MQTT_logger.send('DMX ping OK');
ELSIF DMXnodeReachable = 5 THEN
	LED_1_BrokerStatus.SetFlash(T#1S,eLedColor.Red, eLedColor.Off);
	MqttVariables.PLC_Device.SendLogMessage('DMX ping Error');
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
            <Libraries>
              <Library Name="#Standard" Namespace="Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Standard, * (System)" />
              <Library Name="#IecSfc" Namespace="IecSfc" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="IecSfc, 3.4.2.0 (System)" />
              <Library Name="#Analyzation" Namespace="Analyzation" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="Analyzation, 3.5.2.0 (System)">
                <Parameters>
                  <Parameter Name="TABLE_UPPER_BOUND" Value="15" />
                  <Parameter Name="STRING_LENGTH_EXP" Value="255" />
                  <Parameter Name="STRING_LENGTH_ADDRESS" Value="20" />
                  <Parameter Name="STRING_LENGTH_COMMENT" Value="255" />
                  <Parameter Name="STRING_LENGTH_OUTSTRING" Value="255" />
                  <Parameter Name="TABLE_SHOW_VALID_ITEMS" Value="FALSE" />
                </Parameters>
              </Library>
              <Library Name="#CDS_MemMan" Namespace="CMM" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="CDS_MemMan, 3.3.2.0 (3S - Smart Software Solutions GmbH)" />
              <Library Name="Element Collections, 3.5.14.0 (3S - Smart Software Solutions GmbH)" Namespace="COL" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="#IoStandard" Namespace="IoStandard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="true" DefaultResolution="IoStandard, 3.5.15.0 (System)" />
              <Library Name="#CAA Device Diagnosis" Namespace="DED" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="CAA Device Diagnosis, 3.5.15.0 (CAA Technical Workgroup)" />
              <Library Name="#WagoAppProcessorLoad" Namespace="WagoAppProcessorLoad" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoAppProcessorLoad, * (WAGO)" />
              <Library Name="#WagoSysKbusTerminalControl" Namespace="WagoSysKbusTerminalControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysKbusTerminalControl, 1.7.3.0 (WAGO)" />
              <Library Name="#WagoSysComInternal" Namespace="WagoSysCom_Internal" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysCom_Internal_PFC, 1.0.2.2 (WAGO)">
                <Parameters>
                  <Parameter Name="CUDIMAXCOMNUMBER" Value="32767" />
                </Parameters>
              </Library>
              <Library Name="#BreakpointLogging" Namespace="BPLog" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="Breakpoint Logging Functions, 3.5.5.0 (3S - Smart Software Solutions GmbH)" />
              <Library Name="#3SLicense" Namespace="_3S_LICENSE" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="3SLicense, 0.0.0.0 (3S - Smart Software Solutions GmbH)" ResolverGuid="97c3b452-d9fa-4ac2-9d0c-3d420aa6d95b" />
              <Library Name="#WagoSysStandard" Namespace="WagoSysStandard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoSysStandard, * (WAGO)" />
              <Library Name="#WagoTypesAppLED" Namespace="WagoTypesAppLED" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoTypesAppLED, * (WAGO)" />
              <Library Name="#WagoAppAppLED" Namespace="WagoAppAppLED" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoAppAppLED, * (WAGO)" />
              <Library Name="#WagoAppPlcModbus" Namespace="WagoAppPlcModbus" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoAppPlcModbus, * (WAGO)">
                <Parameters>
                  <Parameter Name="MAX_SERVER_BUFFERSIZE" Value="4096" />
                </Parameters>
              </Library>
              <Library Name="Util, 3.5.14.0 (System)" Namespace="Util" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
                <Parameters>
                  <Parameter Name="IBLOCKSIZE" Value="22800" />
                </Parameters>
              </Library>
              <Library Name="BASIC, 3.3.4.0 (OSCAT)" Namespace="OSCAT_BASIC" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="BUILDING, 1.0.0.1 (OSCAT)" Namespace="OSCAT_BUILDING" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Common Helper for development, 1.1.0.5 (Stefan Dreyer)" Namespace="CommonTypesAndFunctions" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="NETWORK, 1.3.5.3 (OSCAT)" Namespace="OSCAT_NETWORK" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="MQTT, 1.2.0.6 (Stefan Dreyer)" Namespace="MQTT" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="#WagoTypesEvent" Namespace="WagoTypesEvent" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoTypesEvent, * (WAGO)" />
              <Library Name="SysSocketAsync, 3.5.17.0 (System)" Namespace="SysSocketAsync" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="SysTarget, 3.5.17.0 (System)" Namespace="SysTarget" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="#SysSocket" Namespace="SysSocket" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysSocket, * (System)" />
              <Library Name="SM3_Shared, 4.9.0.0 (3S - Smart Software Solutions GmbH)" Namespace="SM0" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="PRO JSON, 1.0.0.15 (Pro Electric)" Namespace="PRO_JSON" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
                <Parameters>
                  <Parameter Name="MAX_LEVELS" Value="10" />
                  <Parameter Name="MAX_NAME_SIZE" Value="40" />
                  <Parameter Name="MAX_VALUE_SIZE" Value="80" />
                  <Parameter Name="MAX_VAR_NAME" Value="200" />
                  <Parameter Name="MAX_VARS" Value="1500" />
                  <Parameter Name="MAX_EXECUTION_TIME" Value="TIME#50ms" />
                  <Parameter Name="MAX_JSON_STRING" Value="20000" />
                  <Parameter Name="NEWLINE" Value="'$R$N'" />
                  <Parameter Name="INDENT" Value="'$T'" />
                  <Parameter Name="IGNORE_LEADING_CHAR" Value="'_'" />
                  <Parameter Name="ALLWAYSRESETDONE" Value="FALSE" />
                  <Parameter Name="APPLICATIONNAME" Value="'HomeAutomation'" />
                </Parameters>
              </Library>
              <Library Name="#WagoAppDALI" Namespace="WagoAppDALI" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoAppDALI, * (WAGO)">
                <Parameters>
                  <Parameter Name="MAX_RX_BUFFER" Value="300" />
                  <Parameter Name="MAX_MODULES" Value="25" />
                </Parameters>
              </Library>
              <Library Name="#WagoSysModule_753_647" Namespace="WagoSysModule_753_647" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysModule_753_647, * (WAGO)">
                <Parameters>
                  <Parameter Name="DEBUG_MODE" Value="FALSE" />
                </Parameters>
              </Library>
              <Library Name="#WagoSysKbusServices" Namespace="WagoSysKbusServices" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysKbusServices, * (WAGO)" />
              <addData />
            </Libraries>
          </data>
        </addData>
      </resource>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
      <Libraries>
        <Library Name="#System_VisuElems" Namespace="VisuElems" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElems, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemMeter" Namespace="VisuElemMeter" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemMeter, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsSpecialControls" Namespace="VisuElemsSpecialControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsSpecialControls, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsWinControls" Namespace="VisuElemsWinControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsWinControls, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTextEditor" Namespace="VisuElemTextEditor" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTextEditor, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTrace" Namespace="VisuElemTrace" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTrace, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuNativeControl" Namespace="VisuNativeControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuNativeControl, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsAlarm" Namespace="VisuElemsAlarm" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsAlarm, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemCamDisplayer" Namespace="VisuElemCamDisplayer" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemCamDisplayer, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElem3DPath" Namespace="VisuElem3DPath" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElem3DPath, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsDateTime" Namespace="VisuElemsDateTime" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsDateTime, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemXYChart" Namespace="VisuElemXYChart" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemXYChart, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#system_visuinputs" Namespace="visuinputs" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="visuinputs, 3.5.17.0 (system)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <addData />
      </Libraries>
    </data>
  </addData>
</project>