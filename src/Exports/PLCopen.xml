<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="WAGO" productName="e!COCKPIT" productVersion="e!COCKPIT" creationDateTime="2023-01-23T21:41:38.8214787" />
  <contentHeader name="HomeAutomation_Arup.ecp" modificationDateTime="2023-01-23T21:30:54.986742">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="COVER_STATES">
        <baseType>
          <enum>
            <values>
              <value name="Idle" />
              <value name="Auto" />
              <value name="Manual" />
              <value name="Prio_up" />
              <value name="Prio_dn" />
              <value name="Calibrate_up" />
              <value name="Calibrate_dn" />
            </values>
          </enum>
        </baseType>
        <addData />
      </dataType>
      <dataType name="DIMMER_CURVE">
        <baseType>
          <enum>
            <values>
              <value name="linear" />
              <value name="logarithmic" />
              <value name="cubic" />
            </values>
          </enum>
        </baseType>
        <addData />
      </dataType>
      <dataType name="HA_DISCOVER">
        <baseType>
          <struct>
            <variable name="name">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> baseTopic: JSONVAR; //~ </xhtml>
              </documentation>
            </variable>
            <variable name="dev_cla">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">device_class</xhtml>
              </documentation>
            </variable>
            <variable name="obj_id">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object_id</xhtml>
              </documentation>
            </variable>
            <variable name="uniq_id">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">unique_id</xhtml>
              </documentation>
            </variable>
            <variable name="ic">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> icon</xhtml>
              </documentation>
            </variable>
            <variable name="stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_on">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload_on</xhtml>
              </documentation>
            </variable>
            <variable name="pl_off">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload_off</xhtml>
              </documentation>
            </variable>
            <variable name="bri_stat_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">brightness_state_topic</xhtml>
              </documentation>
            </variable>
            <variable name="cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">command_topic</xhtml>
              </documentation>
            </variable>
            <variable name="bri_cmd_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> brightness_command_topic</xhtml>
              </documentation>
            </variable>
            <variable name="bri_scl">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">brightness_scale</xhtml>
              </documentation>
            </variable>
            <variable name="opt">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">  optimistic</xhtml>
              </documentation>
            </variable>
            <variable name="on_cmd_type">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">on_command_type</xhtml>
              </documentation>
            </variable>
            <variable name="avty_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">availability_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pl_avail">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload_available</xhtml>
              </documentation>
            </variable>
            <variable name="pl_not_avail">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload_not_available</xhtml>
              </documentation>
            </variable>
            <variable name="exp_aft">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">expire_after</xhtml>
              </documentation>
            </variable>
            <variable name="pl_open">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_open</xhtml>
              </documentation>
            </variable>
            <variable name="pl_cls">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_close</xhtml>
              </documentation>
            </variable>
            <variable name="pl_stop">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> payload_stop</xhtml>
              </documentation>
            </variable>
            <variable name="pos_clsd">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> position_closed</xhtml>
              </documentation>
            </variable>
            <variable name="pos_open">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> position_open</xhtml>
              </documentation>
            </variable>
            <variable name="set_pos_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> set_position_topic</xhtml>
              </documentation>
            </variable>
            <variable name="pos_t">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> position_topic</xhtml>
              </documentation>
            </variable>
            <variable name="dmxChannel">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> dmx metadata:</xhtml>
              </documentation>
            </variable>
            <variable name="dmxWith">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
            <variable name="dmxUniverse">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
            <variable name="meta">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> extra metadata</xhtml>
              </documentation>
            </variable>
            <variable name="dev">
              <type>
                <derived name="HA_DISCOVER_DEVICE" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="HA_DISCOVER_DEVICE">
        <baseType>
          <struct>
            <variable name="name">
              <type>
                <derived name="JSONVAR" />
              </type>
            </variable>
            <variable name="cu">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration_url</xhtml>
              </documentation>
            </variable>
            <variable name="ids">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">identifiers</xhtml>
              </documentation>
            </variable>
            <variable name="mf">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">manufacturer</xhtml>
              </documentation>
            </variable>
            <variable name="mdl">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">model</xhtml>
              </documentation>
            </variable>
            <variable name="sw">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">sw_version</xhtml>
              </documentation>
            </variable>
            <variable name="hw">
              <type>
                <derived name="JSONVAR" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">hw_version</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="MQTT_MESSAGE">
        <baseType>
          <struct>
            <variable name="Payload">
              <type>
                <string length="1500" />
              </type>
            </variable>
            <variable name="Topic">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="Qos">
              <type>
                <derived name="MQTT.QoS" />
              </type>
            </variable>
            <variable name="MqttRetain">
              <type>
                <BOOL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="RS485_EASTRON_SDM_Devices">
        <baseType>
          <enum>
            <values>
              <value name="SDM120" />
              <value name="SDM220" />
              <value name="SDM630" />
            </values>
          </enum>
        </baseType>
        <addData />
      </dataType>
      <dataType name="RS485_RtuQuery">
        <baseType>
          <struct>
            <variable name="DeviceId">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="FunctionCode">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="ReadAddress">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="ReadQuantity">
              <type>
                <UINT />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="VIRTUAL_MODES">
        <baseType>
          <enum>
            <values>
              <value name="Input" />
              <value name="Output" />
            </values>
          </enum>
        </baseType>
        <addData />
      </dataType>
    </dataTypes>
    <pous>
      <pou name="_RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DIR">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> true = up </xhtml>
              </documentation>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="TR">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="RMP">
              <type>
                <BYTE />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tl">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="last_dir">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="start">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* read system timer *)
tx := DWORD_TO_TIME(OSCAT_BASIC.T_PLC_MS());

IF E AND init AND (dir = last_dir) AND (RMP &lt;&gt; SEL(DIR, 0, 255)) AND TR = tn THEN
	RMP := OSCAT_BASIC.FRMP_B(start, DIR, tx - tl, TR);
ELSE
	init := TRUE;
	tl := tx;
	tn := tr;
	start := RMP;
END_IF;
last_dir := dir;



(* revison history
hm	22. oct. 2008	rev 1.0
	original version

hm	20. nov. 2008	rev 1.1
	set default for E to be TRUE
	added init

hm	19. nov. 2011	rev 1.2
	new code
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetRMP">
              <interface>
                <inputVars>
                  <variable name="RMP">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*THIS^.RMP:=RMP;*)
THIS^.Start:=RMP;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="BLIND_ACTUATOR" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="T_UD">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10s0ms" />
              </initialValue>
            </variable>
            <variable name="T_ANGLE">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#3s0ms" />
              </initialValue>
            </variable>
            <variable name="T_LOCKOUT">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#100ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="POS">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="ANG">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="QU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="QD">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="position">
              <type>
                <derived name="RMP_B" />
              </type>
            </variable>
            <variable name="angle">
              <type>
                <derived name="RMP_B" />
              </type>
            </variable>
            <variable name="lock">
              <type>
                <derived name="OSCAT_BASIC.INTERLOCK" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* make sure only one motor is active at a given time *)
lock(i1 := UP, I2 := DN, TL := T_lockout);

(* ramp up or down to simulate the angle position of the blind slats *)
angle(e := lock.Q1 OR lock.Q2, UP := lock.Q1, PT := T_Angle);
position(e := lock.Q1 AND angle.high OR lock.Q2 AND angle.low, up := lock.Q1, PT := T_UD);

(* set the outputs *)
pos := position.Out;
ang := angle.Out;

(* set the outputs *)
QU := lock.Q1;
QD := lock.Q2;

(* set the status output *)
IF UP AND DN THEN
	 status := 1;			(* error up and down together are not allowed *)
ELSIF UP THEN
	status := 121;
ELSIF DN THEN
	status := 122;
ELSE
	status := S_IN;
END_IF;


(* revision history
hm	29. sep 2007	rev 1.0
	original release

hm	6. oct 2007	rev 1.1
	rearanged outputs

hm	18. oct. 2008	rev 1.2
	changed calls for rmp_B because of change in RMP_B

hm	27. jul. 2009	rev 1.3
	changes status to be 12X

ae	08. mar. 2010 rev 1.4	
	at aPosition

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetPOS">
              <interface>
                <inputVars>
                  <variable name="POS">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.POS:=POS;
THIS^.position.SetRMP(POS);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="CALC_COVER_STATE" pouType="function">
        <interface>
          <returnType>
            <derived name="COVER_STATES" />
          </returnType>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_LOCK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="POS">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="MqttRequestAuto">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttRequestStop">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttRequestCalibrateUp">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttRequestCalibrateDn">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="CurrentState">
              <type>
                <derived name="COVER_STATES" />
              </type>
            </variable>
            <variable name="StateTimer">
              <type>
                <pointer>
                  <baseType>
                    <derived name="TOF" />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="NewState">
              <type>
                <derived name="COVER_STATES" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF PRIO_LOCK THEN
	NewState := COVER_STATES.Idle;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF PRIO_UP THEN
	NewState := COVER_STATES.Prio_up;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF PRIO_DN THEN
	NewState := COVER_STATES.Prio_dn;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF UP OR DN THEN
	NewState := COVER_STATES.Manual;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF MqttRequestStop^ THEN
	NewState := COVER_STATES.Idle;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF MqttRequestAuto^ AND PI &lt;&gt; POS THEN
	NewState := COVER_STATES.Auto;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF MqttRequestAuto^ AND PI = POS THEN
	NewState := COVER_STATES.Idle;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF MqttRequestCalibrateUp^ THEN
	NewState := COVER_STATES.Calibrate_up;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSIF MqttRequestCalibrateDn^ THEN
	NewState := COVER_STATES.Calibrate_dn;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
ELSE
	NewState := COVER_STATES.Idle;
	MqttRequestAuto^ := FALSE;
	MqttRequestStop^ := FALSE;
	MqttRequestCalibrateUp^ := FALSE;
	MqttRequestCalibrateDn^ := FALSE;
END_IF

IF NewState &lt;&gt; CurrentState THEN
	//Reset StateTimer
	StateTimer^.IN:=TRUE;
END_IF

CALC_COVER_STATE := NewState;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="FB_HomeAssistant_DEVICE" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="name">
              <type>
                <string />
              </type>
            </variable>
            <variable name="cu">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration_url</xhtml>
              </documentation>
            </variable>
            <variable name="cns">
              <type>
                <array>
                  <dimension lower="1" upper="2" />
                  <baseType>
                    <array>
                      <dimension lower="1" upper="2" />
                      <baseType>
                        <string />
                      </baseType>
                    </array>
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">connections </xhtml>
              </documentation>
            </variable>
            <variable name="ids">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">identifiers</xhtml>
              </documentation>
            </variable>
            <variable name="mf">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">manufacturer</xhtml>
              </documentation>
            </variable>
            <variable name="mdl">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">model</xhtml>
              </documentation>
            </variable>
            <variable name="sw">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">sw_version</xhtml>
              </documentation>
            </variable>
            <variable name="hw">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">hw_version</xhtml>
              </documentation>
            </variable>
            <variable name="ip">
              <type>
                <string />
              </type>
            </variable>
            <variable name="mac">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sAppName">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'Application'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> must identic to the name in the device tree</xhtml>
              </documentation>
            </variable>
            <variable name="iecResult">
              <type>
                <derived name="RTS_IEC_RESULT" />
              </type>
            </variable>
            <variable name="xInit">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="pApp">
              <type>
                <pointer>
                  <baseType>
                    <derived name="CmpApp.APPLICATION" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="stAppInfo">
              <type>
                <derived name="CmpApp.APPLICATION_INFO" />
              </type>
            </variable>
            <variable name="pstAppInfo">
              <type>
                <pointer>
                  <baseType>
                    <derived name="CmpApp.APPLICATION_INFO" />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="ADR(stAppInfo)" />
              </initialValue>
            </variable>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="availabilityTopic">
              <type>
                <string />
              </type>
            </variable>
            <variable name="availabilityOnline">
              <type>
                <string />
              </type>
            </variable>
            <variable name="availabilityOffline">
              <type>
                <string />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initDevice">
              <interface>
                <inputVars>
                  <variable name="url">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="availabilityTopic">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="availabilityOnline">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="'online'" />
                    </initialValue>
                  </variable>
                  <variable name="availabilityOffline">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="'offline'" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                        <Attributes>
                          <Attribute Name="noinit" />
                          <Attribute Name="instance-path" Value="" />
                        </Attributes>
                      </data>
                    </addData>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
                    </documentation>
                  </variable>
                  <variable name="Author">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="iSplitLocation">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="AdapterInfo">
                    <type>
                      <derived name="SOCK_ADAPTER_INFORMATION" />
                    </type>
                  </variable>
                  <variable name="hAdapter">
                    <type>
                      <derived name="RTS_IEC_HANDLE" />
                    </type>
                  </variable>
                  <variable name="udiStructSize">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(AdapterInfo)" />
                    </initialValue>
                  </variable>
                  <variable name="rResult">
                    <type>
                      <derived name="RTS_IEC_RESULT" />
                    </type>
                  </variable>
                  <variable name="sIpAddr">
                    <type>
                      <string length="15" />
                    </type>
                  </variable>
                  <variable name="sMacAddr">
                    <type>
                      <string length="17" />
                    </type>
                  </variable>
                  <variable name="xFirstAdapter">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xReadInfo">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="xRead">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="iecResult">
                    <type>
                      <derived name="SysTypes.RTS_IEC_RESULT" />
                    </type>
                  </variable>
                  <variable name="dwType">
                    <type>
                      <DWORD />
                    </type>
                  </variable>
                  <variable name="dwTargetId">
                    <type>
                      <DWORD />
                    </type>
                  </variable>
                  <variable name="wsDeviceName">
                    <type>
                      <wstring />
                    </type>
                  </variable>
                  <variable name="wsDev">
                    <type>
                      <DINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(wsDeviceName)" />
                    </initialValue>
                  </variable>
                  <variable name="udiProcessorId">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiOsId">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="sSerialNumber">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="psSerialNumber">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <initialValue>
                      <simpleValue value="ADR(sSerialNumber)" />
                    </initialValue>
                  </variable>
                  <variable name="diSerialNumber">
                    <type>
                      <DINT />
                    </type>
                    <initialValue>
                      <simpleValue value="SIZEOF(sSerialNumber)" />
                    </initialValue>
                  </variable>
                  <variable name="xInit">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF xInit THEN
    xInit := FALSE;
	
	THIS^.availabilityTopic := availabilityTopic;
	THIS^.availabilityOnline := availabilityOnline;
	THIS^.availabilityOffline := availabilityOffline;
	
	
    xFirstAdapter := TRUE;
    rResult := 0;
    WHILE rResult = 0 DO   
        IF xFirstAdapter THEN
            hAdapter := SysSockGetFirstAdapterInfo(ADR(AdapterInfo), ADR(udiStructSize), ADR(rResult));
        ELSE   
            hAdapter := SysSockGetNextAdapterInfo(hAdapter, ADR(AdapterInfo), ADR(udiStructSize), ADR(rResult));
        END_IF
        IF rResult = 0 THEN
            sIpAddr := Standard.CONCAT(BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b1),'.');
            sIpAddr := Standard.CONCAT(sIpAddr,BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b2));
            sIpAddr := Standard.CONCAT(sIpAddr,'.');
            sIpAddr := Standard.CONCAT(sIpAddr,BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b3));
            sIpAddr := Standard.CONCAT(sIpAddr,'.');
            sIpAddr := Standard.CONCAT(sIpAddr,BYTE_TO_STRING(AdapterInfo.IpAddr.S_un_b.s_b4));
            sMacAddr := Standard.CONCAT(SM0.Byte_To_HexString(AdapterInfo.abyMac[0]),'-');
            sMacAddr := Standard.CONCAT(sMacAddr,SM0.Byte_To_HexString(AdapterInfo.abyMac[1]));
            sMacAddr := Standard.CONCAT(sMacAddr,'-');
            sMacAddr := Standard.CONCAT(sMacAddr,SM0.Byte_To_HexString(AdapterInfo.abyMac[2]));
            sMacAddr := Standard.CONCAT(sMacAddr,'-');
            sMacAddr := Standard.CONCAT(sMacAddr,SM0.Byte_To_HexString(AdapterInfo.abyMac[3]));
            sMacAddr := Standard.CONCAT(sMacAddr,'-');
            sMacAddr := Standard.CONCAT(sMacAddr,SM0.Byte_To_HexString(AdapterInfo.abyMac[4]));
            sMacAddr := Standard.CONCAT(sMacAddr,'-');
            sMacAddr := Standard.CONCAT(sMacAddr,SM0.Byte_To_HexString(AdapterInfo.abyMac[5]));
        END_IF
        xFirstAdapter := FALSE;   
    END_WHILE


 
    //  Control WinV3: 4096 - 0000 0001
    iecResult := SysTarget.SysTargetGetType(pulType := ADR(dwType));
    iecResult := SysTarget.SysTargetGetId(pulTargetId := ADR(dwTargetId));
 
    iecResult := SysTarget.SysTargetGetDeviceName(pwszName := ADR(wsDeviceName), pnMaxLength := ADR(wsDev));
 
 
    //Unique RT identifier
    iecResult := SysTarget.SysTargetGetSerialNumber(ppsSerialNumber := ADR(psSerialNumber), pnMaxLen := ADR(diSerialNumber));

	
    pApp := AppFindApplicationByName(pszString := sAppName, pResult := ADR(iecResult));   
    pstAppInfo := AppGetApplicationInfo(pApp := pApp, pResult := ADR(iecResult));   
		//         MqttVariables.version := pstAppInfo^.pstVersion^;
		//         MqttVariables.desc := pstAppInfo^.pstDescription^;

    IF iecResult = 0 THEN
		
		iSplitLocation := COL.Stu.StrFindA(
			pst1:= ADR(THIS^.InstanceName), 
			pst2:= ADR('.'), 
			uiSearchStart:= 1
		) - 1;
	
	
		IF CommonTypesAndFunctions.StrEquals(str1:= ADR(pstAppInfo^.pstAuthor), str2:= ADR('')) THEN
			Author := 'MichielVanwelsenaere et al.';
		ELSE
			Author := pstAppInfo^.pstAuthor^; // 'DIMMER_GND_HALL_01'
		END_IF	
		
	
		
		THIS^.name :=LEFT(THIS^.InstanceName,iSplitLocation);
		THIS^.cu:=url; //configuration_url
		THIS^.ids:=psSerialNumber^;//pstAppInfo^.pstProjectName^;//identifiers
		THIS^.mf:=Author; //manufacturer
		THIS^.mdl:=pstAppInfo^.pstDescription^; //model
		THIS^.sw:=CONCAT(CONCAT( DT_TO_STRING(pstAppInfo^.dtLastChanges),' '), pstAppInfo^.pstProjectName^); //sw_version
		THIS^.hw:= WSTRING_TO_STRING(wsDeviceName); //hw_version
		THIS^.ip := sIpAddr;
		THIS^.mac := sMacAddr;
			
// 		// input
// 		THIS^.device.cu.CharString := THIS^.cu;
// 		THIS^.device.name.CharString := THIS^.name ;
// 		THIS^.device.ids.CharString := THIS^.ids; // e.g. homeautomation_arup
// 		THIS^.device.sw.CharString :=  THIS^.sw; // e.g last date
// 		THIS^.device.hw.CharString := THIS^.hw;
// 		THIS^.device.mdl.CharString := THIS^.mdl;
// 		THIS^.device.mf.CharString := THIS^.mf;


    END_IF
END_IF



</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_INPUT_BINARYSENSOR_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="BS">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Follows the input but debounced </xhtml>
              </documentation>
            </variable>
            <variable name="EVENT">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Event outputs only high for on clock cycle </xhtml>
              </documentation>
            </variable>
            <variable name="EVENT_R">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="EVENT_F">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="FB_DEBOUNCE">
              <type>
                <derived name="OSCAT_BUILDING.DEBOUNCE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> to debounce the physical input </xhtml>
              </documentation>
            </variable>
            <variable name="FB_R_TRIG">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> to detect a rising edge on the debounced signal </xhtml>
              </documentation>
            </variable>
            <variable name="FB_F_TRIG">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> to detect a falling edge on the debounced signal </xhtml>
              </documentation>
            </variable>
            <variable name="T_TurnOffDelay">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#0ms" />
              </initialValue>
            </variable>
            <variable name="FB_TurnOffDelayTimer">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DEBOUNCE(IN := BS,	
	TD := T#50MS, (* 2x cyle + 10ms *)
	PM := FALSE
	);
	
FB_TurnOffDelayTimer(IN:=FB_DEBOUNCE.Q,
	PT := T_TurnOffDelay,
	Q=&gt;Q
	);

FB_R_TRIG(CLK := FB_TurnOffDelayTimer.Q);
FB_F_TRIG(CLK := FB_TurnOffDelayTimer.Q);

EVENT := FB_R_TRIG.Q OR FB_F_TRIG.Q;
EVENT_R := FB_R_TRIG.Q;
EVENT_F := FB_F_TRIG.Q;

IF (FB_R_TRIG.Q OR (Startup AND FB_DEBOUNCE.Q)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'ON',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
	Startup:=FALSE;	
END_IF

IF (FB_F_TRIG.Q OR (Startup AND NOT(FB_DEBOUNCE.Q))) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'OFF',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
	Startup:=FALSE;	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_TurnOffDelay">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_TurnOffDelay:=T_TurnOffDelay;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_INPUT_PUSHBUTTON_DIMMER_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PB">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DIM">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="DBL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SINGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DOUBLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_LONG">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="FB_DIMMER">
              <type>
                <derived name="OSCAT_BUILDING.DIMM_I" />
              </type>
            </variable>
            <variable name="OutputDimmer">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Qos_Dimm">
              <type>
                <derived name="MQTT.QoS" />
              </type>
            </variable>
            <variable name="Delta_Dimm">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="FB_DETECTPUSH">
              <type>
                <derived name="OSCAT_BUILDING.CLICK_MODE" />
              </type>
            </variable>
            <variable name="P_LONG_R_TRIG">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
            </variable>
            <variable name="P_LONG_F_TRIG">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
            </variable>
            <variable name="PreviousDim">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Vars to detect statechanges on outputs </xhtml>
              </documentation>
            </variable>
            <variable name="PreviousQ">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousDBL">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="T_Debounce">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
            <variable name="T_Reconfig">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10s0ms" />
              </initialValue>
            </variable>
            <variable name="T_On_Max">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#0ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm_Start">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#3s0ms" />
              </initialValue>
            </variable>
            <variable name="Min_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="50" />
              </initialValue>
            </variable>
            <variable name="Max_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
            </variable>
            <variable name="Soft_Dimm">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="Dbl_Toggle">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Rst_Out">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="T_Long">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DIMMER(
	IN:= PB,
	SET:= SET,
	VAL:= VAL,
	RST:= RST,
	OUT:= DIM,
	T_DEBOUNCE:= T_Debounce,
	T_RECONFIG:= T_Reconfig,
	T_ON_MAX:= T_On_Max,
	T_DIMM_START:= T_Dimm_Start,
	T_DIMM:= T_Dimm,
	MIN_ON:= Min_On,
	MAX_ON:= Max_On,
	SOFT_DIMM:= Soft_Dimm,
	DBL_TOGGLE:= Dbl_Toggle,
	RST_OUT:= Rst_Out,
	Q=&gt; Q,
	DBL=&gt; DBL);
	
FB_DETECTPUSH(
	IN:= PB, 	
	SINGLE=&gt; SINGLE, 
	DOUBLE=&gt; DOUBLE, 
	TP_LONG=&gt; LONG, 
	T_LONG:= T_long);
	
P_LONG_R_TRIG(CLK:=FB_DETECTPUSH.LONG);
P_LONG_F_TRIG(CLK:=FB_DETECTPUSH.LONG);
	
IF (ABS(BYTE_TO_INT(PreviousDim) - BYTE_TO_INT(DIM)) &gt;= Delta_Dimm OR PB = FALSE) AND DIM &lt;&gt; PreviousDim AND OutputDimmer AND InitMqttDone  THEN
	PreviousDim:=DIM;
	pMqttPublishQueue^.AddMessage(		
		Payload := BYTE_TO_STRING(DIM),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/DIM'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DIMMER.Q &lt;&gt; PreviousQ AND InitMqttDone THEN
	PreviousQ:=FB_DIMMER.Q;
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FB_DIMMER.Q),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/Q'),
		Qos := Qos_Dimm,
		MqttRetain := TRUE
	);
END_IF

IF FB_DIMMER.DBL &lt;&gt; PreviousDBL AND InitMqttDone THEN
	PreviousDBL:=FB_DIMMER.DBL;
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FB_DIMMER.DBL),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/DBL'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF

IF FB_DETECTPUSH.SINGLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'SINGLE',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.DOUBLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'DOUBLE',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.TP_LONG AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'LONG',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF (P_LONG_R_TRIG.Q OR P_LONG_F_TRIG.Q) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FB_DETECTPUSH.LONG),
		Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),'/P_LONG'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_Debounce">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                  <variable name="T_Reconfig">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_On_Max">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_Dimm_Start">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_Dimm">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Min_On">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="Max_On">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="Soft_Dimm">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Dbl_Toggle">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Rst_Out">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="T_Long">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_Debounce:=T_Debounce;
THIS^.T_Reconfig:=T_Reconfig;
THIS^.T_On_Max:=T_On_Max;
THIS^.T_Dimm_Start:=T_Dimm_Start;
THIS^.T_Dimm:=T_Dimm;
THIS^.Min_On:=Min_On;
THIS^.Max_On:=Max_On;

THIS^.T_Long:=T_Long;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="OutputDimmer">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Qos_Dimm">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="Delta_Dimm">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

THIS^.OutputDimmer:=OutputDimmer;
THIS^.Qos_Dimm:=Qos_Dimm;
THIS^.Delta_Dimm:=Delta_Dimm;

InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_INPUT_PUSHBUTTON_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PB">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="SINGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DOUBLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_LONG">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="FB_DETECTPUSH">
              <type>
                <derived name="OSCAT_BUILDING.CLICK_MODE" />
              </type>
            </variable>
            <variable name="P_LONG_R_TRIG">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
            </variable>
            <variable name="P_LONG_F_TRIG">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
            </variable>
            <variable name="T_Long">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FB_DETECTPUSH(
	IN:= PB, 	
	SINGLE=&gt; SINGLE, 
	DOUBLE=&gt; DOUBLE, 
	TP_LONG=&gt; LONG, 
	LONG=&gt; P_LONG,
	T_LONG:= T_Long);
	
P_LONG_R_TRIG(CLK:=FB_DETECTPUSH.LONG);
P_LONG_F_TRIG(CLK:=FB_DETECTPUSH.LONG);
	
IF FB_DETECTPUSH.SINGLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'SINGLE',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.DOUBLE AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'DOUBLE',
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF FB_DETECTPUSH.TP_LONG AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'LONG',
		Topic := MQTTPublishTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF

IF P_LONG_F_TRIG.Q AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := 'RELEASED',
		Topic := MQTTPublishTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := FALSE
	);
END_IF



IF (P_LONG_R_TRIG.Q OR P_LONG_F_TRIG.Q) AND InitMqttDone THEN
	

	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FB_DETECTPUSH.LONG),
		Topic := CONCAT(MQTTPublishTopic,'/P_LONG'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_Long">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_Long:=T_Long;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
SUPER^.InitBaseMqtt();
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:button-pointer'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="expire_after">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DI_PB_003'
	ELSE
		HADiscoverID := overruleId; // 'MY_PH_GND_HALL_01'
	END_IF

	// PB specific
	HADiscoverIDEntity := 'sensor';
	//HADiscoveryObj.dev_cla.CharString :=  'sensor';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	HADiscoveryObj.exp_aft.Number :=  expire_after;
	
	

	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MQTT_BASE" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="_InstancePath">
              <type>
                <string />
              </type>
            </variable>
            <variable name="InstanceNamePt">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="DeviceName">
              <type>
                <string />
              </type>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Publish (Out);</xhtml>
              </documentation>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="MQTTPublishTopic">
              <type>
                <string length="100" />
              </type>
            </variable>
            <variable name="MqttSubscribeTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Subscribe (In)</xhtml>
              </documentation>
            </variable>
            <variable name="MqttSubscribeTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="MQTTSubscribeTopic">
              <type>
                <string length="100" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttHighRequest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttLowRequest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttQos">
              <type>
                <derived name="MQTT.QoS" />
              </type>
              <initialValue>
                <simpleValue value="MQTT.QoS.AtLeastOnce" />
              </initialValue>
            </variable>
            <variable name="MqttRetain">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="ComposeJSON">
              <type>
                <derived name="STRUCT_TO_JSON" />
              </type>
            </variable>
            <variable name="HADiscoveryObj">
              <type>
                <derived name="HA_DISCOVER" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> HA Discovery specific </xhtml>
              </documentation>
            </variable>
            <variable name="HADiscoverID">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="HADiscoverIDEntity">
              <type>
                <string length="10" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitBaseMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:lightbulb'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="baseUrl">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">

MqttTopic := CONCAT(CONCAT(CONCAT(CONCAT(MqttHADiscoveryPrefix^, HADiscoverIDEntity),'/'), HADiscoverID),'/config' );

// 	//THIS^.MqttObj.baseTopic.CharString :=  baseUrl;
THIS^.HADiscoveryObj.name.CharString :=  name; // friendly name
THIS^.HADiscoveryObj.obj_id.CharString :=  HADiscoverID; 
THIS^.HADiscoveryObj.uniq_id.CharString :=  HADiscoverID; 
THIS^.HADiscoveryObj.ic.CharString :=  icon;


// Device related
THIS^.HADiscoveryObj.avty_t.CharString :=  Device.availabilityTopic;
THIS^.HADiscoveryObj.pl_avail.CharString :=   Device.availabilityOnline;
THIS^.HADiscoveryObj.pl_not_avail.CharString :=  Device.availabilityOffline;

THIS^.HADiscoveryObj.dev.cu.CharString := Device.cu;
THIS^.HADiscoveryObj.dev.name.CharString := Device.name;
THIS^.HADiscoveryObj.dev.hw.CharString := Device.hw;
THIS^.HADiscoveryObj.dev.ids.CharString := Device.ids;
THIS^.HADiscoveryObj.dev.sw.CharString := Device.sw;
THIS^.HADiscoveryObj.dev.mdl.CharString := Device.mdl;
THIS^.HADiscoveryObj.dev.mf.CharString := Device.mf;


IF THIS^.HADiscoveryObj.exp_aft.Number = 0 THEN // Only value that cant be None
	THIS^.HADiscoveryObj.exp_aft.Number := 0;
END_IF



	
// Extra meta-data
IF NOT CommonTypesAndFunctions.StrEquals(str1:= ADR(meta), str2:= ADR('')) THEN
	THIS^.HADiscoveryObj.meta.CharString := meta;
END_IF

THIS^.ComposeJSON(
	JSONString:= ADR(MqttJSON), 
	JSONStringSize:= SIZEOF(MqttJSON),
	JSONVars:= ADR(THIS^.HADiscoveryObj),
	NumberOfVars:= SIZEOF(THIS^.HADiscoveryObj) / SIZEOF(JSONVAR),
	MaxLevel := 1,
);
THIS^.ComposeJSON.Execute := TRUE;
IF HADiscoverIDEntity = '' THEN
	Mqttvariables.MQTT_logger.send(str:=CONCAT(CONCAT('ERROR ',HADiscoverID), ' had empty MQTTDiscoverIDEntity'), instance := InstanceNamePt^);
ELSIF HADiscoverIDEntity = '' THEN
	Mqttvariables.MQTT_logger.send(str:=CONCAT(CONCAT('ERROR ',HADiscoverID), ' had empty MQTTDiscoverIDEntity'), instance := InstanceNamePt^);
ELSIF NOT (MqttJSON = '') THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= MqttJSON,
		Topic := MqttTopic,
		Qos := MqttQos,
		MqttRetain := MqttRetain,
	);
	Mqttvariables.MQTT_logger.send(str:=CONCAT(CONCAT('Added ',HADiscoverID), ' as HA dicovery'), instance := InstanceNamePt^);
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitBaseMqtt">
              <interface>
                <localVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
(*Define instance names*)
InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(_InstancePath)) + 1;

DeviceName := LEFT(_InstancePath,find(_InstancePath, '.' )-1  ) ;

// Publish (Out);
IF	NOT CommonTypesAndFunctions.StrEquals(ADR(MqttPublishTopicPrefix),ADR('')) THEN
	THIS^.MqttPublishTopicSuffix := InstanceNamePt^;
	THIS^.MQTTPublishTopic := CONCAT(MqttPublishTopicPrefix^, THIS^.MqttPublishTopicSuffix);
END_IF

// Subscribe (In)
IF	NOT CommonTypesAndFunctions.StrEquals(ADR(MqttSubscribeTopicPrefix),ADR('')) THEN
	THIS^.MQTTSubscribeTopicSuffix := InstanceNamePt^;
	THIS^.MQTTSubscribeTopic := CONCAT(MqttSubscribeTopicPrefix^ ,THIS^.MQTTSubscribeTopicSuffix);
END_IF

InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MQTT_LOG" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'.plc_log'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> should have a dot in the name</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
              </Inheritance>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                    <initialValue>
                      <simpleValue value="MQTT.QoS.ExactlyOnce" />
                    </initialValue>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

THIS^.MqttQos := MqttQos;
THIS^.MqttRetain := MqttRetain;

SUPER^.InitBaseMqtt();</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="send">
              <interface>
                <inputVars>
                  <variable name="str">
                    <type>
                      <string length="128" />
                    </type>
                  </variable>
                  <variable name="instance">
                    <type>
                      <string />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload:= CONCAT(CONCAT(instance,' | '),str),
		Topic := THIS^.MQTTPublishTopic,
		Qos := 1,
		MqttRetain := TRUE
	);
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:file-document-alert'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'plc_log'" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'plc_log'" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 
	ELSE
		HADiscoverID := overruleId; //
	END_IF

	// Light specific
	HADiscoverIDEntity := 'sensor';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MqttPublishQueue" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="EMPTY">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FULL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="localMessage">
              <type>
                <derived name="MQTT_MESSAGE" />
              </type>
            </variable>
            <variable name="fifo">
              <type>
                <array>
                  <dimension lower="0" upper="n" />
                  <baseType>
                    <derived name="MQTT_MESSAGE" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="pr">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pw">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="n">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1024" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> changing this value will chage the number of stored elements in the fifo </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Reset">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">pw := pr;
FULL := FALSE;
EMPTY := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="AddMessage">
              <interface>
                <inputVars>
                  <variable name="Payload">
                    <type>
                      <string length="1500" />
                    </type>
                  </variable>
                  <variable name="Topic">
                    <type>
                      <string length="128" />
                    </type>
                  </variable>
                  <variable name="Qos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT FULL THEN
	localMessage.Payload := Payload;
	localMessage.Topic := Topic;
	localMessage.Qos := Qos;
	localMessage.MqttRetain := MqttRetain;
	fifo[pw] := localMessage;
	pw := OSCAT_BASIC.INC1(pw,n);
	FULL := pw = pr;
	EMPTY := FALSE;
END_IF;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetMessage">
              <interface>
                <returnType>
                  <derived name="MQTT_MESSAGE" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT EMPTY THEN
	GetMessage := fifo[pr];
	pr := OSCAT_BASIC.INC1(pr,n);
	EMPTY := pr = pw;
	FULL := FALSE;
END_IF;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_MqttPublishWorker" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="SendDone">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="LocalMqttMessage">
              <type>
                <derived name="MQTT_MESSAGE" />
              </type>
            </variable>
            <variable name="InitDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RequestToSend">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Send">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="publish">
              <type>
                <derived name="MQTT.MQTTPublish" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//need to call publish here because of FB nums
publish(
	Topic:= ADR(LocalMqttMessage.Topic), 
	PayloadString:= ADR(LocalMqttMessage.Payload), 
	PublishAsString:= TRUE, 
	QoSIn:= LocalMqttMessage.Qos, 
	MRetain:= LocalMqttMessage.MqttRetain, 
	send:= Send);
	
IF NOT InitDone THEN RETURN; END_IF

IF RequestToSend THEN
	Send := TRUE;
	SendDone := FALSE;
END_IF

IF publish.done THEN
	 SendDone := TRUE;
	 RequestToSend:=FALSE;
	 Send:=FALSE;
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishMessage">
              <interface>
                <inputVars>
                  <variable name="MqttMessage">
                    <type>
                      <derived name="MQTT_MESSAGE" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">LocalMqttMessage := MqttMessage;

RequestToSend:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init">
              <interface>
                <inputVars>
                  <variable name="inputMQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Pointer MQTTT exchange strucure</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">publish.SetMqttInOut(MQTT_IN_OUT := inputMQTT_IN_OUT^);

InitDone := TRUE;
SendDone := TRUE;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_BISTABLE_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PRIO_HIGH">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="PRIO_LOW">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="TOGGLE">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="FEEDBACK">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="PreviousFeedback">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="HoldTimer">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
            <variable name="T_hold">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
            </variable>
            <variable name="PulseTrigger">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">HoldTimer(PT:= T_hold);

IF PRIO_HIGH THEN
	IF NOT FEEDBACK THEN
		PulseTrigger:=TRUE;
	END_IF
ELSIF(PRIO_LOW AND NOT (PRIO_HIGH)) THEN
	IF FEEDBACK THEN		
		PulseTrigger:=TRUE;
	END_IF
	OUT:= FALSE;
ELSIF MqttHighRequest THEN
	IF NOT FEEDBACK THEN		
		PulseTrigger:=TRUE;
	END_IF
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF MqttLowRequest THEN
	IF FEEDBACK THEN		
		PulseTrigger:=TRUE;
	END_IF
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF(TOGGLE) THEN	
	PulseTrigger:=TRUE;
END_IF;

IF ((PreviousFeedback &lt;&gt; FEEDBACK) OR Startup) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(FEEDBACK),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);	
	Startup:=FALSE;
END_IF	

PreviousFeedback := FEEDBACK;
HoldTimer.IN	 := PulseTrigger;
OUT := HoldTimer.Q;

PulseTrigger:=FALSE;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_hold">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default value for click mode, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_hold:=T_hold;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	END_IF
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;



SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:lightbulb'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="HomeAssistantEntity">
                    <type>
                      <string length="10" />
                    </type>
                    <initialValue>
                      <simpleValue value="'light'" />
                    </initialValue>
                  </variable>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="baseUrl">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1000" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); 
	ELSE
		HADiscoverID := overruleId; 
	END_IF

	// Light specific
	HADiscoverIDEntity := 'light';
	HADiscoveryObj.dev_cla.CharString :=  'light';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	HADiscoveryObj.cmd_t.CharString :=  THIS^.MQTTSubscribeTopic;
	HADiscoveryObj.pl_on.CharString :=  'TRUE';
	HADiscoveryObj.pl_off.CharString :=  'FALSE';
	
	HADiscoveryObj.opt.Boolean :=  FALSE;
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_COVER_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="PRIO_LOCK">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SENS">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T_LOCKOUT">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
            <variable name="T_UD">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10s0ms" />
              </initialValue>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="input_constant" Value="" />
                  </Attributes>
                </data>
              </addData>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="POS">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="MU">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MD">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="FB_ACT">
              <type>
                <derived name="BLIND_ACTUATOR" />
              </type>
            </variable>
            <variable name="delta">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="internal_UP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="internal_DN">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Qos_POS">
              <type>
                <derived name="MQTT.QoS" />
              </type>
            </variable>
            <variable name="Delta_POS">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="Cover_State">
              <type>
                <derived name="COVER_STATES" />
              </type>
            </variable>
            <variable name="Cover_State_Timer">
              <type>
                <derived name="TOF" />
              </type>
            </variable>
            <variable name="MqttRequestAuto">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttRequestStop">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttRequestCalibrateUp">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttRequestCalibrateDn">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousPos">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain position through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Startup THEN
	POS:=PreviousPos;
	FB_ACT.SetPOS(PreviousPos);
END_IF

Cover_State_Timer(PT:=2 * T_UD);
Cover_State_Timer.IN:=FALSE;

CASE Cover_State OF
	COVER_STATES.Idle:
		internal_UP:=FALSE;
		internal_DN:=FALSE;
		//Calculate the next state
		Cover_State := CALC_COVER_STATE(UP:=UP,DN:=DN,PRIO_LOCK:=PRIO_LOCK,PRIO_UP:=PRIO_UP,PRIO_DN:=PRIO_DN,PI:=PI,POS:=POS,MqttRequestAuto:=ADR(MqttRequestAuto),MqttRequestStop:=ADR(MqttRequestStop),MqttRequestCalibrateUp:=ADR(MqttRequestCalibrateUp),MqttRequestCalibrateDn:=ADR(MqttRequestCalibrateDn),CurrentState:=Cover_State,StateTimer:=ADR(Cover_State_Timer));
	COVER_STATES.Prio_up:
		// Only power an engine for maximum twice T_UD
		IF Cover_State_Timer.Q THEN
			internal_UP:=TRUE;
			internal_DN:=FALSE;
		ELSE
			internal_UP:=FALSE;
			internal_DN:=FALSE;
		END_IF
		//Calculate the next state
		Cover_State := CALC_COVER_STATE(UP:=UP,DN:=DN,PRIO_LOCK:=PRIO_LOCK,PRIO_UP:=PRIO_UP,PRIO_DN:=PRIO_DN,PI:=PI,POS:=POS,MqttRequestAuto:=ADR(MqttRequestAuto),MqttRequestStop:=ADR(MqttRequestStop),MqttRequestCalibrateUp:=ADR(MqttRequestCalibrateUp),MqttRequestCalibrateDn:=ADR(MqttRequestCalibrateDn),CurrentState:=Cover_State,StateTimer:=ADR(Cover_State_Timer));
	COVER_STATES.Prio_dn:
		// Only power an engine for maximum twice T_UD
		IF Cover_State_Timer.Q THEN
			internal_UP:=FALSE;
			internal_DN:=TRUE;
		ELSE
			internal_UP:=FALSE;
			internal_DN:=FALSE;
		END_IF
		//Calculate the next state
		Cover_State := CALC_COVER_STATE(UP:=UP,DN:=DN,PRIO_LOCK:=PRIO_LOCK,PRIO_UP:=PRIO_UP,PRIO_DN:=PRIO_DN,PI:=PI,POS:=POS,MqttRequestAuto:=ADR(MqttRequestAuto),MqttRequestStop:=ADR(MqttRequestStop),MqttRequestCalibrateUp:=ADR(MqttRequestCalibrateUp),MqttRequestCalibrateDn:=ADR(MqttRequestCalibrateDn),CurrentState:=Cover_State,StateTimer:=ADR(Cover_State_Timer));
	COVER_STATES.Auto:
		internal_UP:=TRUE;
		internal_DN:=TRUE;
		//Calculate the next state
		Cover_State := CALC_COVER_STATE(UP:=UP,DN:=DN,PRIO_LOCK:=PRIO_LOCK,PRIO_UP:=PRIO_UP,PRIO_DN:=PRIO_DN,PI:=PI,POS:=POS,MqttRequestAuto:=ADR(MqttRequestAuto),MqttRequestStop:=ADR(MqttRequestStop),MqttRequestCalibrateUp:=ADR(MqttRequestCalibrateUp),MqttRequestCalibrateDn:=ADR(MqttRequestCalibrateDn),CurrentState:=Cover_State,StateTimer:=ADR(Cover_State_Timer));
	COVER_STATES.Manual:
		internal_UP:=UP;
		internal_DN:=DN;
		//Calculate the next state
		Cover_State := CALC_COVER_STATE(UP:=UP,DN:=DN,PRIO_LOCK:=PRIO_LOCK,PRIO_UP:=PRIO_UP,PRIO_DN:=PRIO_DN,PI:=PI,POS:=POS,MqttRequestAuto:=ADR(MqttRequestAuto),MqttRequestStop:=ADR(MqttRequestStop),MqttRequestCalibrateUp:=ADR(MqttRequestCalibrateUp),MqttRequestCalibrateDn:=ADR(MqttRequestCalibrateDn),CurrentState:=Cover_State,StateTimer:=ADR(Cover_State_Timer));
	COVER_STATES.Calibrate_up:
		// Only power an engine for maximum twice T_UD
		IF Cover_State_Timer.Q THEN
			internal_UP:=FALSE;
			internal_DN:=TRUE;
		ELSE
			internal_UP:=FALSE;
			internal_DN:=FALSE;
			//Finish the request
			MqttRequestCalibrateUp:=FALSE;
		END_IF
		//Calculate the next state
		Cover_State := CALC_COVER_STATE(UP:=UP,DN:=DN,PRIO_LOCK:=PRIO_LOCK,PRIO_UP:=PRIO_UP,PRIO_DN:=PRIO_DN,PI:=PI,POS:=POS,MqttRequestAuto:=ADR(MqttRequestAuto),MqttRequestStop:=ADR(MqttRequestStop),MqttRequestCalibrateUp:=ADR(MqttRequestCalibrateUp),MqttRequestCalibrateDn:=ADR(MqttRequestCalibrateDn),CurrentState:=Cover_State,StateTimer:=ADR(Cover_State_Timer));
	COVER_STATES.Calibrate_dn:
		// Only power an engine for maximum twice T_UD
		IF Cover_State_Timer.Q THEN
			internal_UP:=FALSE;
			internal_DN:=TRUE;
		ELSE
			internal_UP:=FALSE;
			internal_DN:=FALSE;
			//Finish the request
			MqttRequestCalibrateDn:=FALSE;
		END_IF
		//Calculate the next state
		Cover_State := CALC_COVER_STATE(UP:=UP,DN:=DN,PRIO_LOCK:=PRIO_LOCK,PRIO_UP:=PRIO_UP,PRIO_DN:=PRIO_DN,PI:=PI,POS:=POS,MqttRequestAuto:=ADR(MqttRequestAuto),MqttRequestStop:=ADR(MqttRequestStop),MqttRequestCalibrateUp:=ADR(MqttRequestCalibrateUp),MqttRequestCalibrateDn:=ADR(MqttRequestCalibrateDn),CurrentState:=Cover_State,StateTimer:=ADR(Cover_State_Timer));
	ELSE
		Cover_State:=COVER_STATES.Idle;
END_CASE

(* Check Position*)
FB_ACT(T_UD:=T_UD, T_ANGLE:=T#0S, T_lockout := T_Lockout);

IF internal_UP AND internal_DN THEN
	(* automatic modus detected *)
	(* first find correct position *)
	IF BYTE_TO_INT(FB_ACT.pos) &lt; BYTE_TO_INT(pi) - delta THEN
		FB_ACT.UP := TRUE;
		FB_ACT.DN := FALSE;
		delta := 0;
	ELSIF BYTE_TO_INT(FB_ACT.pos) &gt; BYTE_TO_INT(pi) + delta THEN
		FB_ACT.UP := FALSE;
		FB_ACT.DN := TRUE;
		delta := 0;
	(* correct position reached *)
	ELSE
		FB_ACT.UP := FALSE;
		FB_ACT.DN := FALSE;
		delta := sens;
	END_IF;
ELSE
	FB_ACT.UP := internal_UP;
	FB_ACT.DN := internal_DN;
END_IF;

(* blind control calls blind_actuator *)
FB_ACT(T_UD:=T_UD, T_ANGLE:=T#0S, T_lockout := T_Lockout);
POS := FB_ACT.pos;
MU := FB_ACT.QU;
MD := FB_ACT.QD;

IF ((ABS(BYTE_TO_INT(PreviousPos) - BYTE_TO_INT(POS)) &gt;= Delta_POS  OR (MU = FALSE AND MD = FALSE)) AND POS &lt;&gt; PreviousPos OR Startup) AND InitMqttDone THEN
	PreviousPos:=POS;
	pMqttPublishQueue^.AddMessage(
		Payload := INT_TO_STRING(REAL_TO_INT(OSCAT_BASIC.SCALE_B(X:=POS, I_LO:=0, I_HI:=255, O_LO:=0, O_HI:=100))),
		Topic := MqttPublishTopic,
		Qos := Qos_POS,
		MqttRetain := TRUE
	);
	Startup:=FALSE;
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="T_LOCKOUT">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="T_UD">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_LOCKOUT:=T_LOCKOUT;
THIS^.T_UD:=T_UD;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('STOP')) THEN			
		THIS^.MqttRequestStop:=TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('OPEN')) THEN
		THIS^.PI:=255;
		THIS^.MqttRequestAuto:=TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('CLOSE')) THEN		
		THIS^.PI:=0;
		THIS^.MqttRequestAuto:=TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('CAL_UP')) THEN
		THIS^.MqttRequestCalibrateUp:=TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('CAL_DN')) THEN
		THIS^.MqttRequestCalibrateDn:=TRUE;
	ELSIF OSCAT_BASIC.IS_NUM(str:= Data.PayloadString^) THEN
		THIS^.PI:=REAL_TO_BYTE(OSCAT_BASIC.SCALE_B(X:=STRING_TO_BYTE(Data.PayloadString^), I_LO:=0, I_HI:=100, O_LO:=0, O_HI:=255));
		THIS^.MqttRequestAuto:=TRUE;
	END_IF

END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Qos_POS">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Cover specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Delta_POS">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

// Cover specific
THIS^.Qos_POS:=Qos_POS;
THIS^.Delta_POS:=REAL_TO_INT(OSCAT_BASIC.SCALE_B(X:=INT_TO_BYTE(Delta_POS), I_LO:=0, I_HI:=100, O_LO:=0, O_HI:=255));


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:lightbulb'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); 
	ELSE
		HADiscoverID := overruleId; 
	END_IF

	// Cover specific
	HADiscoverIDEntity := 'cover';
	//https://github.com/home-assistant/core/blob/dev/homeassistant/components/cover/__init__.py
	HADiscoveryObj.dev_cla.CharString :=  'BLIND';
	HADiscoveryObj.opt.Boolean :=  FALSE;
	HADiscoveryObj.pl_open.CharString := 'OPEN';
	HADiscoveryObj.pl_cls.CharString := 'CLOSE';
	HADiscoveryObj.pl_stop.CharString := 'STOP';
	HADiscoveryObj.pos_clsd.Number := 0;
	HADiscoveryObj.pos_open.Number := 100;
	HADiscoveryObj.set_pos_t.CharString := 	THIS^.MQTTSubscribeTopic;
	HADiscoveryObj.pos_t.CharString := THIS^.MQTTSubscribeTopic;
	HADiscoveryObj.cmd_t.CharString := THIS^.MQTTSubscribeTopic;
	HADiscoveryObj.stat_t.CharString := THIS^.MQTTSubscribeTopic;
		
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_DIMMER_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SINGLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="P_LONG">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PRIO_HIGH">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="PRIO_LOW">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Q_OUT">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="OUT">
              <type>
                <WORD />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="t3">
              <type>
                <derived name="OSCAT_BASIC.TON" />
              </type>
            </variable>
            <variable name="dim">
              <type>
                <derived name="OSCAT_BASIC._RMP_B" />
              </type>
            </variable>
            <variable name="dir">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OUT_Internal">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="LIN_TRAFO">
              <type>
                <derived name="Util.LIN_TRAFO" />
              </type>
            </variable>
            <variable name="enabled">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="OutputDimmer">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Qos_Dimm">
              <type>
                <derived name="MQTT.QoS" />
              </type>
            </variable>
            <variable name="Delta_Dimm">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="T_Debounce">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
              </documentation>
            </variable>
            <variable name="T_Reconfig">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#10s0ms" />
              </initialValue>
            </variable>
            <variable name="T_On_Max">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#0ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm_Start">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#400ms" />
              </initialValue>
            </variable>
            <variable name="T_Dimm">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1s0ms" />
              </initialValue>
            </variable>
            <variable name="Min_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
            </variable>
            <variable name="Max_On">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="200" />
              </initialValue>
            </variable>
            <variable name="Soft_Dimm">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="Rst_Out">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="OUT_LinearScaleMin">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="10000" />
              </initialValue>
            </variable>
            <variable name="OUT_LinearScaleMax">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="32767" />
              </initialValue>
            </variable>
            <variable name="DmxChannel">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> DMX specific </xhtml>
              </documentation>
            </variable>
            <variable name="DmxWidth">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="DmxUniverse">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pDmxValues">
              <type>
                <pointer>
                  <baseType>
                    <derived name="oscat_network.NETWORK_BUFFER_SHORT" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitDmxDone">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="OUT_Target">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="SoftDimToValue">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SoftDimToQFalse">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UpdateValueStep">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="OUT_Internal_tmp">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="curve">
              <type>
                <DINT />
              </type>
              <initialValue>
                <simpleValue value="DIMMER_CURVE.linear" />
              </initialValue>
            </variable>
            <variable name="wait">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Step">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="dimmedValue">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="waitTimeAtTop">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#200ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> one time before and after blink</xhtml>
              </documentation>
            </variable>
            <variable name="blinkValue">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
            </variable>
            <variable name="blinkEnabled">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousOUT">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
            <variable name="PreviousQ">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Startup THEN
	OUT := PreviousOUT;
	Q := PreviousQ;
END_IF



(* DMX specific *)
IF SoftDimToValue = TRUE THEN
	IF OUT_Target &gt; OUT_Internal THEN // we are moving up to OUT_Internal 
		IF OUT_Target - OUT_Internal &gt; UpdateValueStep THEN
			OUT_Internal := OUT_Internal + UpdateValueStep;
		ELSE
			OUT_Internal := OUT_Target;
		END_IF
	ELSIF OUT_Target &lt; OUT_Internal THEN // we are moving down to OUT_Internal
		IF OUT_Internal - OUT_Target &gt; UpdateValueStep THEN
			OUT_Internal := OUT_Internal - UpdateValueStep;
		ELSE
			OUT_Internal := OUT_Target;
			IF SoftDimToQFalse THEN
				Q := FALSE;
			END_IF
		END_IF
	END_IF
END_IF
(* DMX specific *)

	
IF RST THEN
	IF rst_out THEN OUT_Internal := 0; END_IF;
	Q := FALSE;
	dir := OUT_Internal &gt; 127;
ELSIF PRIO_HIGH THEN
	Q := TRUE;
	OUT_Internal := 255;
ELSIF PRIO_LOW THEN
	Q := FALSE;
ELSIF MqttHighRequest THEN
	Q:= TRUE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF MqttLowRequest THEN
	Q:= FALSE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF set THEN
	OUT_Internal := val;
	Q := TRUE;
	(* set direction to up when value &lt; 127 otherwise set dir down dir is reversed because next action will reverse again *)
	dir := OUT_Internal &gt; 127;
ELSIF SINGLE THEN
	(* a single click reverses output Q *)
	Q := NOT Q;
	(* when dimmer is turned on we need to limit out to min and max limits *)
	IF Q THEN 
		OUT_Target := LIMIT(MAX(OUT_Internal,1), OUT_Internal, MAX_ON);
		OUT_Internal := 0;
		SoftDimToValue := TRUE;
	ELSE
		IF OUT_Internal &gt; 0 THEN
			OUT_Target := 0;
			OUT_Internal_tmp := OUT_Internal;
			Q := TRUE; // back to true while soft dimming to 0
			SoftDimToValue := TRUE;
			SoftDimToQFalse := TRUE;
		END_IF
	END_IF;
	(* set the appropriate direction of dimmer dir is reversed because next action will reverse again *)
	dir := OUT_Internal &gt; 127;
ELSIF LONG THEN
	IF NOT Q THEN
		IF SOFT_DIMM THEN
			OUT_Internal := 1;
			dir := TRUE;
		ELSE
			OUT_Internal := LIMIT(MAX(MIN_ON,1), OUT_Internal, MAX_ON);
			DIR := OUT_Internal &lt; 127;
		END_IF;
		Q := TRUE;
	ELSE
		(* reverse direction with every long click *)
		dir := NOT dir;
	END_IF;
END_IF;


(* while dimming is active ramp the output out up or down *)
dim(DIR := dir, e := P_LONG AND Q AND enabled, TR := T_DIMM, rmp := OUT_Internal);

IF P_LONG AND Q AND OUT_Internal &gt;= Max_On AND enabled AND dir AND blinkEnabled THEN // e.g. when OUT_internal = 255 and risisng
	Step := 1 ;
END_IF

CASE Step OF
   0: 	// dont do anything
   1:  // Wait a bit at full brightness 
		enabled := FALSE;
		MqttVariables.MQTT_logger.send('Set delay', 'Dimmer');
		wait(IN:=TRUE, PT:=waitTimeAtTop);
		IF wait.Q THEN
			wait(IN:=FALSE);
			Step := Step + 1;
		END_IF
   2: // An indicating blink
   		IF  P_LONG THEN
			MqttVariables.MQTT_logger.send('BLINK', 'Dimmer');
			OUT_Internal := blinkValue; // temp blink
			wait(IN:=TRUE, PT:=TIME#100MS);
			IF wait.Q THEN
				wait(IN:=FALSE);
				Step := Step + 1;
			END_IF
		ELSE // released
			Step := 4;
			OUT_Internal := Max_On; // reset to full brightness
		END_IF
	3: // Wait a bit for the user to react
   		IF  P_LONG THEN
			OUT_Internal := Max_On; // reset to full brightness
			wait(IN:=TRUE, PT:=waitTimeAtTop);
			IF wait.Q THEN
				wait(IN:=FALSE);
				Step := Step + 1;
			END_IF
		ELSE // released
			Step := 4;
			OUT_Internal := Max_On; // reset to full brightness
		END_IF
   	4: // Back to ramp.
		enabled := TRUE;
		MqttVariables.MQTT_logger.send('END delay', 'Dimmer');
		dir := FALSE;
		Step := Step + 1;
   ELSE
      Step := 0;
END_CASE
// IF P_LONG AND Q AND OUT_Internal = 0 THEN
// 	MqttVariables.MQTT_logger.send('Set delay', 'Dimmer');
// // 	enabled := FALSE;
// 	Delay(IN:=TRUE, PT:=T#1S);
// 	IF NOT(Delay.Q) THEN
// 	   RETURN;
// 	END_IF
// 	Delay(IN:=FALSE);
// // 	enabled := TRUE;
// 	MqttVariables.MQTT_logger.send('Delay done', 'Dimmer');
// END_IF


(* reverse direction when limits are reached *)
IF OUT_Internal = 0 THEN
	dir := TRUE;
ELSIF OUT_Internal = 255 THEN
	dir := FALSE;
END_IF;

(* limit the maximum runtime *)
IF t_ON_MAX &gt; t#0s THEN
	t3(in := q, pt := T_ON_MAX);
	Q := Q XOR t3.Q;
END_IF;

(* Scale the internal OUT to the actual OUT *)
LIN_TRAFO(
		IN:= OUT_Internal,
		IN_MIN:= 0,
		IN_MAX:= 255,
		OUT_MIN:=OUT_LinearScaleMin,
		OUT_MAX:=OUT_LinearScaleMax
	);
	

(* Dimm according to a curve *)
IF curve = DIMMER_CURVE.linear THEN
		OUT := REAL_TO_WORD(LIN_TRAFO.OUT);
ELSIF curve = DIMMER_CURVE.logarithmic THEN 
		OUT := REAL_TO_WORD(65536 * LN(LIN_TRAFO.OUT + 1) / LN(65536));
ELSIF curve = DIMMER_CURVE.cubic THEN
		OUT := REAL_TO_WORD(((0.3 * EXPT((LIN_TRAFO.OUT / 65536), 3)) + (0.6 * EXPT((LIN_TRAFO.OUT / 65536), 2)) + (0.1 * (LIN_TRAFO.OUT / 65536)) + 0.0));
END_IF


IF Q THEN
	Q_OUT:= OUT;
ELSE
	Q_OUT:= 0;
END_IF

IF ((ABS(BYTE_TO_INT(PreviousOUT) - BYTE_TO_INT(OUT_Internal)) &gt;= Delta_Dimm) OR Startup AND OUT_Internal &lt;&gt; PreviousOUT OR Startup AND OutputDimmer) AND InitMqttDone THEN
	PreviousOUT:=OUT_Internal;
	pMqttPublishQueue^.AddMessage(		
		Payload := BYTE_TO_STRING(OUT_Internal),
		Topic := CONCAT(MQTTPublishTopic, '/OUT'),
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);
END_IF

IF (Q &lt;&gt; PreviousQ OR Startup) AND InitMqttDone THEN
	PreviousQ:=Q;
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(Q),
		Topic := CONCAT(MQTTPublishTopic, '/Q'),
		Qos := Qos_Dimm,
		MqttRetain := TRUE
	);
END_IF

(* DMX specific *)
IF InitDmxDone THEN 
	IF Q THEN
		IF pDmxValues^.BUFFER[DmxChannel-1] &lt;&gt; OUT_Internal THEN
			pDmxValues^.BUFFER[DmxChannel-1] := OUT_Internal;
		END_IF
	ELSE 
		IF pDmxValues^.BUFFER[DmxChannel-1] &lt;&gt; 0 THEN
			pDmxValues^.BUFFER[DmxChannel-1] := 0;
		END_IF
	END_IF
END_IF
IF SoftDimToValue AND OUT_Internal = OUT_Target THEN // If the same, softdim to value is done
	SoftDimToValue := FALSE;
	IF SoftDimToQFalse THEN
		SoftDimToQFalse := FALSE;
		OUT_Internal := OUT_Internal_tmp;
		PreviousOUT:=OUT_Internal;
	END_IF
END_IF
Startup:=FALSE;

(* DMX specific *)
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:lightbulb'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="HomeAssistantEntity">
                    <type>
                      <string length="10" />
                    </type>
                    <initialValue>
                      <simpleValue value="'light'" />
                    </initialValue>
                  </variable>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="baseUrl">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1000" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_AO_DIMMER_003'
	ELSE
		HADiscoverID := overruleId; // 'MY_DIMMER_GND_HALL_01'
	END_IF

	// Light specific
	HADiscoverIDEntity := 'light';
	HADiscoveryObj.dev_cla.CharString :=  'light';
	HADiscoveryObj.stat_t.CharString :=  CONCAT(THIS^.MQTTPublishTopic,'/Q');
	HADiscoveryObj.pl_on.CharString :=  'TRUE';
	HADiscoveryObj.pl_off.CharString :=  'FALSE';
	HADiscoveryObj.bri_stat_t.CharString :=  CONCAT(THIS^.MQTTPublishTopic,'/OUT');
	HADiscoveryObj.cmd_t.CharString :=  CONCAT(THIS^.MQTTSubscribeTopic,'/Q');
	HADiscoveryObj.bri_cmd_t.CharString := CONCAT(THIS^.MQTTSubscribeTopic,'/OUT');
	HADiscoveryObj.bri_scl.Number :=  255;
	HADiscoveryObj.opt.Boolean :=  FALSE;
	HADiscoveryObj.on_cmd_type.CharString :=  'last';
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initDMX">
              <interface>
                <inputVars>
                  <variable name="DmxChannel">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="DmxWidth">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="DmxUniverse">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="pDmxValues">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="oscat_network.NETWORK_BUFFER_SHORT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF NOT THIS^.InitDmxDone THEN
	THIS^.DmxChannel := DmxChannel;
	THIS^.pDmxValues := pDmxValues;
	THIS^.DmxWidth := DmxWidth;
	THIS^.InitDmxDone := TRUE;
	
	THIS^.HADiscoveryObj.dmxChannel.Integer := THIS^.DmxChannel;
	THIS^.HADiscoveryObj.dmxWith.Integer := THIS^.DmxWidth;
	THIS^.HADiscoveryObj.dmxUniverse.Integer := THIS^.DmxUniverse; //Depends on the Network_Buffer
	
	THIS^.InitDmxDone := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="OutputDimmer">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Dimmer specific</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Qos_Dimm">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="Delta_Dimm">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;

// Dimmer specific
THIS^.OutputDimmer:=OutputDimmer;
THIS^.Qos_Dimm:=Qos_Dimm;
THIS^.Delta_Dimm:=Delta_Dimm;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlock">
              <interface>
                <inputVars>
                  <variable name="T_Debounce">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#10ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Default values for dimmer, can be overwritten by method call </xhtml>
                    </documentation>
                  </variable>
                  <variable name="T_Reconfig">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#10s0ms" />
                    </initialValue>
                  </variable>
                  <variable name="T_On_Max">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#0ms" />
                    </initialValue>
                  </variable>
                  <variable name="T_Dimm_Start">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#400ms" />
                    </initialValue>
                  </variable>
                  <variable name="T_Dimm">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#3s0ms" />
                    </initialValue>
                  </variable>
                  <variable name="Min_On">
                    <type>
                      <BYTE />
                    </type>
                    <initialValue>
                      <simpleValue value="50" />
                    </initialValue>
                  </variable>
                  <variable name="Max_On">
                    <type>
                      <BYTE />
                    </type>
                    <initialValue>
                      <simpleValue value="255" />
                    </initialValue>
                  </variable>
                  <variable name="Soft_Dimm">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="Rst_Out">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="OUT_LinearScaleMin">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="OUT_LinearScaleMax">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="32767" />
                    </initialValue>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.T_Debounce:=T_Debounce;
THIS^.T_Reconfig:=T_Reconfig;
THIS^.T_On_Max:=T_On_Max;
THIS^.T_Dimm_Start:=T_Dimm_Start;
THIS^.T_Dimm:=T_Dimm;
THIS^.Min_On:=Min_On;
THIS^.Max_On:=Max_On;
THIS^.Soft_Dimm:=Soft_Dimm;
THIS^.Rst_Out:=Rst_Out;
THIS^.OUT_LinearScaleMin:=OUT_LinearScaleMin;
THIS^.OUT_LinearScaleMax:=OUT_LinearScaleMax;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CONCAT(MQTTSubscribeTopic,'/Q') =  Data.TopicOut^ THEN
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	END_IF;
	
ELSIF CONCAT(MQTTSubscribeTopic,'/OUT') =  Data.TopicOut^ THEN
	IF OSCAT_BASIC.IS_CC(str:= Data.PayloadString^,cmp:='0123456789.') AND THIS^.PRIO_HIGH = FALSE THEN
		THIS^.OUT_Target:=STRING_TO_BYTE(Data.PayloadString^);
		THIS^.SoftDimToValue:=TRUE;
	END_IF
	
	
// Legacy! backwards compatiably with /+ topics instead of /#
ELSIF CommonTypesAndFunctions.StrEqualsAtStart(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	ELSIF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	ELSIF OSCAT_BASIC.IS_CC(str:= Data.PayloadString^,cmp:='0123456789.') AND THIS^.PRIO_HIGH = FALSE THEN
		THIS^.OUT_Target:=STRING_TO_BYTE(Data.PayloadString^);
		THIS^.SoftDimToValue:=TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_OUTPUT_SWITCH_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PRIO_HIGH">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="PRIO_LOW">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="TOGGLE">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Startup THEN
	OUT := PreviousState;
END_IF

IF PRIO_HIGH THEN
	OUT:=TRUE;
ELSIF(PRIO_LOW AND NOT (PRIO_HIGH)) THEN
	OUT:= FALSE;
ELSIF MqttHighRequest THEN
	OUT:= TRUE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF MqttLowRequest THEN
	OUT:= FALSE;
	MqttHighRequest := FALSE;
	MqttLowRequest := FALSE;
ELSIF(TOGGLE) THEN
	OUT:=NOT(OUT);
END_IF;

IF ((PreviousState &lt;&gt; OUT) OR Startup) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(OUT),
		Topic := MQTTPublishTopic,
		Qos := MQTT.QoS.ExactlyOnce,
		MqttRetain := TRUE
	);	
	Startup:=FALSE;
END_IF	

PreviousState := OUT;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized, otherwise do nothing
IF NOT(InitMqttDone) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//now process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		MqttHighRequest := TRUE;
	END_IF
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		MqttLowRequest := TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;



SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:electric-switch'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_DO_SW_003'
	ELSE
		HADiscoverID := overruleId; // 'MY_Switch_GND_HALL_01'
	END_IF
	
	// Switch specific
	HADiscoverIDEntity := 'switch';
	HADiscoveryObj.dev_cla.CharString :=  'switch';
	HADiscoveryObj.ic.CharString :=  icon;
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	HADiscoveryObj.pl_on.CharString :=  'TRUE';
	HADiscoveryObj.pl_off.CharString :=  'FALSE';
	HADiscoveryObj.cmd_t.CharString :=  THIS^.MQTTSubscribeTopic;
	HADiscoveryObj.opt.Boolean :=  FALSE;
	HADiscoveryObj.on_cmd_type.CharString :=  'last';

	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_BUSCONTROLLER" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="BusOcupied">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Set this to True by default at startup to allow for some RS485 devices to boot up at power interuptions	</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="StartupDelay">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#5s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amount of time that should be waited on PLC startup to start using the RS485 bus</xhtml>
              </documentation>
            </variable>
            <variable name="SilenceTime">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#20ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> This is the silence time between two requests</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Used to detect startup</xhtml>
              </documentation>
            </variable>
            <variable name="tonDelay">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To manage silence time and startup delay</xhtml>
              </documentation>
            </variable>
            <variable name="devices">
              <type>
                <array>
                  <dimension lower="0" upper="31" />
                  <baseType>
                    <derived name="RS485Device" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">collection of devices on the bus</xhtml>
              </documentation>
            </variable>
            <variable name="devicesCount">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">total number of devices registred on the bus</xhtml>
              </documentation>
            </variable>
            <variable name="selectedDevice">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">index of the active device on the bus</xhtml>
              </documentation>
            </variable>
            <variable name="deviceActive">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="loopCounter">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ActiveRtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
            </variable>
            <variable name="BusTrigger">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="QueryReady">
              <type>
                <derived name="Standard.F_TRIG" />
              </type>
            </variable>
            <variable name="BusData">
              <type>
                <pointer>
                  <baseType>
                    <array>
                      <dimension lower="0" upper="124" />
                      <baseType>
                        <WORD />
                      </baseType>
                    </array>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="BusError">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="exc">
              <type>
                <derived name="__SYSTEM.ExceptionCode" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Startup THEN
	tonDelay.PT := StartupDelay;
	tonDelay.IN := TRUE;
	Startup := FALSE;
END_IF

QueryReady(CLK := BusTrigger^);
BusOcupied := NOT(tonDelay.Q);
tonDelay();

// check if there's a device that requires bus time and if so, launch the query
IF busOcupied = FALSE AND devicesCount &lt;&gt; 0 THEN
	FOR loopCounter := 0 TO devicesCount - 1 DO
		IF devices[loopCounter].RequestBusTime() AND deviceActive = FALSE THEN
			selectedDevice := loopCounter;
			THIS^.SetBusOccupied();
			ActiveRtuQuery := devices[selectedDevice].GetRtuQuery();
			BusTrigger^ := TRUE;
		END_IF
	END_FOR;
END_IF

//watch the trigger, when completed call the FB with the data, release the bus
IF QueryReady.Q THEN
	devices[selectedDevice].ProcessDataArray(BusError, BusData);
	THIS^.ReleaseBus();
END_IF


//let the busdevices to their work
//FOR loopCounter := 0 TO devicesCount - 1 DO
//	devices[loopCounter]();
// END_FOR;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ReleaseBus">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Private="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// Start a timer to release the bus
THIS^.tonDelay.PT := THIS^.SilenceTime;
THIS^.tonDelay.IN := TRUE;
THIS^.deviceActive := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetBusOccupied">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                    <AccessModifiers Private="true" />
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.tonDelay.IN := FALSE;
THIS^.deviceActive := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init">
              <interface>
                <inputVars>
                  <variable name="StartupDelay">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amount of time that should be waited on PLC startup to start using the RS485 bus, can prevent errors due to devices not booted up yet</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SilenceTime">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> This is the silence time between two requests</xhtml>
                    </documentation>
                  </variable>
                  <variable name="BusTrigger">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to the bool that controls triggering busrequests</xhtml>
                    </documentation>
                  </variable>
                  <variable name="BusData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="BusError">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.StartupDelay := StartupDelay;
THIS^.SilenceTime := SilenceTime;
THIS^.BusTrigger := BusTrigger;
THIS^.BusData := BusData;
THIS^.BusError := BusError;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RegisterDevice">
              <interface>
                <inputVars>
                  <variable name="device">
                    <type>
                      <derived name="RS485Device" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF devicesCount &lt;&gt; 32 THEN
	devices[devicesCount] := device;
	devicesCount := devicesCount + 1;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_EASTRON_SDM_POWER_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="ACTIVEPOWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveDevice">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="isDataUpdated">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="DeviceType">
              <type>
                <derived name="RS485_EASTRON_SDM_Devices" />
              </type>
            </variable>
            <variable name="SDM120AndSDM220RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="12" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="2" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="SDM630RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="52" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="2" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

IF isDataUpdated THEN
	isDataUpdated := FALSE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(ACTIVEPOWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/ACTP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData.Q THEN
	THIS^.timerData.IN := FALSE;
	IF DeviceType = RS485_EASTRON_SDM_Devices.SDM120 OR  DeviceType = RS485_EASTRON_SDM_Devices.SDM220 THEN
		GetRtuQuery := THIS^.SDM120AndSDM220RtuQuery;		
	END_IF
	IF DeviceType = RS485_EASTRON_SDM_Devices.SDM630 THEN
		GetRtuQuery := THIS^.SDM630RtuQuery;		
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done THEN	
	RequestBusTime := FALSE;	
ELSIF timerData.Q THEN
	RequestBusTime := TRUE;
ELSE
	RequestBusTime := FALSE;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="DeviceType">
                    <type>
                      <derived name="RS485_EASTRON_SDM_Devices" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData.PT := DataPollingInterval;
THIS^.SDM120AndSDM220RtuQuery.DeviceId := DeviceAddress;
THIS^.SDM630RtuQuery.DeviceId := DeviceAddress;
THIS^.timerData.IN := TRUE;
THIS^.DeviceType := DeviceType;

THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.Error := Error^;
THIS^.timerData.IN := TRUE;

IF Error^ THEN
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

IF NOT Error^ THEN
	THIS^.ACTIVEPOWER := SwapWordsToReal(Data^[0], Data^[1]);
	THIS^.isDataUpdated := TRUE;
END_IF

ActiveDevice := FALSE;



</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_EASTRON_SDM120_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="VOLTAGE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="CURRENT">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="ACTIVEPOWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="APPARENT_POWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="REACTIVE_POWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="POWER_FACTOR">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="PHASE_ANGLE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="FREQUENCY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="IMPORT_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="EXPORT_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="IMPORT_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="EXPORT_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="TOTAL_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="TOTAL_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveDevice">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveRtuQuery">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="Data1RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="0" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="40" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData1">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Data2RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="70" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="10" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData2">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Data3RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="342" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="4" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData3">
              <type>
                <derived name="TON" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData1();
timerData2();
timerData3();

IF Update1 THEN
	Update1 := FALSE;
	DataAvailable1 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(VOLTAGE),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/VOLT' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(CURRENT),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/CURR' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);	
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(ACTIVEPOWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/ACTP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(APPARENT_POWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/APPP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(REACTIVE_POWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/REAP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(POWER_FACTOR),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/POWF' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(PHASE_ANGLE),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/PHAA' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF

IF Update2 THEN
	Update2 := FALSE;
	DataAvailable2 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(FREQUENCY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/FREQ' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(IMPORT_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/IMAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(EXPORT_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/EXAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(IMPORT_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/IMRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(EXPORT_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/EXRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF

IF Update3 THEN
	Update3 := FALSE;	
	DataAvailable3 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(TOTAL_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/TOTAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(TOTAL_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/TOTRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData1.Q THEN
	THIS^.timerData1.IN := FALSE;
	THIS^.ActiveRtuQuery := 1;
	GetRtuQuery := THIS^.Data1RtuQuery;
ELSIF timerData2.Q THEN
	THIS^.timerData2.IN := FALSE;
	THIS^.ActiveRtuQuery := 2;
	GetRtuQuery := THIS^.Data2RtuQuery;
ELSIF timerData3.Q THEN
	THIS^.timerData3.IN := FALSE;
	THIS^.ActiveRtuQuery := 3;
	GetRtuQuery := THIS^.Data3RtuQuery;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done THEN	
	RequestBusTime := FALSE;	
ELSIF timerData1.Q OR timerData2.Q OR timerData3.Q THEN
	RequestBusTime := TRUE;	
ELSE
	RequestBusTime := FALSE;		
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="Data1PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Data2PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Data3PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData1.PT := Data1PollingInterval;
THIS^.timerData2.PT := Data2PollingInterval;
THIS^.timerData3.PT := Data3PollingInterval;

THIS^.Data1RtuQuery.DeviceId := DeviceAddress;
THIS^.Data2RtuQuery.DeviceId := DeviceAddress;
THIS^.Data3RtuQuery.DeviceId := DeviceAddress;

THIS^.timerData1.IN := TRUE;
THIS^.timerData2.IN := TRUE;
THIS^.timerData3.IN := TRUE;

THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Error^ THEN
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

IF ActiveRtuQuery = 1 THEN
	THIS^.Error1 := Error^;
	THIS^.timerData1.IN := TRUE;
	IF NOT Error^ THEN
		THIS^.VOLTAGE := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.CURRENT := SwapWordsToReal(Data^[6], Data^[7]);
		THIS^.ACTIVEPOWER := SwapWordsToReal(Data^[12], Data^[13]);
		THIS^.APPARENT_POWER := SwapWordsToReal(Data^[18], Data^[19]);
		THIS^.REACTIVE_POWER := SwapWordsToReal(Data^[24], Data^[25]);
		THIS^.POWER_FACTOR := SwapWordsToReal(Data^[30], Data^[31]);
		THIS^.PHASE_ANGLE := SwapWordsToReal(Data^[36], Data^[37]);
		THIS^.Update1 := TRUE;
	END_IF
ELSIF ActiveRtuQuery = 2 THEN
	THIS^.Error2:= Error^;
	THIS^.timerData2.IN := TRUE;
	IF NOT Error^ THEN		
		THIS^.FREQUENCY := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.IMPORT_ACTIVE_ENERGY := SwapWordsToReal(Data^[2], Data^[3]);
		THIS^.EXPORT_ACTIVE_ENERGY := SwapWordsToReal(Data^[4], Data^[5]);
		THIS^.IMPORT_REACTIVE_ENERGY := SwapWordsToReal(Data^[6], Data^[7]);
		THIS^.EXPORT_REACTIVE_ENERGY := SwapWordsToReal(Data^[8], Data^[9]);
		THIS^.Update2 := TRUE;
	END_IF
ELSIF ActiveRtuQuery = 3 THEN
	THIS^.Error3 := Error^;
	THIS^.timerData3.IN := TRUE;
	IF NOT Error^ THEN
		THIS^.TOTAL_ACTIVE_ENERGY := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.TOTAL_REACTIVE_ENERGY := SwapWordsToReal(Data^[2], Data^[3]);
		THIS^.Update3 := TRUE;
	END_IF	
END_IF

ActiveRtuQuery := 0;
ActiveDevice := FALSE;



</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_EASTRON_SDM220_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="VOLTAGE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="CURRENT">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="ACTIVEPOWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="APPARENT_POWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="REACTIVE_POWER">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="POWER_FACTOR">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="PHASE_ANGLE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="FREQUENCY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="IMPORT_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="EXPORT_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="IMPORT_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="EXPORT_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="TOTAL_ACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="TOTAL_REACTIVE_ENERGY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveDevice">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveRtuQuery">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="Data1RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="0" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="40" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update1">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData1">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Data2RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="70" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="10" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update2">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData2">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="Data3RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="4" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="342" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="4" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="Update3">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData3">
              <type>
                <derived name="TON" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData1();
timerData2();
timerData3();

IF Update1 THEN
	Update1 := FALSE;
	DataAvailable1 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(VOLTAGE),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/VOLT' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(CURRENT),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/CURR' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);	
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(ACTIVEPOWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/ACTP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(APPARENT_POWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/APPP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(REACTIVE_POWER),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/REAP' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(POWER_FACTOR),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/POWF' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(PHASE_ANGLE),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/PHAA' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF

IF Update2 THEN
	Update2 := FALSE;
	DataAvailable2 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(FREQUENCY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/FREQ' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(IMPORT_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/IMAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(EXPORT_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/EXAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(IMPORT_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/IMRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(EXPORT_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/EXRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF

IF Update3 THEN
	Update3 := FALSE;	
	DataAvailable3 := TRUE;
	
	IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(TOTAL_ACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/TOTAE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
		pMqttPublishQueue^.AddMessage(
			Payload := REAL_TO_STRING(TOTAL_REACTIVE_ENERGY),
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/TOTRE' ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData1.Q THEN
	THIS^.timerData1.IN := FALSE;
	THIS^.ActiveRtuQuery := 1;
	GetRtuQuery := THIS^.Data1RtuQuery;
ELSIF timerData2.Q THEN
	THIS^.timerData2.IN := FALSE;
	THIS^.ActiveRtuQuery := 2;
	GetRtuQuery := THIS^.Data2RtuQuery;
ELSIF timerData3.Q THEN
	THIS^.timerData3.IN := FALSE;
	THIS^.ActiveRtuQuery := 3;
	GetRtuQuery := THIS^.Data3RtuQuery;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done THEN	
	RequestBusTime := FALSE;	
ELSIF timerData1.Q OR timerData2.Q OR timerData3.Q THEN
	RequestBusTime := TRUE;	
ELSE
	RequestBusTime := FALSE;		
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;

InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;
THIS^.MqttPublishTopicSuffix := InstanceNamePt^;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="Data1PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Data2PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="Data3PollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData1.PT := Data1PollingInterval;
THIS^.timerData2.PT := Data2PollingInterval;
THIS^.timerData3.PT := Data3PollingInterval;

THIS^.Data1RtuQuery.DeviceId := DeviceAddress;
THIS^.Data2RtuQuery.DeviceId := DeviceAddress;
THIS^.Data3RtuQuery.DeviceId := DeviceAddress;

THIS^.timerData1.IN := TRUE;
THIS^.timerData2.IN := TRUE;
THIS^.timerData3.IN := TRUE;

THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF Error^ THEN
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

IF ActiveRtuQuery = 1 THEN
	THIS^.Error1 := Error^;
	THIS^.timerData1.IN := TRUE;
	IF NOT Error^ THEN
		THIS^.VOLTAGE := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.CURRENT := SwapWordsToReal(Data^[6], Data^[7]);
		THIS^.ACTIVEPOWER := SwapWordsToReal(Data^[12], Data^[13]);
		THIS^.APPARENT_POWER := SwapWordsToReal(Data^[18], Data^[19]);
		THIS^.REACTIVE_POWER := SwapWordsToReal(Data^[24], Data^[25]);
		THIS^.POWER_FACTOR := SwapWordsToReal(Data^[30], Data^[31]);
		THIS^.PHASE_ANGLE := SwapWordsToReal(Data^[36], Data^[37]);
		THIS^.Update1 := TRUE;
	END_IF
ELSIF ActiveRtuQuery = 2 THEN
	THIS^.Error2:= Error^;
	THIS^.timerData2.IN := TRUE;
	IF NOT Error^ THEN		
		THIS^.FREQUENCY := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.IMPORT_ACTIVE_ENERGY := SwapWordsToReal(Data^[2], Data^[3]);
		THIS^.EXPORT_ACTIVE_ENERGY := SwapWordsToReal(Data^[4], Data^[5]);
		THIS^.IMPORT_REACTIVE_ENERGY := SwapWordsToReal(Data^[6], Data^[7]);
		THIS^.EXPORT_REACTIVE_ENERGY := SwapWordsToReal(Data^[8], Data^[9]);
		THIS^.Update2 := TRUE;
	END_IF
ELSIF ActiveRtuQuery = 3 THEN
	THIS^.Error3 := Error^;
	THIS^.timerData3.IN := TRUE;
	IF NOT Error^ THEN
		THIS^.TOTAL_ACTIVE_ENERGY := SwapWordsToReal(Data^[0], Data^[1]);
		THIS^.TOTAL_REACTIVE_ENERGY := SwapWordsToReal(Data^[2], Data^[3]);
		THIS^.Update3 := TRUE;
	END_IF	
END_IF

ActiveRtuQuery := 0;
ActiveDevice := FALSE;



</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_ESERA_1WIRE_GATEWAY_MQTT" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="InstanceName">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> object's full instance name </xhtml>
              </documentation>
            </variable>
            <variable name="InitRS485Done">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="DeviceAddress">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="OwdDevices">
              <type>
                <array>
                  <dimension lower="1" upper="30" />
                  <baseType>
                    <derived name="FB_RS485_ESERA_OWD_MQTT" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ActiveDevice">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="ActiveOwd">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="loopCounter">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>RS485Device</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

FOR loopCounter := 1 TO 30 DO
	OwdDevices[loopCounter]();
END_FOR</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="EnableOwd">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="OwdNumber">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OwdDevices[OwdNumber].InitOwd(
	DeviceAddress := THIS^.DeviceAddress,
	OwdNumber := OwdNumber,
	DataPollingInterval := DataPollingInterval
);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="InstanceNamePt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InstanceNamePt := CommonTypesAndFunctions.FindLastDot(ADR(THIS^.InstanceName)) + 1;

FOR loopCounter := 1 TO 30 DO
		OwdDevices[loopCounter].InitMqtt(
			MQTTPublishPrefix := MQTTPublishPrefix,
			MqttPublishTopicSuffix := InstanceNamePt^,
			pMqttPublishQueue := pMqttPublishQueue
		);
END_FOR</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitRS485">
              <interface>
                <inputVars>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DeviceAddress := DeviceAddress;
THIS^.timerData.PT := T#250MS;
THIS^.timerData.IN := TRUE;
THIS^.InitRS485Done := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitRS485Done OR NOT timerData.Q THEN	
	RequestBusTime := FALSE;
ELSE
	FOR loopCounter := 1 TO 30 DO
		IF OwdDevices[loopCounter].RequestBusTime() AND RequestBusTime = FALSE THEN
			THIS^.ActiveOwd := loopCounter;
			RequestBusTime := TRUE;			
		END_IF
	END_FOR
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OwdDevices[ActiveOwd].ProcessDataArray(
	Data := Data,
	Error := Error
);
THIS^.ActiveOwd := 0;
THIS^.timerData.IN := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData.Q THEN
	THIS^.timerData.IN := FALSE;
	GetRtuQuery := THIS^.OwdDevices[ActiveOwd].GetRtuQuery();	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_RS485_ESERA_OWD_MQTT" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="OWD_VOLTAGE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="TEMPERATURE">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="HUMIDITY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DEW_POINT">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="AIR_QUALITY">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="BRIGHTNESS">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="DataAvailable">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="Error">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="OwdNumber">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="InitMqttDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttPublishTopicPrefix">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPublishTopicSuffix">
              <type>
                <string length="50" />
              </type>
            </variable>
            <variable name="pMqttPublishQueue">
              <type>
                <pointer>
                  <baseType>
                    <derived name="FB_MqttPublishQueue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitOwdDone">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="timerData">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="RtuQuery">
              <type>
                <derived name="RS485_RtuQuery" />
              </type>
              <initialValue>
                <structValue>
                  <value member="FunctionCode">
                    <simpleValue value="3" />
                  </value>
                  <value member="ReadAddress">
                    <simpleValue value="100" />
                  </value>
                  <value member="ReadQuantity">
                    <simpleValue value="17" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">timerData();

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessBrigthness">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.BRIGHTNESS := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/BNESS', Data := REAL_TO_STRING(BRIGHTNESS));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="RequestBusTime">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitOwdDone THEN	
	RequestBusTime := FALSE;	
ELSIF timerData.Q THEN
	RequestBusTime := TRUE;
ELSE
	RequestBusTime := FALSE;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDataArray">
              <interface>
                <inputVars>
                  <variable name="Error">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="124" />
                            <baseType>
                              <WORD />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.timerData.IN := TRUE;

IF WORD_TO_INT(Data^[12]) &lt;&gt; 0 OR Error^ THEN
	THIS^.Error := TRUE;
	PubMqttMessage(Suffix := '/availability', Data := 'offline');
ELSE 	
	THIS^.Error := FALSE;
	THIS^.DataAvailable := TRUE;
	PubMqttMessage(Suffix := '/availability', Data := 'online');
END_IF

// Data handling
IF NOT Error^ AND WORD_TO_INT(Data^[12]) = 0 THEN
	IF Data^[16] = 11151 OR Data^[16] = 11152 THEN // Temperature, humidity &amp; air quality
		ProcessTemperature(Data^[0]);		
		ProcessOwdVoltage(Data^[2]);
		ProcessHumidity(Data^[4]);
		ProcessDewPoint(Data^[6]);
		ProcessAirQuality(Data^[8]);
	ELSIF Data^[16] = 11102 OR Data^[16] = 11113 OR Data^[16] = 11120 OR Data^[16] = 11148 OR Data^[16] = 11150 OR Data^[16] = 11160 THEN // Temperature, humidity
		ProcessTemperature(Data^[0]);		
		ProcessOwdVoltage(Data^[2]);
		ProcessHumidity(Data^[4]);
		ProcessDewPoint(Data^[6]);
	ELSIF Data^[16] = 11121 OR Data^[16] = 11132 OR Data^[16] = 11134 OR Data^[16] = 11135 THEN // Temperature, humidity, brightness
		ProcessTemperature(Data^[0]);		
		ProcessOwdVoltage(Data^[2]);
		ProcessHumidity(Data^[4]);
		ProcessDewPoint(Data^[6]);
		ProcessBrigthness(Data^[8]);
	ELSIF Data^[16] = 1820  THEN // Temperature DS18B20
        ProcessTemperature(Data^[0]);
	END_IF		
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetRtuQuery">
              <interface>
                <returnType>
                  <derived name="RS485_RtuQuery" />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF timerData.Q THEN
	THIS^.timerData.IN := FALSE;
	GetRtuQuery := THIS^.RtuQuery;	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessAirQuality">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.AIR_QUALITY := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/AIRQ', Data := REAL_TO_STRING(AIR_QUALITY));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessDewPoint">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DEW_POINT := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/DEWP', Data := REAL_TO_STRING(DEW_POINT));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessHumidity">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.HUMIDITY := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/HUM', Data := REAL_TO_STRING(HUMIDITY));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessOwdVoltage">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OWD_VOLTAGE := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/OWDV', Data := REAL_TO_STRING(OWD_VOLTAGE));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ProcessTemperature">
              <interface>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.TEMPERATURE := WORD_TO_REAL(Data) / 100;
PubMqttMessage(Suffix := '/TEMP', Data := REAL_TO_STRING(TEMPERATURE));</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PubMqttMessage">
              <interface>
                <inputVars>
                  <variable name="Suffix">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="Data">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone THEN
		pMqttPublishQueue^.AddMessage(
			Payload := Data,
			Topic := CONCAT(CONCAT(CONCAT(CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix), '/OWD/'), UINT_TO_STRING(OwdNumber)), Suffix ),
			Qos := MQTT.QoS.ExactlyOnce,
			MqttRetain := FALSE
		);
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttPublishTopicSuffix">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.MqttPublishTopicPrefix := MQTTPublishPrefix;
THIS^.MqttPublishTopicSuffix := MqttPublishTopicSuffix;
THIS^.pMqttPublishQueue := pMqttPublishQueue;

THIS^.InitMqttDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitOwd">
              <interface>
                <inputVars>
                  <variable name="DeviceAddress">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="OwdNumber">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="DataPollingInterval">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.RtuQuery.DeviceId := DeviceAddress;
THIS^.RtuQuery.ReadAddress := OwdNumber * 100;
THIS^.timerData.PT := DataPollingInterval;
THIS^.OwdNumber := OwdNumber;

THIS^.timerData.IN := TRUE;

THIS^.InitOwdDone := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_BOOL_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(IN),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := BOOL_TO_STRING(OUT),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('TRUE')) THEN
		THIS^.OUT := TRUE;
		MqttMessageReceived := TRUE;
	END_IF
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.PayloadString, str2:= ADR('FALSE')) THEN
		THIS^.OUT := FALSE;
		MqttMessageReceived := TRUE;
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:numeric'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="baseUrl">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1000" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_VERITUAL_XXX_XXX'
	ELSE
		HADiscoverID := overruleId; // 'MY_VIRTUAL_001'
	END_IF

	HADiscoverIDEntity := 'sensor';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	HADiscoveryObj.pl_on.CharString :=  'TRUE';
	HADiscoveryObj.pl_off.CharString :=  'FALSE';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	HADiscoveryObj.opt.Boolean :=  TRUE;
	
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_INT_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <INT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := INT_TO_STRING(IN),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := INT_TO_STRING(OUT),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	IF OSCAT_BASIC.IS_NUM(str:= Data.PayloadString^) THEN
		THIS^.OUT := STRING_TO_INT(Data.PayloadString^);	
		MqttMessageReceived := TRUE;	
	END_IF
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:toggle-switch-off-outline'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="baseUrl">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1000" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_VERITUAL_XXX_XXX'
	ELSE
		HADiscoverID := overruleId; // 'MY_VIRTUAL_001'
	END_IF

	HADiscoverIDEntity := 'sensor';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_REAL_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := REAL_TO_STRING(IN),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := REAL_TO_STRING(OUT),
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <REAL />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	THIS^.OUT := STRING_TO_REAL(Data.PayloadString^);	
	MqttMessageReceived := TRUE;	
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:decimal'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="baseUrl">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1000" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_VERITUAL_XXX_XXX'
	ELSE
		HADiscoverID := overruleId; // 'MY_VIRTUAL_001'
	END_IF

	HADiscoverIDEntity := 'sensor';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="FB_VIRTUAL_STRING_MQTT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <string />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="InstancePath">
              <type>
                <string />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="noinit" />
                    <Attribute Name="instance-path" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Refelection: object's full instance name</xhtml>
              </documentation>
            </variable>
            <variable name="Startup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UpdateFlag">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="VirtualMode">
              <type>
                <derived name="VIRTUAL_MODES" />
              </type>
            </variable>
            <variable name="DefaultValue">
              <type>
                <string />
              </type>
            </variable>
            <variable name="SetDefaultValueStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UsePersistentAtStartup">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ConfirmReceival">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MqttMessageReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PreviousIn">
              <type>
                <string />
              </type>
            </variable>
          </localVars>
          <localVars persistent="true">
            <variable name="PreviousState">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> To retain output state through powercycles</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>FB_MQTT_BASE</Extends>
                <Implements>MQTT.MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF VirtualMode = VIRTUAL_MODES.Output THEN
	IF (Startup AND PublishAtStartup) OR (UpdateFlag OR IN &lt;&gt; PreviousIn) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := IN,
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	UpdateFlag := FALSE;
	PreviousIn := IN;
	END_IF
ELSIF VirtualMode = VIRTUAL_MODES.Input THEN
	IF Startup AND SetDefaultValueStartup THEN
		OUT := DefaultValue;
	ELSIF UsePersistentAtStartup THEN
		OUT := PreviousState;
	END_IF	
	
	IF ((Startup AND PublishAtStartup) OR (ConfirmReceival AND MqttMessageReceived)) AND InitMqttDone THEN
	pMqttPublishQueue^.AddMessage(
		Payload := OUT,
		Topic := CONCAT(MqttPublishTopicPrefix^, MqttPublishTopicSuffix),
		Qos := MqttQos,
		MqttRetain := MqttRetain
	);
	Startup:=FALSE;
	MqttMessageReceived := FALSE;
	PreviousState:=OUT;
	END_IF		
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualOutput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.VirtualMode:=VIRTUAL_MODES.Output;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetValue">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Value">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=Value;
THIS^.UpdateFlag:=TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ConfigureFunctionBlockAsVirtualInput">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="DefaultValue">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="SetDefaultValueStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PublishAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="UsePersistentAtStartup">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ConfirmReceival">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.DefaultValue:=DefaultValue;
THIS^.SetDefaultValueStartup:=SetDefaultValueStartup;
THIS^.PublishAtStartup:=PublishAtStartup;
THIS^.UsePersistentAtStartup:=UsePersistentAtStartup;
THIS^.ConfirmReceival:=ConfirmReceival;
THIS^.VirtualMode:=VIRTUAL_MODES.Input;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="MQTT.CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of recived Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//first check if Mqtt is initialized and FB in input mode, otherwise do nothing
IF NOT(InitMqttDone) AND VirtualMode &lt;&gt; VIRTUAL_MODES.Input THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
//check if the packet is for this FB
ELSIF CommonTypesAndFunctions.StrEquals(str1:= ADR(MQTTSubscribeTopic), str2:= Data.TopicOut) THEN
	//mark the interface call from the collector as done
	PublishReceived := TRUE;
	//process the data
	THIS^.OUT := Data.PayloadString^;	
	MqttMessageReceived := TRUE;
END_IF </xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqtt">
              <interface>
                <inputVars>
                  <variable name="MQTTPublishPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MQTTSubscribePrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttPublishQueue">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="FB_MqttPublishQueue" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pMqttCallbackCollector">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT.CallbackCollector" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MqttQos">
                    <type>
                      <derived name="MQTT.QoS" />
                    </type>
                  </variable>
                  <variable name="MqttRetain">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">InitMqttDone := TRUE;

SUPER^._InstancePath := THIS^.InstancePath; // Due to reflection its location is important

(*pass trough*)
THIS^.pMqttPublishQueue := pMqttPublishQueue;
THIS^.MqttPublishTopicPrefix:=MQTTPublishPrefix;
THIS^.MQTTSubscribeTopicPrefix:=MQTTSubscribePrefix;
THIS^.pMqttPublishQueue:=pMqttPublishQueue;
THIS^.MqttQos:=MqttQos;
THIS^.MqttRetain:=MqttRetain;


SUPER^.InitBaseMqtt();
pMqttCallbackCollector^.put(instance:= THIS^); // register the FB agains the collector so mqtt events can be received

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitMqttDiscovery">
              <interface>
                <inputVars>
                  <variable name="MqttHADiscoveryPrefix">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="Device">
                    <type>
                      <derived name="FB_HomeAssistant_DEVICE" />
                    </type>
                  </variable>
                  <variable name="icon">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="'mdi:code-string'" />
                    </initialValue>
                  </variable>
                  <variable name="name">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="overruleId">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="meta">
                    <type>
                      <string length="255" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="init">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="baseUrl">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="id">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="MqttJSON">
                    <type>
                      <string length="1000" />
                    </type>
                  </variable>
                  <variable name="MqttTopic">
                    <type>
                      <string length="100" />
                    </type>
                  </variable>
                  <variable name="ComposeJSON">
                    <type>
                      <derived name="STRUCT_TO_JSON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitMqttDone AND NOT init THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= ADR(overruleId), str2:= ADR('')) THEN
		HADiscoverID := CONCAT(CONCAT(THIS^.DeviceName,'_'), THIS^.InstanceNamePt^); // 'FB_VERITUAL_XXX_XXX'
	ELSE
		HADiscoverID := overruleId; // 'MY_VIRTUAL_001'
	END_IF
	
	HADiscoverIDEntity := 'sensor';
	HADiscoveryObj.stat_t.CharString :=  THIS^.MQTTPublishTopic;
	
	
	SUPER^.InitBaseMqttDiscovery(	
		MqttHADiscoveryPrefix:=MqttHADiscoveryPrefix,
		Device:= Device,
		icon:= icon,
		name:= name,
		overruleId:= overruleId,
		meta:= meta,
	);
	init := TRUE;
END_IF		</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="E">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="UP">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="BUSY">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="LOW">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_B" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* generate ramp *)
rmp(dir := UP, E := E, TR := PT, rmp := out);

(* set or reset operation *)
IF RST THEN
	out := 0;
ELSIF SET THEN
	out := 255;
END_IF;

(* checks for outputs stable and reset or set busy flag *)
low := out = 0;
high := out = 255;
busy := NOT (low OR high) AND E;


(* revision history

hm 5.10.2006	rev 1.1
	added busy output
hm 17.1.2007	rev 1.2
	renamed input ud to up for better usability
	deleted unused variable step

hm	17.9.2007		rev 1.3
	replaced time() with t_plc_ms() for compatibility reasons

hm	28. sep 2007	rev 1.4
	added outputs on and off
	busy is now disabled while en is false
	new coding for higher accuracy and performance

hm	5. oct 2007	rev 1.5
	added statements to allow for PT to be t#0s output jumps to max or min immediately

hm	25. dec 2007	rev 1.6
	improved code for better performance

hm	16. oct. 2008	rev 1.7
	improved code for better performance

hm	18. oct. 2008	rev 1.8
	added type conversion to avoid warnings
	changed input en to e for compatibility reasons

hm	23. oct. 2008	REV 	2.0
	new code using _RMP_B

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetRMP">
              <interface>
                <inputVars>
                  <variable name="RMP">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.OUT:=RMP;
THIS^.rmp.SetRMP(RMP);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
        </addData>
      </pou>
      <pou name="SwapWordsToReal" pouType="function">
        <interface>
          <returnType>
            <REAL />
          </returnType>
          <inputVars>
            <variable name="wHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wLo">
              <type>
                <WORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="dwVar">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="pt_REAL">
              <type>
                <pointer>
                  <baseType>
                    <REAL />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">dwVar := SHL(WORD_TO_DWORD(wHi),16) OR WORD_TO_DWORD(wLo);
pt_REAL := ADR(dwVar);
SwapWordsToReal := pt_REAL^;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
      <Interface name="RS485Device">
        <Methods>
          <Method name="ProcessDataArray">
            <interface>
              <inputVars>
                <variable name="Error">
                  <type>
                    <pointer>
                      <baseType>
                        <BOOL />
                      </baseType>
                    </pointer>
                  </type>
                </variable>
                <variable name="Data">
                  <type>
                    <pointer>
                      <baseType>
                        <array>
                          <dimension lower="0" upper="124" />
                          <baseType>
                            <WORD />
                          </baseType>
                        </array>
                      </baseType>
                    </pointer>
                  </type>
                </variable>
              </inputVars>
            </interface>
            <addData />
          </Method>
          <Method name="GetRtuQuery">
            <interface>
              <returnType>
                <derived name="RS485_RtuQuery" />
              </returnType>
            </interface>
            <addData />
          </Method>
          <Method name="RequestBusTime">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
            </interface>
            <addData />
          </Method>
        </Methods>
        <addData />
      </Interface>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/application" handleUnknown="implementation">
      <resource name="Application">
        <task name="MainTask" interval="PT0.05S" priority="4">
          <pouInstance name="PLC_PRG_MAIN" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Cyclic" Interval="50" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <task name="MqttCommunication" priority="5">
          <pouInstance name="PLC_PRG_MQTT" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <pouInstance name="DMX_SEND" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Freewheeling" Interval="t#20ms" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <task name="RS485" interval="PT0.2S" priority="15">
          <pouInstance name="PLC_PRG_RS485" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Cyclic" Interval="200" IntervalUnit="ms" ExternalEvent="LocalBusCycleEvent" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <task name="Ping" interval="PT10S" priority="4">
          <pouInstance name="PRG_PING_DMX" typeName="">
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml" />
            </documentation>
          </pouInstance>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/tasksettings" handleUnknown="implementation">
              <TaskSettings KindOfTask="Cyclic" Interval="10000" IntervalUnit="ms" WithinSPSTimeSlicing="true">
                <Watchdog Enabled="false" TimeUnit="ms" Sensitivity="1" />
              </TaskSettings>
            </data>
          </addData>
        </task>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
            <Libraries>
              <Library Name="#Standard" Namespace="Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Standard, * (System)" />
              <Library Name="#IecSfc" Namespace="IecSfc" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="IecSfc, 3.4.2.0 (System)" />
              <Library Name="#Analyzation" Namespace="Analyzation" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="Analyzation, 3.5.2.0 (System)">
                <Parameters>
                  <Parameter Name="TABLE_UPPER_BOUND" Value="15" />
                  <Parameter Name="STRING_LENGTH_EXP" Value="255" />
                  <Parameter Name="STRING_LENGTH_ADDRESS" Value="20" />
                  <Parameter Name="STRING_LENGTH_COMMENT" Value="255" />
                  <Parameter Name="STRING_LENGTH_OUTSTRING" Value="255" />
                  <Parameter Name="TABLE_SHOW_VALID_ITEMS" Value="FALSE" />
                </Parameters>
              </Library>
              <Library Name="#CDS_MemMan" Namespace="CMM" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="CDS_MemMan, 3.3.2.0 (3S - Smart Software Solutions GmbH)" />
              <Library Name="Element Collections, 3.5.14.0 (3S - Smart Software Solutions GmbH)" Namespace="COL" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="#CAA Device Diagnosis" Namespace="DED" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="CAA Device Diagnosis, 3.5.15.0 (CAA Technical Workgroup)" />
              <Library Name="#BreakpointLogging" Namespace="BPLog" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="Breakpoint Logging Functions, 3.5.5.0 (3S - Smart Software Solutions GmbH)" />
              <Library Name="#WagoTypesAppLED" Namespace="WagoTypesAppLED" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoTypesAppLED, * (WAGO)" />
              <Library Name="#WagoAppAppLED" Namespace="WagoAppAppLED" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoAppAppLED, * (WAGO)" />
              <Library Name="#WagoAppPlcModbus" Namespace="WagoAppPlcModbus" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoAppPlcModbus, * (WAGO)">
                <Parameters>
                  <Parameter Name="MAX_SERVER_BUFFERSIZE" Value="4096" />
                </Parameters>
              </Library>
              <Library Name="Util, 3.5.14.0 (System)" Namespace="Util" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
                <Parameters>
                  <Parameter Name="IBLOCKSIZE" Value="22800" />
                </Parameters>
              </Library>
              <Library Name="BASIC, 3.3.4.0 (OSCAT)" Namespace="OSCAT_BASIC" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="BUILDING, 1.0.0.1 (OSCAT)" Namespace="OSCAT_BUILDING" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Common Helper for development, 1.1.0.5 (Stefan Dreyer)" Namespace="CommonTypesAndFunctions" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="NETWORK, 1.3.5.3 (OSCAT)" Namespace="OSCAT_NETWORK" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="MQTT, 1.2.0.6 (Stefan Dreyer)" Namespace="MQTT" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="#IoStandard" Namespace="IoStandard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="true" DefaultResolution="IoStandard, 3.5.17.0 (System)" />
              <Library Name="#WagoSysStandard" Namespace="WagoSysStandard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysStandard, 1.6.1.0 (WAGO)" />
              <Library Name="#3SLicense" Namespace="_3S_LICENSE" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="3SLicense, 0.0.0.0 (3S - Smart Software Solutions GmbH)" ResolverGuid="97c3b452-d9fa-4ac2-9d0c-3d420aa6d95b" />
              <Library Name="#WagoAppProcessorLoad" Namespace="WagoAppProcessorLoad" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoAppProcessorLoad, * (WAGO)" />
              <Library Name="#WagoSysKbusTerminalControl" Namespace="WagoSysKbusTerminalControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysKbusTerminalControl, 1.7.6.1 (WAGO)" />
              <Library Name="#WagoSysComInternal" Namespace="WagoSysCom_Internal" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysCom_Internal_PFC, 1.0.2.4 (WAGO)">
                <Parameters>
                  <Parameter Name="CUDIMAXCOMNUMBER" Value="32767" />
                </Parameters>
              </Library>
              <Library Name="#SysSocket" Namespace="SysSocket" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="SysSocket, * (System)" />
              <Library Name="#System_VisuElems" Namespace="VisuElems" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElems, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemMeter" Namespace="VisuElemMeter" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemMeter, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemsSpecialControls" Namespace="VisuElemsSpecialControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsSpecialControls, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemsWinControls" Namespace="VisuElemsWinControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsWinControls, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemTextEditor" Namespace="VisuElemTextEditor" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTextEditor, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemTrace" Namespace="VisuElemTrace" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTrace, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuNativeControl" Namespace="VisuNativeControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuNativeControl, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemsAlarm" Namespace="VisuElemsAlarm" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsAlarm, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemCamDisplayer" Namespace="VisuElemCamDisplayer" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemCamDisplayer, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElem3DPath" Namespace="VisuElem3DPath" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElem3DPath, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemsDateTime" Namespace="VisuElemsDateTime" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsDateTime, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#System_VisuElemXYChart" Namespace="VisuElemXYChart" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemXYChart, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#system_visuinputs" Namespace="visuinputs" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="visuinputs, 3.5.17.0 (system)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
              <Library Name="#WagoSysModbusDiag" Namespace="WagoSysModbusDiag" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="WagoSysModbus_Diag_PFC, 0.0.0.5 (WAGO)" />
              <Library Name="PRO JSON, 1.0.0.15 (Pro Electric)" Namespace="PRO_JSON" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
                <Parameters>
                  <Parameter Name="MAX_LEVELS" Value="10" />
                  <Parameter Name="MAX_NAME_SIZE" Value="50" />
                  <Parameter Name="MAX_VALUE_SIZE" Value="200" />
                  <Parameter Name="MAX_VAR_NAME" Value="150" />
                  <Parameter Name="MAX_VARS" Value="1500" />
                  <Parameter Name="MAX_EXECUTION_TIME" Value="TIME#50ms" />
                  <Parameter Name="MAX_JSON_STRING" Value="20000" />
                  <Parameter Name="NEWLINE" Value="'$R$N'" />
                  <Parameter Name="INDENT" Value="'$T'" />
                  <Parameter Name="IGNORE_LEADING_CHAR" Value="'_'" />
                  <Parameter Name="ALLWAYSRESETDONE" Value="FALSE" />
                  <Parameter Name="APPLICATIONNAME" Value="'Application'" />
                </Parameters>
              </Library>
              <Library Name="#WagoTypesEvent" Namespace="WagoTypesEvent" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoTypesEvent, * (WAGO)" />
              <Library Name="SysTarget, 3.5.17.0 (System)" Namespace="SysTarget" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="SM3_Shared, 4.9.0.0 (3S - Smart Software Solutions GmbH)" Namespace="SM0" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <addData />
            </Libraries>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <CompilerDefines>GENERATE_OVERLAY_VISU</CompilerDefines>
            </BuildProperties>
          </data>
        </addData>
      </resource>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
      <Libraries>
        <Library Name="#System_VisuElems" Namespace="VisuElems" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElems, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemMeter" Namespace="VisuElemMeter" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemMeter, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsSpecialControls" Namespace="VisuElemsSpecialControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsSpecialControls, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsWinControls" Namespace="VisuElemsWinControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsWinControls, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTextEditor" Namespace="VisuElemTextEditor" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTextEditor, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTrace" Namespace="VisuElemTrace" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTrace, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuNativeControl" Namespace="VisuNativeControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuNativeControl, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsAlarm" Namespace="VisuElemsAlarm" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsAlarm, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemCamDisplayer" Namespace="VisuElemCamDisplayer" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemCamDisplayer, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElem3DPath" Namespace="VisuElem3DPath" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElem3DPath, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsDateTime" Namespace="VisuElemsDateTime" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsDateTime, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemXYChart" Namespace="VisuElemXYChart" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemXYChart, 3.5.17.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#system_visuinputs" Namespace="visuinputs" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="visuinputs, 3.5.17.0 (system)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <addData />
      </Libraries>
    </data>
  </addData>
</project>